LPsolveIDE5Laz
lp_solve 5.5.0.14 demo
This demo will show most of the features of lp_solve 5.5.0.14
We start by creating a new problem with 4 variables and 0 constraints
We use: lp := make_lp(0, 4);
[return]

TApplication.HandleException Abstract method called
  Stack trace:
  $005771C0  PAINTLINES,  line 3258 of C:/Lazarus/components/synedit/synedit.pp
  $00576CCA  TCUSTOMSYNEDIT__PAINTTEXTLINES,  line 3361 of C:/Lazarus/components
/synedit/synedit.pp
  $0057686A  TCUSTOMSYNEDIT__PAINT,  line 2634 of C:/Lazarus/components/synedit/
synedit.pp
  $004A2663  TCUSTOMCONTROL__PAINTWINDOW,  line 127 of ./include/customcontrol.i
nc
  $004933AE  TWINCONTROL__PAINTHANDLER,  line 4239 of ./include/wincontrol.inc
  $00496617  TWINCONTROL__WMPAINT,  line 6062 of ./include/wincontrol.inc
  $004A25B2  TCUSTOMCONTROL__WMPAINT,  line 107 of ./include/customcontrol.inc
  $0040B0E9
  $004942C4  TWINCONTROL__WNDPROC,  line 4749 of ./include/wincontrol.inc
  $0057CB08  TCUSTOMSYNEDIT__WNDPROC,  line 7396 of C:/Lazarus/components/synedi
t/synedit.pp
  $0052C273  DELIVERMESSAGE,  line 103 of lclmessageglue.pas
  $00501C31  SENDPAINTMESSAGE,  line 540 of win32callback.inc
  $004FF194  WINDOWPROC,  line 2016 of win32callback.inc
  $7E418734
  $7E418816
  $7E428EA0
  $7E428EEC

C:\Lazarus\components\synedit\synedit.pp
    {$IFDEF SYN_LAZARUS}
    procedure GetTokenEx(var TokenStart: PChar; var TokenLength: integer); virtual; abstract;
    {$ENDIF}   
    
 
 function TSynAnySyn.GetToken: String;
 var
   Len: LongInt;
 begin
   Len := Run - fTokenPos;
   Result:='';
   SetString(Result, (FLine + fTokenPos), Len);
 end;
 
 {$IFDEF SYN_LAZARUS}
 procedure TSynAnySyn.GetTokenEx(var TokenStart: PChar;
   var TokenLength: integer);
 begin
   TokenLength:=Run-fTokenPos;
   TokenStart:=FLine + fTokenPos;
 end;
{$ENDIF}
