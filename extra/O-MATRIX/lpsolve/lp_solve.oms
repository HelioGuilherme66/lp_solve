begin # Begin blocking entire file for automatic inclusion

#LP_SOLVE  Solves mixed integer linear programming problems.
#
#  SYNOPSIS: [obj,x,duals] = lp_solve(f,a,b,e,vlb,vub,xint,scalemode,keep)
#
#     solves the MILP problem
#
#             max v = f'*x
#               a*x <> b
#                 vlb <= x <= vub
#                 x(int) are integer
#
#  ARGUMENTS: The first four arguments are required:
#
#           f: n vector of coefficients for a linear objective function.
#           a: m by n matrix representing linear constraints.
#           b: m vector of right sides for the inequality constraints.
#           e: m vector that determines the sense of the inequalities:
#                     e(i) = -1  ==> Less Than
#                     e(i) =  0  ==> Equals
#                     e(i) =  1  ==> Greater Than
#         vlb: n vector of lower bounds. If empty or omitted,
#              then the lower bounds are set to zero.
#         vub: n vector of upper bounds. May be omitted or empty.
#        xint: vector of integer variables. May be omitted or empty.
#   scalemode: scale flag. Off when 0 or omitted.
#        keep: Flag for keeping the lp problem after it's been solved.
#              If omitted, the lp will be deleted when solved.
#
#  OUTPUT: A nonempty output is returned if a solution is found:
#
#         obj: Optimal value of the objective function.
#           x: Optimal value of the decision variables.
#       duals: solution of the dual problem.

function [obj, x, duals] = lp_solve(f, a, b, e, vlb, vub, xint, scalemode, keep) begin

if nargin == 0 then begin
#        help lp_solve;
        return
end

[m,n] = size(a);
lp = omlpsolve("make_lp", m, n);
omlpsolve("set_verbose", lp, 3);
omlpsolve("set_mat", lp, a);
omlpsolve("set_rh_vec", lp, b);
omlpsolve("set_obj_fn", lp, f);
omlpsolve("set_maxim", lp); # default is solving minimum lp.

for i = 1 to max(size(e)) begin
  if e(i) < 0 then begin
        con_type = 1
  end else if e(i) == 0 then begin
        con_type = 3
  end else begin
        con_type = 2
  end
  omlpsolve("set_constr_type", lp, i, con_type);
end

if nargin > 4 then begin
  for i = 1 to max(size(vlb)) begin
    omlpsolve("set_lowbo", lp, i, vlb(i));
  end
end

if nargin > 5 then begin
  for i = 1 to max(size(vub)) begin
    omlpsolve("set_upbo", lp, i, vub(i));
  end
end

if nargin > 6 then begin
  for i = 1 to max(size(xint)) begin
    omlpsolve("set_int", lp, xint(i), 1);
  end
end

if nargin > 7 then begin
  if scalemode <> 0 then begin
    omlpsolve("set_scaling", lp, scalemode);
  end
end

result=omlpsolve("solve", lp);
if result == 0 or result == 1 or result == 11 or result == 12 then begin
  [obj, x, duals] = omlpsolve("get_solution", lp);
end

if nargin < 9 then begin
  omlpsolve("delete_lp", lp);
end

end

end # End blocking entire file for automatic inclusion
