


#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define lnd_yyconst const
#else
#define lnd_yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* lnd_yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define lnd_yyin lnd_yyg->lnd_yyin_r
#define lnd_yyout lnd_yyg->lnd_yyout_r
#define lnd_yyextra lnd_yyg->lnd_yyextra_r
#define lnd_yyleng lnd_yyg->lnd_yyleng_r
#define lnd_yytext lnd_yyg->lnd_yytext_r
#define lnd_yylineno (YY_CURRENT_BUFFER_LVALUE->lnd_yy_bs_lineno)
#define lnd_yycolumn (YY_CURRENT_BUFFER_LVALUE->lnd_yy_bs_column)
#define lnd_yy_flex_debug lnd_yyg->lnd_yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN lnd_yyg->lnd_yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((lnd_yyg->lnd_yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE lnd_yyrestart(lnd_yyin ,lnd_yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(lnd_yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct lnd_yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for lnd_yy_rule_can_match_eol because it requires
     *       access to the local variable lnd_yy_act. Since lnd_yyless() is a macro, it would break
     *       existing scanners that call lnd_yyless() from OUTSIDE lnd_yylex. 
     *       One obvious solution it to make lnd_yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-lnd_yylineno scanner, because lnd_yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int lnd_yyl;\
                for ( lnd_yyl = n; lnd_yyl < lnd_yyleng; ++lnd_yyl )\
                    if ( lnd_yytext[lnd_yyl] == '\n' )\
                        --lnd_yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define lnd_yyless(n) \
	do \
		{ \
		/* Undo effects of setting up lnd_yytext. */ \
        int lnd_yyless_macro_arg = (n); \
        YY_LESS_LINENO(lnd_yyless_macro_arg);\
		*lnd_yy_cp = lnd_yyg->lnd_yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		lnd_yyg->lnd_yy_c_buf_p = lnd_yy_cp = lnd_yy_bp + lnd_yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up lnd_yytext again */ \
		} \
	while ( 0 )

#define unput(c) lnd_yyunput( c, lnd_yyg->lnd_yytext_ptr , lnd_yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t lnd_yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct lnd_yy_buffer_state
	{
	FILE *lnd_yy_input_file;

	char *lnd_yy_ch_buf;		/* input buffer */
	char *lnd_yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	lnd_yy_size_t lnd_yy_buf_size;

	/* Number of characters read into lnd_yy_ch_buf, not including EOB
	 * characters.
	 */
	int lnd_yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int lnd_yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int lnd_yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int lnd_yy_at_bol;

    int lnd_yy_bs_lineno; /**< The line count. */
    int lnd_yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int lnd_yy_fill_buffer;

	int lnd_yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via lnd_yyrestart()), so that the user can continue scanning by
	 * just pointing lnd_yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( lnd_yyg->lnd_yy_buffer_stack \
                          ? lnd_yyg->lnd_yy_buffer_stack[lnd_yyg->lnd_yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE lnd_yyg->lnd_yy_buffer_stack[lnd_yyg->lnd_yy_buffer_stack_top]

void lnd_yyrestart (FILE *input_file ,lnd_yyscan_t lnd_yyscanner );
void lnd_yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,lnd_yyscan_t lnd_yyscanner );
YY_BUFFER_STATE lnd_yy_create_buffer (FILE *file,int size ,lnd_yyscan_t lnd_yyscanner );
void lnd_yy_delete_buffer (YY_BUFFER_STATE b ,lnd_yyscan_t lnd_yyscanner );
void lnd_yy_flush_buffer (YY_BUFFER_STATE b ,lnd_yyscan_t lnd_yyscanner );
void lnd_yypush_buffer_state (YY_BUFFER_STATE new_buffer ,lnd_yyscan_t lnd_yyscanner );
void lnd_yypop_buffer_state (lnd_yyscan_t lnd_yyscanner );

static void lnd_yyensure_buffer_stack (lnd_yyscan_t lnd_yyscanner );
static void lnd_yy_load_buffer_state (lnd_yyscan_t lnd_yyscanner );
static void lnd_yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,lnd_yyscan_t lnd_yyscanner );

#define YY_FLUSH_BUFFER lnd_yy_flush_buffer(YY_CURRENT_BUFFER ,lnd_yyscanner)

YY_BUFFER_STATE lnd_yy_scan_buffer (char *base,lnd_yy_size_t size ,lnd_yyscan_t lnd_yyscanner );
YY_BUFFER_STATE lnd_yy_scan_string (lnd_yyconst char *lnd_yy_str ,lnd_yyscan_t lnd_yyscanner );
YY_BUFFER_STATE lnd_yy_scan_bytes (lnd_yyconst char *bytes,int len ,lnd_yyscan_t lnd_yyscanner );

void *lnd_yyalloc (lnd_yy_size_t ,lnd_yyscan_t lnd_yyscanner );
void *lnd_yyrealloc (void *,lnd_yy_size_t ,lnd_yyscan_t lnd_yyscanner );
void lnd_yyfree (void * ,lnd_yyscan_t lnd_yyscanner );

#define lnd_yy_new_buffer lnd_yy_create_buffer

#define lnd_yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        lnd_yyensure_buffer_stack (lnd_yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            lnd_yy_create_buffer(lnd_yyin,YY_BUF_SIZE ,lnd_yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->lnd_yy_is_interactive = is_interactive; \
	}

#define lnd_yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        lnd_yyensure_buffer_stack (lnd_yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            lnd_yy_create_buffer(lnd_yyin,YY_BUF_SIZE ,lnd_yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->lnd_yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->lnd_yy_at_bol)

/* Begin user sect3 */

#define lnd_yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int lnd_yy_state_type;

#define lnd_yytext_ptr lnd_yytext_r

static lnd_yy_state_type lnd_yy_get_previous_state (lnd_yyscan_t lnd_yyscanner );
static lnd_yy_state_type lnd_yy_try_NUL_trans (lnd_yy_state_type current_state  ,lnd_yyscan_t lnd_yyscanner);
static int lnd_yy_get_next_buffer (lnd_yyscan_t lnd_yyscanner );
static void lnd_yy_fatal_error (lnd_yyconst char msg[] ,lnd_yyscan_t lnd_yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up lnd_yytext.
 */
#define YY_DO_BEFORE_ACTION \
	lnd_yyg->lnd_yytext_ptr = lnd_yy_bp; \
	lnd_yyleng = (size_t) (lnd_yy_cp - lnd_yy_bp); \
	lnd_yyg->lnd_yy_hold_char = *lnd_yy_cp; \
	*lnd_yy_cp = '\0'; \
	lnd_yyg->lnd_yy_c_buf_p = lnd_yy_cp;

#define YY_NUM_RULES 25
#define YY_END_OF_BUFFER 26
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct lnd_yy_trans_info
	{
	flex_int32_t lnd_yy_verify;
	flex_int32_t lnd_yy_nxt;
	};
static lnd_yyconst flex_int16_t lnd_yy_accept[98] =
    {   0,
        0,    0,    0,    0,   26,   24,    5,    5,    1,   20,
       15,   24,   11,   22,   21,   23,   20,   20,   20,   20,
       20,   20,   20,    4,    2,    3,    5,    0,   20,   19,
       15,    0,   12,   12,   11,    0,   22,   23,   20,   20,
       20,   20,   20,   20,   20,   20,    9,   20,   20,    0,
       12,    0,   12,   10,   20,   16,    8,    7,   20,   17,
       18,   20,   20,   13,   14,   20,   20,   20,   20,   20,
        0,   20,   20,   20,    0,   20,    0,   20,   20,   20,
        0,    6,    0,   20,   20,   20,    0,    6,    0,    8,
        7,    0,    0,   13,    0,    9,    0

    } ;

static lnd_yyconst flex_int32_t lnd_yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    7,    7,    7,    7,    7,    7,
        8,    1,    9,    7,    9,   10,    7,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    1,    7,   12,
       13,   14,    7,    7,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,    7,   25,   26,   27,   28,    7,
        7,   29,   30,   31,   32,    7,    7,   33,   34,   35,
        1,    1,    1,    1,    7,    7,   15,   16,   17,   18,

       19,   20,   21,   22,   23,   24,    7,   25,   26,   27,
       28,    7,    7,   29,   30,   31,   32,    7,    7,   33,
       34,   35,    7,    7,    7,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static lnd_yyconst flex_int32_t lnd_yy_meta[36] =
    {   0,
        1,    1,    2,    2,    1,    1,    3,    3,    1,    3,
        3,    1,    1,    1,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3
    } ;

static lnd_yyconst flex_int16_t lnd_yy_base[101] =
    {   0,
        0,    0,   33,   35,  191,  192,   38,   46,  192,  182,
       35,  178,   35,  175,  192,  174,   44,   45,   49,   48,
       53,   52,   55,  192,  192,  192,   77,  163,  177,  192,
      175,  156,   48,   54,   77,   55,  192,  192,   77,   81,
       82,   61,   83,   85,   86,   89,  174,   90,   91,  161,
       91,  169,  168,  170,   95,  169,   96,  100,  103,  168,
      107,  110,  112,  152,  166,  113,  116,  117,  121,  119,
      146,  120,  122,  127,  141,  144,  148,  125,  126,  132,
      148,    0,  137,  139,  140,  145,  147,    0,  122,  149,
      147,  123,  120,  192,   73,  192,  192,  163,   67,  166

    } ;

static lnd_yyconst flex_int16_t lnd_yy_def[101] =
    {   0,
       97,    1,   98,   98,   97,   97,   97,   97,   97,   99,
       97,   97,   97,   97,   97,   97,   99,   99,   99,   99,
       99,   99,   99,   97,   97,   97,   97,   97,   99,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   97,
       97,   97,   97,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   97,   99,   99,   99,   99,   99,   99,
       97,   99,   99,   99,   97,   99,   97,   99,   99,   99,
       97,  100,   97,   99,   99,   99,   97,  100,   97,   99,
       99,   97,   97,   97,   97,   97,    0,   97,   97,   97

    } ;

static lnd_yyconst flex_int16_t lnd_yy_nxt[228] =
    {   0,
        6,    7,    8,    7,    7,    9,   10,    6,   11,   12,
       13,   14,   15,   16,   10,   10,   10,   10,   17,   18,
       19,   10,   20,   10,   10,   21,   10,   10,   10,   22,
       23,   10,   10,   10,   10,   25,   26,   25,   26,   27,
       27,   27,   27,   31,   34,   35,   28,   27,   27,   27,
       27,   30,   30,   36,   28,   30,   30,   32,   33,   30,
       30,   45,   30,   52,   51,   53,   36,   43,   30,   29,
       39,   41,   36,   40,   42,   44,   46,   49,   27,   27,
       27,   27,   47,   48,   30,   28,   34,   35,   30,   30,
       30,   56,   30,   30,   54,   36,   30,   30,   30,   55,

       96,   51,   30,   30,   60,   61,   62,   30,   56,   36,
       30,   58,   47,   65,   30,   57,   59,   30,   66,   30,
       30,   63,   67,   30,   30,   75,   30,   30,   30,   30,
       68,   69,   30,   30,   30,   74,   70,   76,   72,   30,
       94,   73,   78,   80,   79,   82,   30,   30,   82,   92,
       96,   30,   30,   95,   30,   94,   30,   90,   91,   84,
       85,   93,   86,   24,   24,   24,   88,   89,   88,   87,
       83,   81,   77,   30,   71,   30,   30,   30,   53,   53,
       64,   30,   50,   31,   30,   32,   38,   37,   33,   30,
       97,    5,   97,   97,   97,   97,   97,   97,   97,   97,

       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97
    } ;

static lnd_yyconst flex_int16_t lnd_yy_chk[228] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    4,    4,    7,
        7,    7,    7,   11,   13,   13,    7,    8,    8,    8,
        8,   17,   18,   13,    8,   20,   19,   11,   33,   22,
       21,   22,   23,   36,   34,   36,   33,   21,   42,   99,
       17,   19,   34,   18,   20,   21,   22,   23,   27,   27,
       27,   27,   22,   22,   39,   27,   35,   35,   40,   41,
       43,   42,   44,   45,   39,   35,   46,   48,   49,   40,

       95,   51,   55,   57,   46,   48,   48,   58,   41,   51,
       59,   44,   59,   55,   61,   43,   45,   62,   57,   63,
       66,   49,   58,   67,   68,   69,   70,   72,   69,   73,
       61,   62,   78,   79,   74,   68,   63,   70,   66,   80,
       89,   67,   72,   74,   73,   76,   84,   85,   76,   86,
       93,   76,   86,   92,   91,   89,   90,   84,   85,   78,
       79,   87,   80,   98,   98,   98,  100,   83,  100,   81,
       77,   75,   71,   65,   64,   60,   56,   54,   53,   52,
       50,   47,   32,   31,   29,   28,   16,   14,   12,   10,
        5,   97,   97,   97,   97,   97,   97,   97,   97,   97,

       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97
    } ;

/* Table of booleans, true if rule could match eol. */
static lnd_yyconst flex_int32_t lnd_yy_rule_can_match_eol[26] =
    {   0,
0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define lnd_yymore() lnd_yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
/*
   made reentrant with help of
   http://www.usualcoding.eu/post/2007/09/03/Building-a-reentrant-parser-in-C-with-Flex/Bison
*/
/*
   Note that a minimum version of flex is needed to be able to compile this.
   Older version don't know the reentrant code.
   Version 2.5.4 is not enough. Probably at least v2.5.31 is needed. Tested with v2.5.35
*/
/*
** We want the scanner to be reentrant, therefore generate no global variables.
** That what the 'reentrant' option is for.
** 'bison-bridge' is used to create a bison compatible scanner and share lnd_yylval
*/

#define INITIAL 0
#define LINECOMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct lnd_yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE lnd_yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *lnd_yyin_r, *lnd_yyout_r;
    size_t lnd_yy_buffer_stack_top; /**< index of top of stack. */
    size_t lnd_yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * lnd_yy_buffer_stack; /**< Stack as an array. */
    char lnd_yy_hold_char;
    int lnd_yy_n_chars;
    int lnd_yyleng_r;
    char *lnd_yy_c_buf_p;
    int lnd_yy_init;
    int lnd_yy_start;
    int lnd_yy_did_buffer_switch_on_eof;
    int lnd_yy_start_stack_ptr;
    int lnd_yy_start_stack_depth;
    int *lnd_yy_start_stack;
    lnd_yy_state_type lnd_yy_last_accepting_state;
    char* lnd_yy_last_accepting_cpos;

    int lnd_yylineno_r;
    int lnd_yy_flex_debug_r;

    char *lnd_yytext_r;
    int lnd_yy_more_flag;
    int lnd_yy_more_len;

    YYSTYPE * lnd_yylval_r;

    }; /* end struct lnd_yyguts_t */

static int lnd_yy_init_globals (lnd_yyscan_t lnd_yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define lnd_yylval lnd_yyg->lnd_yylval_r
    
int lnd_yylex_init (lnd_yyscan_t* scanner);

int lnd_yylex_init_extra (YY_EXTRA_TYPE user_defined,lnd_yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int lnd_yylex_destroy (lnd_yyscan_t lnd_yyscanner );

int lnd_yyget_debug (lnd_yyscan_t lnd_yyscanner );

void lnd_yyset_debug (int debug_flag ,lnd_yyscan_t lnd_yyscanner );

YY_EXTRA_TYPE lnd_yyget_extra (lnd_yyscan_t lnd_yyscanner );

void lnd_yyset_extra (YY_EXTRA_TYPE user_defined ,lnd_yyscan_t lnd_yyscanner );

FILE *lnd_yyget_in (lnd_yyscan_t lnd_yyscanner );

void lnd_yyset_in  (FILE * in_str ,lnd_yyscan_t lnd_yyscanner );

FILE *lnd_yyget_out (lnd_yyscan_t lnd_yyscanner );

void lnd_yyset_out  (FILE * out_str ,lnd_yyscan_t lnd_yyscanner );

int lnd_yyget_leng (lnd_yyscan_t lnd_yyscanner );

char *lnd_yyget_text (lnd_yyscan_t lnd_yyscanner );

int lnd_yyget_lineno (lnd_yyscan_t lnd_yyscanner );

void lnd_yyset_lineno (int line_number ,lnd_yyscan_t lnd_yyscanner );

YYSTYPE * lnd_yyget_lval (lnd_yyscan_t lnd_yyscanner );

void lnd_yyset_lval (YYSTYPE * lnd_yylval_param ,lnd_yyscan_t lnd_yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int lnd_yywrap (lnd_yyscan_t lnd_yyscanner );
#else
extern int lnd_yywrap (lnd_yyscan_t lnd_yyscanner );
#endif
#endif

    static void lnd_yyunput (int c,char *buf_ptr  ,lnd_yyscan_t lnd_yyscanner);
    
#ifndef lnd_yytext_ptr
static void lnd_yy_flex_strncpy (char *,lnd_yyconst char *,int ,lnd_yyscan_t lnd_yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int lnd_yy_flex_strlen (lnd_yyconst char * ,lnd_yyscan_t lnd_yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int lnd_yyinput (lnd_yyscan_t lnd_yyscanner );
#else
static int input (lnd_yyscan_t lnd_yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( lnd_yytext, lnd_yyleng, 1, lnd_yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->lnd_yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( lnd_yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( lnd_yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, lnd_yyin))==0 && ferror(lnd_yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(lnd_yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "lnd_yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef lnd_yyterminate
#define lnd_yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) lnd_yy_fatal_error( msg , lnd_yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int lnd_yylex \
               (YYSTYPE * lnd_yylval_param ,lnd_yyscan_t lnd_yyscanner);

#define YY_DECL int lnd_yylex \
               (YYSTYPE * lnd_yylval_param , lnd_yyscan_t lnd_yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after lnd_yytext and lnd_yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register lnd_yy_state_type lnd_yy_current_state;
	register char *lnd_yy_cp, *lnd_yy_bp;
	register int lnd_yy_act;
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;

    lnd_yylval = lnd_yylval_param;

	if ( !lnd_yyg->lnd_yy_init )
		{
		lnd_yyg->lnd_yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! lnd_yyg->lnd_yy_start )
			lnd_yyg->lnd_yy_start = 1;	/* first start state */

		if ( ! lnd_yyin )
			lnd_yyin = stdin;

		if ( ! lnd_yyout )
			lnd_yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			lnd_yyensure_buffer_stack (lnd_yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				lnd_yy_create_buffer(lnd_yyin,YY_BUF_SIZE ,lnd_yyscanner);
		}

		lnd_yy_load_buffer_state(lnd_yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		lnd_yy_cp = lnd_yyg->lnd_yy_c_buf_p;

		/* Support of lnd_yytext. */
		*lnd_yy_cp = lnd_yyg->lnd_yy_hold_char;

		/* lnd_yy_bp points to the position in lnd_yy_ch_buf of the start of
		 * the current run.
		 */
		lnd_yy_bp = lnd_yy_cp;

		lnd_yy_current_state = lnd_yyg->lnd_yy_start;
lnd_yy_match:
		do
			{
			register YY_CHAR lnd_yy_c = lnd_yy_ec[YY_SC_TO_UI(*lnd_yy_cp)];
			if ( lnd_yy_accept[lnd_yy_current_state] )
				{
				lnd_yyg->lnd_yy_last_accepting_state = lnd_yy_current_state;
				lnd_yyg->lnd_yy_last_accepting_cpos = lnd_yy_cp;
				}
			while ( lnd_yy_chk[lnd_yy_base[lnd_yy_current_state] + lnd_yy_c] != lnd_yy_current_state )
				{
				lnd_yy_current_state = (int) lnd_yy_def[lnd_yy_current_state];
				if ( lnd_yy_current_state >= 98 )
					lnd_yy_c = lnd_yy_meta[(unsigned int) lnd_yy_c];
				}
			lnd_yy_current_state = lnd_yy_nxt[lnd_yy_base[lnd_yy_current_state] + (unsigned int) lnd_yy_c];
			++lnd_yy_cp;
			}
		while ( lnd_yy_base[lnd_yy_current_state] != 192 );

lnd_yy_find_action:
		lnd_yy_act = lnd_yy_accept[lnd_yy_current_state];
		if ( lnd_yy_act == 0 )
			{ /* have to back up */
			lnd_yy_cp = lnd_yyg->lnd_yy_last_accepting_cpos;
			lnd_yy_current_state = lnd_yyg->lnd_yy_last_accepting_state;
			lnd_yy_act = lnd_yy_accept[lnd_yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( lnd_yy_act != YY_END_OF_BUFFER && lnd_yy_rule_can_match_eol[lnd_yy_act] )
			{
			int lnd_yyl;
			for ( lnd_yyl = 0; lnd_yyl < lnd_yyleng; ++lnd_yyl )
				if ( lnd_yytext[lnd_yyl] == '\n' )
					   
    do{ lnd_yylineno++;
        lnd_yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( lnd_yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*lnd_yy_cp = lnd_yyg->lnd_yy_hold_char;
			lnd_yy_cp = lnd_yyg->lnd_yy_last_accepting_cpos;
			lnd_yy_current_state = lnd_yyg->lnd_yy_last_accepting_state;
			goto lnd_yy_find_action;

case 1:
YY_RULE_SETUP
{
  BEGIN LINECOMMENT;
} /* begin skip LINECOMMENT */
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
{
  BEGIN INITIAL;
} /* end skip LINECOMMENT */
	YY_BREAK
case 3:
YY_RULE_SETUP
{
  BEGIN INITIAL;
} /* end skip LINECOMMENT */
	YY_BREAK
case 4:
YY_RULE_SETUP
{
}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
{
  parse_parm *pp = PARM;

  pp->lineno = lnd_yylineno;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;

  pp->lineno = lnd_yylineno;
  pv->title = lnd_yytext + 6;
  while(isspace(*pv->title))
    pv->title++;
  return(TITLE);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;

  pp->lineno = lnd_yylineno;
  return(MINIMISE);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;

  pp->lineno = lnd_yylineno;
  return(MAXIMISE);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;

  pp->lineno = lnd_yylineno;
  return(SUBJECTTO);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;

  pp->lineno = lnd_yylineno;
  return(END);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;

  pp->lineno = lnd_yylineno;
  pv->f = atof((char *)lnd_yytext);
  return(INTCONS);
} /* f contains the last float */
	YY_BREAK
case 12:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;

  pp->lineno = lnd_yylineno;
  pv->f = atof((char *)lnd_yytext);
  return(CONS);
} /* f contains the last float */
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;
  char *ptr;

  pp->lineno = lnd_yylineno;

  pv->f = DEF_INFINITE;
  pv->Sign = 0;
  ptr = (char *)lnd_yytext;
  while (isspace(*ptr)) ptr++;
  if(*ptr == '-')
    pv->Sign = 1;
  return(INF);
} /* f contains the last float */
	YY_BREAK
case 14:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;

  pp->lineno = lnd_yylineno;
  FREE(pv->Last_var);
  pv->Last_var = strdup((char *)lnd_yytext);
  return(FRE);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;
  int x;

  pp->lineno = lnd_yylineno;
  pv->Sign = 0;
  for(x = 0; x < lnd_yyleng; x++)
    if(lnd_yytext[x] == '-' || lnd_yytext[x] == '+')
      pv->Sign = (pv->Sign == (lnd_yytext[x] == '+'));
  return (TOK_SIGN);
  /* Sign is TRUE if the sign-string
     represents a '-'. Otherwise Sign
     is FALSE */
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;

  pp->lineno = lnd_yylineno;
  pv->Within_gen_decl = pv->Within_bin_decl = pv->Within_sec_decl = pv->Within_sos_decl = FALSE;
  if(toupper(*lnd_yytext) == 'G')
    pv->Within_gen_decl = TRUE;
  else
    pv->Within_bin_decl = TRUE;
  return(SEC_INT);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;

  pp->lineno = lnd_yylineno;
  pv->Within_gen_decl = pv->Within_bin_decl = pv->Within_sec_decl = pv->Within_sos_decl = FALSE;
  return(SEC_SLB);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;

  pp->lineno = lnd_yylineno;
  pv->Within_gen_decl = pv->Within_bin_decl = pv->Within_sec_decl = pv->Within_sos_decl = FALSE;
  return(SEC_SUB);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;

  pp->lineno = lnd_yylineno;
  FREE(pv->Last_var);
  pv->Last_var = strdup((char *)lnd_yytext);
  pv->Last_var[strlen(pv->Last_var) - 1] = 0;
  return(VARIABLEPARANT);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;

  pp->lineno = lnd_yylineno;
  FREE(pv->Last_var);
  pv->Last_var = strdup((char *)lnd_yytext);
  return(VAR);
}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;

  pp->lineno = lnd_yylineno;
  pv->OP = *lnd_yytext;
  return(RE_OPEQ);
}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;

  pp->lineno = lnd_yylineno;
  pv->OP = *lnd_yytext;
  return(RE_OPLE);
}
	YY_BREAK
case 23:
YY_RULE_SETUP
{
  parse_parm *pp = PARM;
  parse_vars *pv = (parse_vars *) pp->parse_vars;

  pp->lineno = lnd_yylineno;
  pv->OP = *lnd_yytext;
  return(RE_OPGE);
}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
  report(NULL, CRITICAL, "LEX ERROR : %s lineno %d\n", lnd_yytext, lnd_yylineno);
  return(UNDEFINED);
}
	YY_BREAK
case 25:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(LINECOMMENT):
	lnd_yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int lnd_yy_amount_of_matched_text = (int) (lnd_yy_cp - lnd_yyg->lnd_yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*lnd_yy_cp = lnd_yyg->lnd_yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->lnd_yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed lnd_yyin at a new source and called
			 * lnd_yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			lnd_yyg->lnd_yy_n_chars = YY_CURRENT_BUFFER_LVALUE->lnd_yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->lnd_yy_input_file = lnd_yyin;
			YY_CURRENT_BUFFER_LVALUE->lnd_yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for lnd_yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since lnd_yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( lnd_yyg->lnd_yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->lnd_yy_ch_buf[lnd_yyg->lnd_yy_n_chars] )
			{ /* This was really a NUL. */
			lnd_yy_state_type lnd_yy_next_state;

			lnd_yyg->lnd_yy_c_buf_p = lnd_yyg->lnd_yytext_ptr + lnd_yy_amount_of_matched_text;

			lnd_yy_current_state = lnd_yy_get_previous_state( lnd_yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * lnd_yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			lnd_yy_next_state = lnd_yy_try_NUL_trans( lnd_yy_current_state , lnd_yyscanner);

			lnd_yy_bp = lnd_yyg->lnd_yytext_ptr + YY_MORE_ADJ;

			if ( lnd_yy_next_state )
				{
				/* Consume the NUL. */
				lnd_yy_cp = ++lnd_yyg->lnd_yy_c_buf_p;
				lnd_yy_current_state = lnd_yy_next_state;
				goto lnd_yy_match;
				}

			else
				{
				lnd_yy_cp = lnd_yyg->lnd_yy_c_buf_p;
				goto lnd_yy_find_action;
				}
			}

		else switch ( lnd_yy_get_next_buffer( lnd_yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				lnd_yyg->lnd_yy_did_buffer_switch_on_eof = 0;

				if ( lnd_yywrap(lnd_yyscanner ) )
					{
					/* Note: because we've taken care in
					 * lnd_yy_get_next_buffer() to have set up
					 * lnd_yytext, we can now set up
					 * lnd_yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					lnd_yyg->lnd_yy_c_buf_p = lnd_yyg->lnd_yytext_ptr + YY_MORE_ADJ;

					lnd_yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! lnd_yyg->lnd_yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				lnd_yyg->lnd_yy_c_buf_p =
					lnd_yyg->lnd_yytext_ptr + lnd_yy_amount_of_matched_text;

				lnd_yy_current_state = lnd_yy_get_previous_state( lnd_yyscanner );

				lnd_yy_cp = lnd_yyg->lnd_yy_c_buf_p;
				lnd_yy_bp = lnd_yyg->lnd_yytext_ptr + YY_MORE_ADJ;
				goto lnd_yy_match;

			case EOB_ACT_LAST_MATCH:
				lnd_yyg->lnd_yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->lnd_yy_ch_buf[lnd_yyg->lnd_yy_n_chars];

				lnd_yy_current_state = lnd_yy_get_previous_state( lnd_yyscanner );

				lnd_yy_cp = lnd_yyg->lnd_yy_c_buf_p;
				lnd_yy_bp = lnd_yyg->lnd_yytext_ptr + YY_MORE_ADJ;
				goto lnd_yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of lnd_yylex */

/* lnd_yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int lnd_yy_get_next_buffer (lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->lnd_yy_ch_buf;
	register char *source = lnd_yyg->lnd_yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( lnd_yyg->lnd_yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->lnd_yy_ch_buf[lnd_yyg->lnd_yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->lnd_yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( lnd_yyg->lnd_yy_c_buf_p - lnd_yyg->lnd_yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (lnd_yyg->lnd_yy_c_buf_p - lnd_yyg->lnd_yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->lnd_yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->lnd_yy_n_chars = lnd_yyg->lnd_yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->lnd_yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int lnd_yy_c_buf_p_offset =
				(int) (lnd_yyg->lnd_yy_c_buf_p - b->lnd_yy_ch_buf);

			if ( b->lnd_yy_is_our_buffer )
				{
				int new_size = b->lnd_yy_buf_size * 2;

				if ( new_size <= 0 )
					b->lnd_yy_buf_size += b->lnd_yy_buf_size / 8;
				else
					b->lnd_yy_buf_size *= 2;

				b->lnd_yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					lnd_yyrealloc((void *) b->lnd_yy_ch_buf,b->lnd_yy_buf_size + 2 ,lnd_yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->lnd_yy_ch_buf = 0;

			if ( ! b->lnd_yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			lnd_yyg->lnd_yy_c_buf_p = &b->lnd_yy_ch_buf[lnd_yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->lnd_yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->lnd_yy_ch_buf[number_to_move]),
			lnd_yyg->lnd_yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->lnd_yy_n_chars = lnd_yyg->lnd_yy_n_chars;
		}

	if ( lnd_yyg->lnd_yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			lnd_yyrestart(lnd_yyin  ,lnd_yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->lnd_yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((lnd_yy_size_t) (lnd_yyg->lnd_yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->lnd_yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		lnd_yy_size_t new_size = lnd_yyg->lnd_yy_n_chars + number_to_move + (lnd_yyg->lnd_yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->lnd_yy_ch_buf = (char *) lnd_yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->lnd_yy_ch_buf,new_size ,lnd_yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->lnd_yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in lnd_yy_get_next_buffer()" );
	}

	lnd_yyg->lnd_yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->lnd_yy_ch_buf[lnd_yyg->lnd_yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->lnd_yy_ch_buf[lnd_yyg->lnd_yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	lnd_yyg->lnd_yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->lnd_yy_ch_buf[0];

	return ret_val;
}

/* lnd_yy_get_previous_state - get the state just before the EOB char was reached */

    static lnd_yy_state_type lnd_yy_get_previous_state (lnd_yyscan_t lnd_yyscanner)
{
	register lnd_yy_state_type lnd_yy_current_state;
	register char *lnd_yy_cp;
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;

	lnd_yy_current_state = lnd_yyg->lnd_yy_start;

	for ( lnd_yy_cp = lnd_yyg->lnd_yytext_ptr + YY_MORE_ADJ; lnd_yy_cp < lnd_yyg->lnd_yy_c_buf_p; ++lnd_yy_cp )
		{
		register YY_CHAR lnd_yy_c = (*lnd_yy_cp ? lnd_yy_ec[YY_SC_TO_UI(*lnd_yy_cp)] : 1);
		if ( lnd_yy_accept[lnd_yy_current_state] )
			{
			lnd_yyg->lnd_yy_last_accepting_state = lnd_yy_current_state;
			lnd_yyg->lnd_yy_last_accepting_cpos = lnd_yy_cp;
			}
		while ( lnd_yy_chk[lnd_yy_base[lnd_yy_current_state] + lnd_yy_c] != lnd_yy_current_state )
			{
			lnd_yy_current_state = (int) lnd_yy_def[lnd_yy_current_state];
			if ( lnd_yy_current_state >= 98 )
				lnd_yy_c = lnd_yy_meta[(unsigned int) lnd_yy_c];
			}
		lnd_yy_current_state = lnd_yy_nxt[lnd_yy_base[lnd_yy_current_state] + (unsigned int) lnd_yy_c];
		}

	return lnd_yy_current_state;
}

/* lnd_yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = lnd_yy_try_NUL_trans( current_state );
 */
    static lnd_yy_state_type lnd_yy_try_NUL_trans  (lnd_yy_state_type lnd_yy_current_state , lnd_yyscan_t lnd_yyscanner)
{
	register int lnd_yy_is_jam;
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner; /* This var may be unused depending upon options. */
	register char *lnd_yy_cp = lnd_yyg->lnd_yy_c_buf_p;

	register YY_CHAR lnd_yy_c = 1;
	if ( lnd_yy_accept[lnd_yy_current_state] )
		{
		lnd_yyg->lnd_yy_last_accepting_state = lnd_yy_current_state;
		lnd_yyg->lnd_yy_last_accepting_cpos = lnd_yy_cp;
		}
	while ( lnd_yy_chk[lnd_yy_base[lnd_yy_current_state] + lnd_yy_c] != lnd_yy_current_state )
		{
		lnd_yy_current_state = (int) lnd_yy_def[lnd_yy_current_state];
		if ( lnd_yy_current_state >= 98 )
			lnd_yy_c = lnd_yy_meta[(unsigned int) lnd_yy_c];
		}
	lnd_yy_current_state = lnd_yy_nxt[lnd_yy_base[lnd_yy_current_state] + (unsigned int) lnd_yy_c];
	lnd_yy_is_jam = (lnd_yy_current_state == 97);

	return lnd_yy_is_jam ? 0 : lnd_yy_current_state;
}

    static void lnd_yyunput (int c, register char * lnd_yy_bp , lnd_yyscan_t lnd_yyscanner)
{
	register char *lnd_yy_cp;
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;

    lnd_yy_cp = lnd_yyg->lnd_yy_c_buf_p;

	/* undo effects of setting up lnd_yytext */
	*lnd_yy_cp = lnd_yyg->lnd_yy_hold_char;

	if ( lnd_yy_cp < YY_CURRENT_BUFFER_LVALUE->lnd_yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = lnd_yyg->lnd_yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->lnd_yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->lnd_yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->lnd_yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->lnd_yy_ch_buf )
			*--dest = *--source;

		lnd_yy_cp += (int) (dest - source);
		lnd_yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->lnd_yy_n_chars =
			lnd_yyg->lnd_yy_n_chars = YY_CURRENT_BUFFER_LVALUE->lnd_yy_buf_size;

		if ( lnd_yy_cp < YY_CURRENT_BUFFER_LVALUE->lnd_yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--lnd_yy_cp = (char) c;

    if ( c == '\n' ){
        --lnd_yylineno;
    }

	lnd_yyg->lnd_yytext_ptr = lnd_yy_bp;
	lnd_yyg->lnd_yy_hold_char = *lnd_yy_cp;
	lnd_yyg->lnd_yy_c_buf_p = lnd_yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int lnd_yyinput (lnd_yyscan_t lnd_yyscanner)
#else
    static int input  (lnd_yyscan_t lnd_yyscanner)
#endif

{
	int c;
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;

	*lnd_yyg->lnd_yy_c_buf_p = lnd_yyg->lnd_yy_hold_char;

	if ( *lnd_yyg->lnd_yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* lnd_yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( lnd_yyg->lnd_yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->lnd_yy_ch_buf[lnd_yyg->lnd_yy_n_chars] )
			/* This was really a NUL. */
			*lnd_yyg->lnd_yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = lnd_yyg->lnd_yy_c_buf_p - lnd_yyg->lnd_yytext_ptr;
			++lnd_yyg->lnd_yy_c_buf_p;

			switch ( lnd_yy_get_next_buffer( lnd_yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because lnd_yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					lnd_yyrestart(lnd_yyin ,lnd_yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( lnd_yywrap(lnd_yyscanner ) )
						return EOF;

					if ( ! lnd_yyg->lnd_yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return lnd_yyinput(lnd_yyscanner);
#else
					return input(lnd_yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					lnd_yyg->lnd_yy_c_buf_p = lnd_yyg->lnd_yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) lnd_yyg->lnd_yy_c_buf_p;	/* cast for 8-bit char's */
	*lnd_yyg->lnd_yy_c_buf_p = '\0';	/* preserve lnd_yytext */
	lnd_yyg->lnd_yy_hold_char = *++lnd_yyg->lnd_yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ lnd_yylineno++;
        lnd_yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param lnd_yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void lnd_yyrestart  (FILE * input_file , lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        lnd_yyensure_buffer_stack (lnd_yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            lnd_yy_create_buffer(lnd_yyin,YY_BUF_SIZE ,lnd_yyscanner);
	}

	lnd_yy_init_buffer(YY_CURRENT_BUFFER,input_file ,lnd_yyscanner);
	lnd_yy_load_buffer_state(lnd_yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param lnd_yyscanner The scanner object.
 */
    void lnd_yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		lnd_yypop_buffer_state();
	 *		lnd_yypush_buffer_state(new_buffer);
     */
	lnd_yyensure_buffer_stack (lnd_yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*lnd_yyg->lnd_yy_c_buf_p = lnd_yyg->lnd_yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->lnd_yy_buf_pos = lnd_yyg->lnd_yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->lnd_yy_n_chars = lnd_yyg->lnd_yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	lnd_yy_load_buffer_state(lnd_yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (lnd_yywrap()) processing, but the only time this flag
	 * is looked at is after lnd_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	lnd_yyg->lnd_yy_did_buffer_switch_on_eof = 1;
}

static void lnd_yy_load_buffer_state  (lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;
	lnd_yyg->lnd_yy_n_chars = YY_CURRENT_BUFFER_LVALUE->lnd_yy_n_chars;
	lnd_yyg->lnd_yytext_ptr = lnd_yyg->lnd_yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->lnd_yy_buf_pos;
	lnd_yyin = YY_CURRENT_BUFFER_LVALUE->lnd_yy_input_file;
	lnd_yyg->lnd_yy_hold_char = *lnd_yyg->lnd_yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param lnd_yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE lnd_yy_create_buffer  (FILE * file, int  size , lnd_yyscan_t lnd_yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) lnd_yyalloc(sizeof( struct lnd_yy_buffer_state ) ,lnd_yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in lnd_yy_create_buffer()" );

	b->lnd_yy_buf_size = size;

	/* lnd_yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->lnd_yy_ch_buf = (char *) lnd_yyalloc(b->lnd_yy_buf_size + 2 ,lnd_yyscanner );
	if ( ! b->lnd_yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in lnd_yy_create_buffer()" );

	b->lnd_yy_is_our_buffer = 1;

	lnd_yy_init_buffer(b,file ,lnd_yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with lnd_yy_create_buffer()
 * @param lnd_yyscanner The scanner object.
 */
    void lnd_yy_delete_buffer (YY_BUFFER_STATE  b , lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->lnd_yy_is_our_buffer )
		lnd_yyfree((void *) b->lnd_yy_ch_buf ,lnd_yyscanner );

	lnd_yyfree((void *) b ,lnd_yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a lnd_yyrestart() or at EOF.
 */
    static void lnd_yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , lnd_yyscan_t lnd_yyscanner)

{
	int oerrno = errno;
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;

	lnd_yy_flush_buffer(b ,lnd_yyscanner);

	b->lnd_yy_input_file = file;
	b->lnd_yy_fill_buffer = 1;

    /* If b is the current buffer, then lnd_yy_init_buffer was _probably_
     * called from lnd_yyrestart() or through lnd_yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->lnd_yy_bs_lineno = 1;
        b->lnd_yy_bs_column = 0;
    }

        b->lnd_yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param lnd_yyscanner The scanner object.
 */
    void lnd_yy_flush_buffer (YY_BUFFER_STATE  b , lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;
	if ( ! b )
		return;

	b->lnd_yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->lnd_yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->lnd_yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->lnd_yy_buf_pos = &b->lnd_yy_ch_buf[0];

	b->lnd_yy_at_bol = 1;
	b->lnd_yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		lnd_yy_load_buffer_state(lnd_yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param lnd_yyscanner The scanner object.
 */
void lnd_yypush_buffer_state (YY_BUFFER_STATE new_buffer , lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;
	if (new_buffer == NULL)
		return;

	lnd_yyensure_buffer_stack(lnd_yyscanner);

	/* This block is copied from lnd_yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*lnd_yyg->lnd_yy_c_buf_p = lnd_yyg->lnd_yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->lnd_yy_buf_pos = lnd_yyg->lnd_yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->lnd_yy_n_chars = lnd_yyg->lnd_yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		lnd_yyg->lnd_yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from lnd_yy_switch_to_buffer. */
	lnd_yy_load_buffer_state(lnd_yyscanner );
	lnd_yyg->lnd_yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param lnd_yyscanner The scanner object.
 */
void lnd_yypop_buffer_state (lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	lnd_yy_delete_buffer(YY_CURRENT_BUFFER ,lnd_yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (lnd_yyg->lnd_yy_buffer_stack_top > 0)
		--lnd_yyg->lnd_yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		lnd_yy_load_buffer_state(lnd_yyscanner );
		lnd_yyg->lnd_yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void lnd_yyensure_buffer_stack (lnd_yyscan_t lnd_yyscanner)
{
	int num_to_alloc;
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;

	if (!lnd_yyg->lnd_yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		lnd_yyg->lnd_yy_buffer_stack = (struct lnd_yy_buffer_state**)lnd_yyalloc
								(num_to_alloc * sizeof(struct lnd_yy_buffer_state*)
								, lnd_yyscanner);
		if ( ! lnd_yyg->lnd_yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in lnd_yyensure_buffer_stack()" );
								  
		memset(lnd_yyg->lnd_yy_buffer_stack, 0, num_to_alloc * sizeof(struct lnd_yy_buffer_state*));
				
		lnd_yyg->lnd_yy_buffer_stack_max = num_to_alloc;
		lnd_yyg->lnd_yy_buffer_stack_top = 0;
		return;
	}

	if (lnd_yyg->lnd_yy_buffer_stack_top >= (lnd_yyg->lnd_yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = lnd_yyg->lnd_yy_buffer_stack_max + grow_size;
		lnd_yyg->lnd_yy_buffer_stack = (struct lnd_yy_buffer_state**)lnd_yyrealloc
								(lnd_yyg->lnd_yy_buffer_stack,
								num_to_alloc * sizeof(struct lnd_yy_buffer_state*)
								, lnd_yyscanner);
		if ( ! lnd_yyg->lnd_yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in lnd_yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(lnd_yyg->lnd_yy_buffer_stack + lnd_yyg->lnd_yy_buffer_stack_max, 0, grow_size * sizeof(struct lnd_yy_buffer_state*));
		lnd_yyg->lnd_yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param lnd_yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE lnd_yy_scan_buffer  (char * base, lnd_yy_size_t  size , lnd_yyscan_t lnd_yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) lnd_yyalloc(sizeof( struct lnd_yy_buffer_state ) ,lnd_yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in lnd_yy_scan_buffer()" );

	b->lnd_yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->lnd_yy_buf_pos = b->lnd_yy_ch_buf = base;
	b->lnd_yy_is_our_buffer = 0;
	b->lnd_yy_input_file = 0;
	b->lnd_yy_n_chars = b->lnd_yy_buf_size;
	b->lnd_yy_is_interactive = 0;
	b->lnd_yy_at_bol = 1;
	b->lnd_yy_fill_buffer = 0;
	b->lnd_yy_buffer_status = YY_BUFFER_NEW;

	lnd_yy_switch_to_buffer(b ,lnd_yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to lnd_yylex() will
 * scan from a @e copy of @a str.
 * @param lnd_yystr a NUL-terminated string to scan
 * @param lnd_yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       lnd_yy_scan_bytes() instead.
 */
YY_BUFFER_STATE lnd_yy_scan_string (lnd_yyconst char * lnd_yystr , lnd_yyscan_t lnd_yyscanner)
{
    
	return lnd_yy_scan_bytes(lnd_yystr,strlen(lnd_yystr) ,lnd_yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to lnd_yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param lnd_yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE lnd_yy_scan_bytes  (lnd_yyconst char * lnd_yybytes, int  _lnd_yybytes_len , lnd_yyscan_t lnd_yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	lnd_yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _lnd_yybytes_len + 2;
	buf = (char *) lnd_yyalloc(n ,lnd_yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in lnd_yy_scan_bytes()" );

	for ( i = 0; i < _lnd_yybytes_len; ++i )
		buf[i] = lnd_yybytes[i];

	buf[_lnd_yybytes_len] = buf[_lnd_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = lnd_yy_scan_buffer(buf,n ,lnd_yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in lnd_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->lnd_yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void lnd_yy_fatal_error (lnd_yyconst char* msg , lnd_yyscan_t lnd_yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine lnd_yyless() so it works in section 3 code. */

#undef lnd_yyless
#define lnd_yyless(n) \
	do \
		{ \
		/* Undo effects of setting up lnd_yytext. */ \
        int lnd_yyless_macro_arg = (n); \
        YY_LESS_LINENO(lnd_yyless_macro_arg);\
		lnd_yytext[lnd_yyleng] = lnd_yyg->lnd_yy_hold_char; \
		lnd_yyg->lnd_yy_c_buf_p = lnd_yytext + lnd_yyless_macro_arg; \
		lnd_yyg->lnd_yy_hold_char = *lnd_yyg->lnd_yy_c_buf_p; \
		*lnd_yyg->lnd_yy_c_buf_p = '\0'; \
		lnd_yyleng = lnd_yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param lnd_yyscanner The scanner object.
 */
YY_EXTRA_TYPE lnd_yyget_extra  (lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;
    return lnd_yyextra;
}

/** Get the current line number.
 * @param lnd_yyscanner The scanner object.
 */
int lnd_yyget_lineno  (lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return lnd_yylineno;
}

/** Get the current column number.
 * @param lnd_yyscanner The scanner object.
 */
int lnd_yyget_column  (lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return lnd_yycolumn;
}

/** Get the input stream.
 * @param lnd_yyscanner The scanner object.
 */
FILE *lnd_yyget_in  (lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;
    return lnd_yyin;
}

/** Get the output stream.
 * @param lnd_yyscanner The scanner object.
 */
FILE *lnd_yyget_out  (lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;
    return lnd_yyout;
}

/** Get the length of the current token.
 * @param lnd_yyscanner The scanner object.
 */
int lnd_yyget_leng  (lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;
    return lnd_yyleng;
}

/** Get the current token.
 * @param lnd_yyscanner The scanner object.
 */

char *lnd_yyget_text  (lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;
    return lnd_yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param lnd_yyscanner The scanner object.
 */
void lnd_yyset_extra (YY_EXTRA_TYPE  user_defined , lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;
    lnd_yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param lnd_yyscanner The scanner object.
 */
void lnd_yyset_lineno (int  line_number , lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           lnd_yy_fatal_error( "lnd_yyset_lineno called with no buffer" , lnd_yyscanner); 
    
    lnd_yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param lnd_yyscanner The scanner object.
 */
void lnd_yyset_column (int  column_no , lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           lnd_yy_fatal_error( "lnd_yyset_column called with no buffer" , lnd_yyscanner); 
    
    lnd_yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param lnd_yyscanner The scanner object.
 * @see lnd_yy_switch_to_buffer
 */
void lnd_yyset_in (FILE *  in_str , lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;
    lnd_yyin = in_str ;
}

void lnd_yyset_out (FILE *  out_str , lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;
    lnd_yyout = out_str ;
}

int lnd_yyget_debug  (lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;
    return lnd_yy_flex_debug;
}

void lnd_yyset_debug (int  bdebug , lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;
    lnd_yy_flex_debug = bdebug ;
}

/* Accessor methods for lnd_yylval and lnd_yylloc */

YYSTYPE * lnd_yyget_lval  (lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;
    return lnd_yylval;
}

void lnd_yyset_lval (YYSTYPE *  lnd_yylval_param , lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;
    lnd_yylval = lnd_yylval_param;
}

/* User-visible API */

/* lnd_yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int lnd_yylex_init(lnd_yyscan_t* ptr_lnd_yy_globals)

{
    if (ptr_lnd_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_lnd_yy_globals = (lnd_yyscan_t) lnd_yyalloc ( sizeof( struct lnd_yyguts_t ), NULL );

    if (*ptr_lnd_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in lnd_yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_lnd_yy_globals,0x00,sizeof(struct lnd_yyguts_t));

    return lnd_yy_init_globals ( *ptr_lnd_yy_globals );
}

/* lnd_yylex_init_extra has the same functionality as lnd_yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to lnd_yyalloc in
 * the lnd_yyextra field.
 */

int lnd_yylex_init_extra(YY_EXTRA_TYPE lnd_yy_user_defined,lnd_yyscan_t* ptr_lnd_yy_globals )

{
    struct lnd_yyguts_t dummy_lnd_yyguts;

    lnd_yyset_extra (lnd_yy_user_defined, &dummy_lnd_yyguts);

    if (ptr_lnd_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_lnd_yy_globals = (lnd_yyscan_t) lnd_yyalloc ( sizeof( struct lnd_yyguts_t ), &dummy_lnd_yyguts );
	
    if (*ptr_lnd_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    lnd_yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_lnd_yy_globals,0x00,sizeof(struct lnd_yyguts_t));
    
    lnd_yyset_extra (lnd_yy_user_defined, *ptr_lnd_yy_globals);
    
    return lnd_yy_init_globals ( *ptr_lnd_yy_globals );
}

static int lnd_yy_init_globals (lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from lnd_yylex_destroy(), so don't allocate here.
     */

    lnd_yyg->lnd_yy_buffer_stack = 0;
    lnd_yyg->lnd_yy_buffer_stack_top = 0;
    lnd_yyg->lnd_yy_buffer_stack_max = 0;
    lnd_yyg->lnd_yy_c_buf_p = (char *) 0;
    lnd_yyg->lnd_yy_init = 0;
    lnd_yyg->lnd_yy_start = 0;

    lnd_yyg->lnd_yy_start_stack_ptr = 0;
    lnd_yyg->lnd_yy_start_stack_depth = 0;
    lnd_yyg->lnd_yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    lnd_yyin = stdin;
    lnd_yyout = stdout;
#else
    lnd_yyin = (FILE *) 0;
    lnd_yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * lnd_yylex_init()
     */
    return 0;
}

/* lnd_yylex_destroy is for both reentrant and non-reentrant scanners. */
int lnd_yylex_destroy  (lnd_yyscan_t lnd_yyscanner)
{
    struct lnd_yyguts_t * lnd_yyg = (struct lnd_yyguts_t*)lnd_yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		lnd_yy_delete_buffer(YY_CURRENT_BUFFER ,lnd_yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		lnd_yypop_buffer_state(lnd_yyscanner);
	}

	/* Destroy the stack itself. */
	lnd_yyfree(lnd_yyg->lnd_yy_buffer_stack ,lnd_yyscanner);
	lnd_yyg->lnd_yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        lnd_yyfree(lnd_yyg->lnd_yy_start_stack ,lnd_yyscanner );
        lnd_yyg->lnd_yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * lnd_yylex() is called, initialization will occur. */
    lnd_yy_init_globals( lnd_yyscanner);

    /* Destroy the main struct (reentrant only). */
    lnd_yyfree ( lnd_yyscanner , lnd_yyscanner );
    lnd_yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef lnd_yytext_ptr
static void lnd_yy_flex_strncpy (char* s1, lnd_yyconst char * s2, int n , lnd_yyscan_t lnd_yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int lnd_yy_flex_strlen (lnd_yyconst char * s , lnd_yyscan_t lnd_yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *lnd_yyalloc (lnd_yy_size_t  size , lnd_yyscan_t lnd_yyscanner)
{
	return (void *) malloc( size );
}

void *lnd_yyrealloc  (void * ptr, lnd_yy_size_t  size , lnd_yyscan_t lnd_yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void lnd_yyfree (void * ptr , lnd_yyscan_t lnd_yyscanner)
{
	free( (char *) ptr );	/* see lnd_yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "lnd_yytables"

