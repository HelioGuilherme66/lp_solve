; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

include listing.inc

INCLUDELIB OLDNAMES

crc_table DD	00H
	DD	077073096H
	DD	0ee0e612cH
	DD	0990951baH
	DD	076dc419H
	DD	0706af48fH
	DD	0e963a535H
	DD	09e6495a3H
	DD	0edb8832H
	DD	079dcb8a4H
	DD	0e0d5e91eH
	DD	097d2d988H
	DD	09b64c2bH
	DD	07eb17cbdH
	DD	0e7b82d07H
	DD	090bf1d91H
	DD	01db71064H
	DD	06ab020f2H
	DD	0f3b97148H
	DD	084be41deH
	DD	01adad47dH
	DD	06ddde4ebH
	DD	0f4d4b551H
	DD	083d385c7H
	DD	0136c9856H
	DD	0646ba8c0H
	DD	0fd62f97aH
	DD	08a65c9ecH
	DD	014015c4fH
	DD	063066cd9H
	DD	0fa0f3d63H
	DD	08d080df5H
	DD	03b6e20c8H
	DD	04c69105eH
	DD	0d56041e4H
	DD	0a2677172H
	DD	03c03e4d1H
	DD	04b04d447H
	DD	0d20d85fdH
	DD	0a50ab56bH
	DD	035b5a8faH
	DD	042b2986cH
	DD	0dbbbc9d6H
	DD	0acbcf940H
	DD	032d86ce3H
	DD	045df5c75H
	DD	0dcd60dcfH
	DD	0abd13d59H
	DD	026d930acH
	DD	051de003aH
	DD	0c8d75180H
	DD	0bfd06116H
	DD	021b4f4b5H
	DD	056b3c423H
	DD	0cfba9599H
	DD	0b8bda50fH
	DD	02802b89eH
	DD	05f058808H
	DD	0c60cd9b2H
	DD	0b10be924H
	DD	02f6f7c87H
	DD	058684c11H
	DD	0c1611dabH
	DD	0b6662d3dH
	DD	076dc4190H
	DD	01db7106H
	DD	098d220bcH
	DD	0efd5102aH
	DD	071b18589H
	DD	06b6b51fH
	DD	09fbfe4a5H
	DD	0e8b8d433H
	DD	07807c9a2H
	DD	0f00f934H
	DD	09609a88eH
	DD	0e10e9818H
	DD	07f6a0dbbH
	DD	086d3d2dH
	DD	091646c97H
	DD	0e6635c01H
	DD	06b6b51f4H
	DD	01c6c6162H
	DD	0856530d8H
	DD	0f262004eH
	DD	06c0695edH
	DD	01b01a57bH
	DD	08208f4c1H
	DD	0f50fc457H
	DD	065b0d9c6H
	DD	012b7e950H
	DD	08bbeb8eaH
	DD	0fcb9887cH
	DD	062dd1ddfH
	DD	015da2d49H
	DD	08cd37cf3H
	DD	0fbd44c65H
	DD	04db26158H
	DD	03ab551ceH
	DD	0a3bc0074H
	DD	0d4bb30e2H
	DD	04adfa541H
	DD	03dd895d7H
	DD	0a4d1c46dH
	DD	0d3d6f4fbH
	DD	04369e96aH
	DD	0346ed9fcH
	DD	0ad678846H
	DD	0da60b8d0H
	DD	044042d73H
	DD	033031de5H
	DD	0aa0a4c5fH
	DD	0dd0d7cc9H
	DD	05005713cH
	DD	0270241aaH
	DD	0be0b1010H
	DD	0c90c2086H
	DD	05768b525H
	DD	0206f85b3H
	DD	0b966d409H
	DD	0ce61e49fH
	DD	05edef90eH
	DD	029d9c998H
	DD	0b0d09822H
	DD	0c7d7a8b4H
	DD	059b33d17H
	DD	02eb40d81H
	DD	0b7bd5c3bH
	DD	0c0ba6cadH
	DD	0edb88320H
	DD	09abfb3b6H
	DD	03b6e20cH
	DD	074b1d29aH
	DD	0ead54739H
	DD	09dd277afH
	DD	04db2615H
	DD	073dc1683H
	DD	0e3630b12H
	DD	094643b84H
	DD	0d6d6a3eH
	DD	07a6a5aa8H
	DD	0e40ecf0bH
	DD	09309ff9dH
	DD	0a00ae27H
	DD	07d079eb1H
	DD	0f00f9344H
	DD	08708a3d2H
	DD	01e01f268H
	DD	06906c2feH
	DD	0f762575dH
	DD	0806567cbH
	DD	0196c3671H
	DD	06e6b06e7H
	DD	0fed41b76H
	DD	089d32be0H
	DD	010da7a5aH
	DD	067dd4accH
	DD	0f9b9df6fH
	DD	08ebeeff9H
	DD	017b7be43H
	DD	060b08ed5H
	DD	0d6d6a3e8H
	DD	0a1d1937eH
	DD	038d8c2c4H
	DD	04fdff252H
	DD	0d1bb67f1H
	DD	0a6bc5767H
	DD	03fb506ddH
	DD	048b2364bH
	DD	0d80d2bdaH
	DD	0af0a1b4cH
	DD	036034af6H
	DD	041047a60H
	DD	0df60efc3H
	DD	0a867df55H
	DD	0316e8eefH
	DD	04669be79H
	DD	0cb61b38cH
	DD	0bc66831aH
	DD	0256fd2a0H
	DD	05268e236H
	DD	0cc0c7795H
	DD	0bb0b4703H
	DD	0220216b9H
	DD	05505262fH
	DD	0c5ba3bbeH
	DD	0b2bd0b28H
	DD	02bb45a92H
	DD	05cb36a04H
	DD	0c2d7ffa7H
	DD	0b5d0cf31H
	DD	02cd99e8bH
	DD	05bdeae1dH
	DD	09b64c2b0H
	DD	0ec63f226H
	DD	0756aa39cH
	DD	026d930aH
	DD	09c0906a9H
	DD	0eb0e363fH
	DD	072076785H
	DD	05005713H
	DD	095bf4a82H
	DD	0e2b87a14H
	DD	07bb12baeH
	DD	0cb61b38H
	DD	092d28e9bH
	DD	0e5d5be0dH
	DD	07cdcefb7H
	DD	0bdbdf21H
	DD	086d3d2d4H
	DD	0f1d4e242H
	DD	068ddb3f8H
	DD	01fda836eH
	DD	081be16cdH
	DD	0f6b9265bH
	DD	06fb077e1H
	DD	018b74777H
	DD	088085ae6H
	DD	0ff0f6a70H
	DD	066063bcaH
	DD	011010b5cH
	DD	08f659effH
	DD	0f862ae69H
	DD	0616bffd3H
	DD	0166ccf45H
	DD	0a00ae278H
	DD	0d70dd2eeH
	DD	04e048354H
	DD	03903b3c2H
	DD	0a7672661H
	DD	0d06016f7H
	DD	04969474dH
	DD	03e6e77dbH
	DD	0aed16a4aH
	DD	0d9d65adcH
	DD	040df0b66H
	DD	037d83bf0H
	DD	0a9bcae53H
	DD	0debb9ec5H
	DD	047b2cf7fH
	DD	030b5ffe9H
	DD	0bdbdf21cH
	DD	0cabac28aH
	DD	053b39330H
	DD	024b4a3a6H
	DD	0bad03605H
	DD	0cdd70693H
	DD	054de5729H
	DD	023d967bfH
	DD	0b3667a2eH
	DD	0c4614ab8H
	DD	05d681b02H
	DD	02a6f2b94H
	DD	0b40bbe37H
	DD	0c30c8ea1H
	DD	05a05df1bH
	DD	02d02ef8dH
	DD	00H
	DD	0191b3141H
	DD	032366282H
	DD	02b2d53c3H
	DD	0646cc504H
	DD	07d77f445H
	DD	0565aa786H
	DD	04f4196c7H
	DD	0c8d98a08H
	DD	0d1c2bb49H
	DD	0faefe88aH
	DD	0e3f4d9cbH
	DD	0acb54f0cH
	DD	0b5ae7e4dH
	DD	09e832d8eH
	DD	087981ccfH
	DD	04ac21251H
	DD	053d92310H
	DD	078f470d3H
	DD	061ef4192H
	DD	02eaed755H
	DD	037b5e614H
	DD	01c98b5d7H
	DD	05838496H
	DD	0821b9859H
	DD	09b00a918H
	DD	0b02dfadbH
	DD	0a936cb9aH
	DD	0e6775d5dH
	DD	0ff6c6c1cH
	DD	0d4413fdfH
	DD	0cd5a0e9eH
	DD	0958424a2H
	DD	08c9f15e3H
	DD	0a7b24620H
	DD	0bea97761H
	DD	0f1e8e1a6H
	DD	0e8f3d0e7H
	DD	0c3de8324H
	DD	0dac5b265H
	DD	05d5daeaaH
	DD	044469febH
	DD	06f6bcc28H
	DD	07670fd69H
	DD	039316baeH
	DD	0202a5aefH
	DD	0b07092cH
	DD	0121c386dH
	DD	0df4636f3H
	DD	0c65d07b2H
	DD	0ed705471H
	DD	0f46b6530H
	DD	0bb2af3f7H
	DD	0a231c2b6H
	DD	0891c9175H
	DD	09007a034H
	DD	0179fbcfbH
	DD	0e848dbaH
	DD	025a9de79H
	DD	03cb2ef38H
	DD	073f379ffH
	DD	06ae848beH
	DD	041c51b7dH
	DD	058de2a3cH
	DD	0f0794f05H
	DD	0e9627e44H
	DD	0c24f2d87H
	DD	0db541cc6H
	DD	094158a01H
	DD	08d0ebb40H
	DD	0a623e883H
	DD	0bf38d9c2H
	DD	038a0c50dH
	DD	021bbf44cH
	DD	0a96a78fH
	DD	0138d96ceH
	DD	05ccc0009H
	DD	045d73148H
	DD	06efa628bH
	DD	077e153caH
	DD	0babb5d54H
	DD	0a3a06c15H
	DD	0888d3fd6H
	DD	091960e97H
	DD	0ded79850H
	DD	0c7cca911H
	DD	0ece1fad2H
	DD	0f5facb93H
	DD	07262d75cH
	DD	06b79e61dH
	DD	04054b5deH
	DD	0594f849fH
	DD	0160e1258H
	DD	0f152319H
	DD	0243870daH
	DD	03d23419bH
	DD	065fd6ba7H
	DD	07ce65ae6H
	DD	057cb0925H
	DD	04ed03864H
	DD	0191aea3H
	DD	0188a9fe2H
	DD	033a7cc21H
	DD	02abcfd60H
	DD	0ad24e1afH
	DD	0b43fd0eeH
	DD	09f12832dH
	DD	08609b26cH
	DD	0c94824abH
	DD	0d05315eaH
	DD	0fb7e4629H
	DD	0e2657768H
	DD	02f3f79f6H
	DD	0362448b7H
	DD	01d091b74H
	DD	04122a35H
	DD	04b53bcf2H
	DD	052488db3H
	DD	07965de70H
	DD	0607eef31H
	DD	0e7e6f3feH
	DD	0fefdc2bfH
	DD	0d5d0917cH
	DD	0cccba03dH
	DD	0838a36faH
	DD	09a9107bbH
	DD	0b1bc5478H
	DD	0a8a76539H
	DD	03b83984bH
	DD	02298a90aH
	DD	09b5fac9H
	DD	010aecb88H
	DD	05fef5d4fH
	DD	046f46c0eH
	DD	06dd93fcdH
	DD	074c20e8cH
	DD	0f35a1243H
	DD	0ea412302H
	DD	0c16c70c1H
	DD	0d8774180H
	DD	09736d747H
	DD	08e2de606H
	DD	0a500b5c5H
	DD	0bc1b8484H
	DD	071418a1aH
	DD	0685abb5bH
	DD	04377e898H
	DD	05a6cd9d9H
	DD	0152d4f1eH
	DD	0c367e5fH
	DD	0271b2d9cH
	DD	03e001cddH
	DD	0b9980012H
	DD	0a0833153H
	DD	08bae6290H
	DD	092b553d1H
	DD	0ddf4c516H
	DD	0c4eff457H
	DD	0efc2a794H
	DD	0f6d996d5H
	DD	0ae07bce9H
	DD	0b71c8da8H
	DD	09c31de6bH
	DD	0852aef2aH
	DD	0ca6b79edH
	DD	0d37048acH
	DD	0f85d1b6fH
	DD	0e1462a2eH
	DD	066de36e1H
	DD	07fc507a0H
	DD	054e85463H
	DD	04df36522H
	DD	02b2f3e5H
	DD	01ba9c2a4H
	DD	030849167H
	DD	0299fa026H
	DD	0e4c5aeb8H
	DD	0fdde9ff9H
	DD	0d6f3cc3aH
	DD	0cfe8fd7bH
	DD	080a96bbcH
	DD	099b25afdH
	DD	0b29f093eH
	DD	0ab84387fH
	DD	02c1c24b0H
	DD	0350715f1H
	DD	01e2a4632H
	DD	07317773H
	DD	04870e1b4H
	DD	0516bd0f5H
	DD	07a468336H
	DD	0635db277H
	DD	0cbfad74eH
	DD	0d2e1e60fH
	DD	0f9ccb5ccH
	DD	0e0d7848dH
	DD	0af96124aH
	DD	0b68d230bH
	DD	09da070c8H
	DD	084bb4189H
	DD	03235d46H
	DD	01a386c07H
	DD	031153fc4H
	DD	0280e0e85H
	DD	0674f9842H
	DD	07e54a903H
	DD	05579fac0H
	DD	04c62cb81H
	DD	08138c51fH
	DD	09823f45eH
	DD	0b30ea79dH
	DD	0aa1596dcH
	DD	0e554001bH
	DD	0fc4f315aH
	DD	0d7626299H
	DD	0ce7953d8H
	DD	049e14f17H
	DD	050fa7e56H
	DD	07bd72d95H
	DD	062cc1cd4H
	DD	02d8d8a13H
	DD	03496bb52H
	DD	01fbbe891H
	DD	06a0d9d0H
	DD	05e7ef3ecH
	DD	04765c2adH
	DD	06c48916eH
	DD	07553a02fH
	DD	03a1236e8H
	DD	0230907a9H
	DD	0824546aH
	DD	0113f652bH
	DD	096a779e4H
	DD	08fbc48a5H
	DD	0a4911b66H
	DD	0bd8a2a27H
	DD	0f2cbbce0H
	DD	0ebd08da1H
	DD	0c0fdde62H
	DD	0d9e6ef23H
	DD	014bce1bdH
	DD	0da7d0fcH
	DD	0268a833fH
	DD	03f91b27eH
	DD	070d024b9H
	DD	069cb15f8H
	DD	042e6463bH
	DD	05bfd777aH
	DD	0dc656bb5H
	DD	0c57e5af4H
	DD	0ee530937H
	DD	0f7483876H
	DD	0b809aeb1H
	DD	0a1129ff0H
	DD	08a3fcc33H
	DD	09324fd72H
	DD	00H
	DD	01c26a37H
	DD	0384d46eH
	DD	0246be59H
	DD	0709a8dcH
	DD	06cbc2ebH
	DD	048d7cb2H
	DD	054f1685H
	DD	0e1351b8H
	DD	0fd13b8fH
	DD	0d9785d6H
	DD	0c55efe1H
	DD	091af964H
	DD	08d89353H
	DD	0a9e2d0aH
	DD	0b5c473dH
	DD	01c26a370H
	DD	01de4c947H
	DD	01fa2771eH
	DD	01e601d29H
	DD	01b2f0bacH
	DD	01aed619bH
	DD	018abdfc2H
	DD	01969b5f5H
	DD	01235f2c8H
	DD	013f798ffH
	DD	011b126a6H
	DD	010734c91H
	DD	0153c5a14H
	DD	014fe3023H
	DD	016b88e7aH
	DD	0177ae44dH
	DD	0384d46e0H
	DD	0398f2cd7H
	DD	03bc9928eH
	DD	03a0bf8b9H
	DD	03f44ee3cH
	DD	03e86840bH
	DD	03cc03a52H
	DD	03d025065H
	DD	0365e1758H
	DD	0379c7d6fH
	DD	035dac336H
	DD	03418a901H
	DD	03157bf84H
	DD	03095d5b3H
	DD	032d36beaH
	DD	0331101ddH
	DD	0246be590H
	DD	025a98fa7H
	DD	027ef31feH
	DD	0262d5bc9H
	DD	023624d4cH
	DD	022a0277bH
	DD	020e69922H
	DD	02124f315H
	DD	02a78b428H
	DD	02bbade1fH
	DD	029fc6046H
	DD	0283e0a71H
	DD	02d711cf4H
	DD	02cb376c3H
	DD	02ef5c89aH
	DD	02f37a2adH
	DD	0709a8dc0H
	DD	07158e7f7H
	DD	0731e59aeH
	DD	072dc3399H
	DD	07793251cH
	DD	076514f2bH
	DD	07417f172H
	DD	075d59b45H
	DD	07e89dc78H
	DD	07f4bb64fH
	DD	07d0d0816H
	DD	07ccf6221H
	DD	0798074a4H
	DD	078421e93H
	DD	07a04a0caH
	DD	07bc6cafdH
	DD	06cbc2eb0H
	DD	06d7e4487H
	DD	06f38fadeH
	DD	06efa90e9H
	DD	06bb5866cH
	DD	06a77ec5bH
	DD	068315202H
	DD	069f33835H
	DD	062af7f08H
	DD	0636d153fH
	DD	0612bab66H
	DD	060e9c151H
	DD	065a6d7d4H
	DD	06464bde3H
	DD	0662203baH
	DD	067e0698dH
	DD	048d7cb20H
	DD	04915a117H
	DD	04b531f4eH
	DD	04a917579H
	DD	04fde63fcH
	DD	04e1c09cbH
	DD	04c5ab792H
	DD	04d98dda5H
	DD	046c49a98H
	DD	04706f0afH
	DD	045404ef6H
	DD	0448224c1H
	DD	041cd3244H
	DD	0400f5873H
	DD	04249e62aH
	DD	0438b8c1dH
	DD	054f16850H
	DD	055330267H
	DD	05775bc3eH
	DD	056b7d609H
	DD	053f8c08cH
	DD	0523aaabbH
	DD	0507c14e2H
	DD	051be7ed5H
	DD	05ae239e8H
	DD	05b2053dfH
	DD	05966ed86H
	DD	058a487b1H
	DD	05deb9134H
	DD	05c29fb03H
	DD	05e6f455aH
	DD	05fad2f6dH
	DD	0e1351b80H
	DD	0e0f771b7H
	DD	0e2b1cfeeH
	DD	0e373a5d9H
	DD	0e63cb35cH
	DD	0e7fed96bH
	DD	0e5b86732H
	DD	0e47a0d05H
	DD	0ef264a38H
	DD	0eee4200fH
	DD	0eca29e56H
	DD	0ed60f461H
	DD	0e82fe2e4H
	DD	0e9ed88d3H
	DD	0ebab368aH
	DD	0ea695cbdH
	DD	0fd13b8f0H
	DD	0fcd1d2c7H
	DD	0fe976c9eH
	DD	0ff5506a9H
	DD	0fa1a102cH
	DD	0fbd87a1bH
	DD	0f99ec442H
	DD	0f85cae75H
	DD	0f300e948H
	DD	0f2c2837fH
	DD	0f0843d26H
	DD	0f1465711H
	DD	0f4094194H
	DD	0f5cb2ba3H
	DD	0f78d95faH
	DD	0f64fffcdH
	DD	0d9785d60H
	DD	0d8ba3757H
	DD	0dafc890eH
	DD	0db3ee339H
	DD	0de71f5bcH
	DD	0dfb39f8bH
	DD	0ddf521d2H
	DD	0dc374be5H
	DD	0d76b0cd8H
	DD	0d6a966efH
	DD	0d4efd8b6H
	DD	0d52db281H
	DD	0d062a404H
	DD	0d1a0ce33H
	DD	0d3e6706aH
	DD	0d2241a5dH
	DD	0c55efe10H
	DD	0c49c9427H
	DD	0c6da2a7eH
	DD	0c7184049H
	DD	0c25756ccH
	DD	0c3953cfbH
	DD	0c1d382a2H
	DD	0c011e895H
	DD	0cb4dafa8H
	DD	0ca8fc59fH
	DD	0c8c97bc6H
	DD	0c90b11f1H
	DD	0cc440774H
	DD	0cd866d43H
	DD	0cfc0d31aH
	DD	0ce02b92dH
	DD	091af9640H
	DD	0906dfc77H
	DD	0922b422eH
	DD	093e92819H
	DD	096a63e9cH
	DD	0976454abH
	DD	09522eaf2H
	DD	094e080c5H
	DD	09fbcc7f8H
	DD	09e7eadcfH
	DD	09c381396H
	DD	09dfa79a1H
	DD	098b56f24H
	DD	099770513H
	DD	09b31bb4aH
	DD	09af3d17dH
	DD	08d893530H
	DD	08c4b5f07H
	DD	08e0de15eH
	DD	08fcf8b69H
	DD	08a809decH
	DD	08b42f7dbH
	DD	089044982H
	DD	088c623b5H
	DD	0839a6488H
	DD	082580ebfH
	DD	0801eb0e6H
	DD	081dcdad1H
	DD	08493cc54H
	DD	08551a663H
	DD	08717183aH
	DD	086d5720dH
	DD	0a9e2d0a0H
	DD	0a820ba97H
	DD	0aa6604ceH
	DD	0aba46ef9H
	DD	0aeeb787cH
	DD	0af29124bH
	DD	0ad6fac12H
	DD	0acadc625H
	DD	0a7f18118H
	DD	0a633eb2fH
	DD	0a4755576H
	DD	0a5b73f41H
	DD	0a0f829c4H
	DD	0a13a43f3H
	DD	0a37cfdaaH
	DD	0a2be979dH
	DD	0b5c473d0H
	DD	0b40619e7H
	DD	0b640a7beH
	DD	0b782cd89H
	DD	0b2cddb0cH
	DD	0b30fb13bH
	DD	0b1490f62H
	DD	0b08b6555H
	DD	0bbd72268H
	DD	0ba15485fH
	DD	0b853f606H
	DD	0b9919c31H
	DD	0bcde8ab4H
	DD	0bd1ce083H
	DD	0bf5a5edaH
	DD	0be9834edH
	DD	00H
	DD	0b8bc6765H
	DD	0aa09c88bH
	DD	012b5afeeH
	DD	08f629757H
	DD	037def032H
	DD	0256b5fdcH
	DD	09dd738b9H
	DD	0c5b428efH
	DD	07d084f8aH
	DD	06fbde064H
	DD	0d7018701H
	DD	04ad6bfb8H
	DD	0f26ad8ddH
	DD	0e0df7733H
	DD	058631056H
	DD	05019579fH
	DD	0e8a530faH
	DD	0fa109f14H
	DD	042acf871H
	DD	0df7bc0c8H
	DD	067c7a7adH
	DD	075720843H
	DD	0cdce6f26H
	DD	095ad7f70H
	DD	02d111815H
	DD	03fa4b7fbH
	DD	08718d09eH
	DD	01acfe827H
	DD	0a2738f42H
	DD	0b0c620acH
	DD	087a47c9H
	DD	0a032af3eH
	DD	0188ec85bH
	DD	0a3b67b5H
	DD	0b28700d0H
	DD	02f503869H
	DD	097ec5f0cH
	DD	08559f0e2H
	DD	03de59787H
	DD	0658687d1H
	DD	0dd3ae0b4H
	DD	0cf8f4f5aH
	DD	07733283fH
	DD	0eae41086H
	DD	0525877e3H
	DD	040edd80dH
	DD	0f851bf68H
	DD	0f02bf8a1H
	DD	048979fc4H
	DD	05a22302aH
	DD	0e29e574fH
	DD	07f496ff6H
	DD	0c7f50893H
	DD	0d540a77dH
	DD	06dfcc018H
	DD	0359fd04eH
	DD	08d23b72bH
	DD	09f9618c5H
	DD	0272a7fa0H
	DD	0bafd4719H
	DD	0241207cH
	DD	010f48f92H
	DD	0a848e8f7H
	DD	09b14583dH
	DD	023a83f58H
	DD	0311d90b6H
	DD	089a1f7d3H
	DD	01476cf6aH
	DD	0accaa80fH
	DD	0be7f07e1H
	DD	06c36084H
	DD	05ea070d2H
	DD	0e61c17b7H
	DD	0f4a9b859H
	DD	04c15df3cH
	DD	0d1c2e785H
	DD	0697e80e0H
	DD	07bcb2f0eH
	DD	0c377486bH
	DD	0cb0d0fa2H
	DD	073b168c7H
	DD	06104c729H
	DD	0d9b8a04cH
	DD	0446f98f5H
	DD	0fcd3ff90H
	DD	0ee66507eH
	DD	056da371bH
	DD	0eb9274dH
	DD	0b6054028H
	DD	0a4b0efc6H
	DD	01c0c88a3H
	DD	081dbb01aH
	DD	03967d77fH
	DD	02bd27891H
	DD	0936e1ff4H
	DD	03b26f703H
	DD	0839a9066H
	DD	0912f3f88H
	DD	0299358edH
	DD	0b4446054H
	DD	0cf80731H
	DD	01e4da8dfH
	DD	0a6f1cfbaH
	DD	0fe92dfecH
	DD	0462eb889H
	DD	0549b1767H
	DD	0ec277002H
	DD	071f048bbH
	DD	0c94c2fdeH
	DD	0dbf98030H
	DD	06345e755H
	DD	06b3fa09cH
	DD	0d383c7f9H
	DD	0c1366817H
	DD	0798a0f72H
	DD	0e45d37cbH
	DD	05ce150aeH
	DD	04e54ff40H
	DD	0f6e89825H
	DD	0ae8b8873H
	DD	01637ef16H
	DD	048240f8H
	DD	0bc3e279dH
	DD	021e91f24H
	DD	099557841H
	DD	08be0d7afH
	DD	0335cb0caH
	DD	0ed59b63bH
	DD	055e5d15eH
	DD	047507eb0H
	DD	0ffec19d5H
	DD	0623b216cH
	DD	0da874609H
	DD	0c832e9e7H
	DD	0708e8e82H
	DD	028ed9ed4H
	DD	09051f9b1H
	DD	082e4565fH
	DD	03a58313aH
	DD	0a78f0983H
	DD	01f336ee6H
	DD	0d86c108H
	DD	0b53aa66dH
	DD	0bd40e1a4H
	DD	05fc86c1H
	DD	01749292fH
	DD	0aff54e4aH
	DD	0322276f3H
	DD	08a9e1196H
	DD	0982bbe78H
	DD	02097d91dH
	DD	078f4c94bH
	DD	0c048ae2eH
	DD	0d2fd01c0H
	DD	06a4166a5H
	DD	0f7965e1cH
	DD	04f2a3979H
	DD	05d9f9697H
	DD	0e523f1f2H
	DD	04d6b1905H
	DD	0f5d77e60H
	DD	0e762d18eH
	DD	05fdeb6ebH
	DD	0c2098e52H
	DD	07ab5e937H
	DD	0680046d9H
	DD	0d0bc21bcH
	DD	088df31eaH
	DD	03063568fH
	DD	022d6f961H
	DD	09a6a9e04H
	DD	07bda6bdH
	DD	0bf01c1d8H
	DD	0adb46e36H
	DD	015080953H
	DD	01d724e9aH
	DD	0a5ce29ffH
	DD	0b77b8611H
	DD	0fc7e174H
	DD	09210d9cdH
	DD	02aacbea8H
	DD	038191146H
	DD	080a57623H
	DD	0d8c66675H
	DD	0607a0110H
	DD	072cfaefeH
	DD	0ca73c99bH
	DD	057a4f122H
	DD	0ef189647H
	DD	0fdad39a9H
	DD	045115eccH
	DD	0764dee06H
	DD	0cef18963H
	DD	0dc44268dH
	DD	064f841e8H
	DD	0f92f7951H
	DD	041931e34H
	DD	05326b1daH
	DD	0eb9ad6bfH
	DD	0b3f9c6e9H
	DD	0b45a18cH
	DD	019f00e62H
	DD	0a14c6907H
	DD	03c9b51beH
	DD	0842736dbH
	DD	096929935H
	DD	02e2efe50H
	DD	02654b999H
	DD	09ee8defcH
	DD	08c5d7112H
	DD	034e11677H
	DD	0a9362eceH
	DD	0118a49abH
	DD	033fe645H
	DD	0bb838120H
	DD	0e3e09176H
	DD	05b5cf613H
	DD	049e959fdH
	DD	0f1553e98H
	DD	06c820621H
	DD	0d43e6144H
	DD	0c68bceaaH
	DD	07e37a9cfH
	DD	0d67f4138H
	DD	06ec3265dH
	DD	07c7689b3H
	DD	0c4caeed6H
	DD	0591dd66fH
	DD	0e1a1b10aH
	DD	0f3141ee4H
	DD	04ba87981H
	DD	013cb69d7H
	DD	0ab770eb2H
	DD	0b9c2a15cH
	DD	017ec639H
	DD	09ca9fe80H
	DD	0241599e5H
	DD	036a0360bH
	DD	08e1c516eH
	DD	0866616a7H
	DD	03eda71c2H
	DD	02c6fde2cH
	DD	094d3b949H
	DD	090481f0H
	DD	0b1b8e695H
	DD	0a30d497bH
	DD	01bb12e1eH
	DD	043d23e48H
	DD	0fb6e592dH
	DD	0e9dbf6c3H
	DD	0516791a6H
	DD	0ccb0a91fH
	DD	0740cce7aH
	DD	066b96194H
	DD	0de0506f1H
	DD	00H
	DD	096300777H
	DD	02c610eeeH
	DD	0ba510999H
	DD	019c46d07H
	DD	08ff46a70H
	DD	035a563e9H
	DD	0a395649eH
	DD	03288db0eH
	DD	0a4b8dc79H
	DD	01ee9d5e0H
	DD	088d9d297H
	DD	02b4cb609H
	DD	0bd7cb17eH
	DD	072db8e7H
	DD	0911dbf90H
	DD	06410b71dH
	DD	0f220b06aH
	DD	04871b9f3H
	DD	0de41be84H
	DD	07dd4da1aH
	DD	0ebe4dd6dH
	DD	051b5d4f4H
	DD	0c785d383H
	DD	056986c13H
	DD	0c0a86b64H
	DD	07af962fdH
	DD	0ecc9658aH
	DD	04f5c0114H
	DD	0d96c0663H
	DD	0633d0ffaH
	DD	0f50d088dH
	DD	0c8206e3bH
	DD	05e10694cH
	DD	0e44160d5H
	DD	0727167a2H
	DD	0d1e4033cH
	DD	047d4044bH
	DD	0fd850dd2H
	DD	06bb50aa5H
	DD	0faa8b535H
	DD	06c98b242H
	DD	0d6c9bbdbH
	DD	040f9bcacH
	DD	0e36cd832H
	DD	0755cdf45H
	DD	0cf0dd6dcH
	DD	0593dd1abH
	DD	0ac30d926H
	DD	03a00de51H
	DD	08051d7c8H
	DD	01661d0bfH
	DD	0b5f4b421H
	DD	023c4b356H
	DD	09995bacfH
	DD	0fa5bdb8H
	DD	09eb80228H
	DD	0888055fH
	DD	0b2d90cc6H
	DD	024e90bb1H
	DD	0877c6f2fH
	DD	0114c6858H
	DD	0ab1d61c1H
	DD	03d2d66b6H
	DD	09041dc76H
	DD	0671db01H
	DD	0bc20d298H
	DD	02a10d5efH
	DD	08985b171H
	DD	01fb5b606H
	DD	0a5e4bf9fH
	DD	033d4b8e8H
	DD	0a2c90778H
	DD	034f9000fH
	DD	08ea80996H
	DD	018980ee1H
	DD	0bb0d6a7fH
	DD	02d3d6d08H
	DD	0976c6491H
	DD	015c63e6H
	DD	0f4516b6bH
	DD	062616c1cH
	DD	0d8306585H
	DD	04e0062f2H
	DD	0ed95066cH
	DD	07ba5011bH
	DD	0c1f40882H
	DD	057c40ff5H
	DD	0c6d9b065H
	DD	050e9b712H
	DD	0eab8be8bH
	DD	07c88b9fcH
	DD	0df1ddd62H
	DD	0492dda15H
	DD	0f37cd38cH
	DD	0654cd4fbH
	DD	05861b24dH
	DD	0ce51b53aH
	DD	07400bca3H
	DD	0e230bbd4H
	DD	041a5df4aH
	DD	0d795d83dH
	DD	06dc4d1a4H
	DD	0fbf4d6d3H
	DD	06ae96943H
	DD	0fcd96e34H
	DD	0468867adH
	DD	0d0b860daH
	DD	0732d0444H
	DD	0e51d0333H
	DD	05f4c0aaaH
	DD	0c97c0dddH
	DD	03c710550H
	DD	0aa410227H
	DD	010100bbeH
	DD	086200cc9H
	DD	025b56857H
	DD	0b3856f20H
	DD	09d466b9H
	DD	09fe461ceH
	DD	0ef9de5eH
	DD	098c9d929H
	DD	02298d0b0H
	DD	0b4a8d7c7H
	DD	0173db359H
	DD	0810db42eH
	DD	03b5cbdb7H
	DD	0ad6cbac0H
	DD	02083b8edH
	DD	0b6b3bf9aH
	DD	0ce2b603H
	DD	09ad2b174H
	DD	03947d5eaH
	DD	0af77d29dH
	DD	01526db04H
	DD	08316dc73H
	DD	0120b63e3H
	DD	0843b6494H
	DD	03e6a6d0dH
	DD	0a85a6a7aH
	DD	0bcf0ee4H
	DD	09dff0993H
	DD	027ae000aH
	DD	0b19e077dH
	DD	044930ff0H
	DD	0d2a30887H
	DD	068f2011eH
	DD	0fec20669H
	DD	05d5762f7H
	DD	0cb676580H
	DD	071366c19H
	DD	0e7066b6eH
	DD	0761bd4feH
	DD	0e02bd389H
	DD	05a7ada10H
	DD	0cc4add67H
	DD	06fdfb9f9H
	DD	0f9efbe8eH
	DD	043beb717H
	DD	0d58eb060H
	DD	0e8a3d6d6H
	DD	07e93d1a1H
	DD	0c4c2d838H
	DD	052f2df4fH
	DD	0f167bbd1H
	DD	06757bca6H
	DD	0dd06b53fH
	DD	04b36b248H
	DD	0da2b0dd8H
	DD	04c1b0aafH
	DD	0f64a0336H
	DD	0607a0441H
	DD	0c3ef60dfH
	DD	055df67a8H
	DD	0ef8e6e31H
	DD	079be6946H
	DD	08cb361cbH
	DD	01a8366bcH
	DD	0a0d26f25H
	DD	036e26852H
	DD	095770cccH
	DD	03470bbbH
	DD	0b9160222H
	DD	02f260555H
	DD	0be3bbac5H
	DD	0280bbdb2H
	DD	0925ab42bH
	DD	046ab35cH
	DD	0a7ffd7c2H
	DD	031cfd0b5H
	DD	08b9ed92cH
	DD	01daede5bH
	DD	0b0c2649bH
	DD	026f263ecH
	DD	09ca36a75H
	DD	0a936d02H
	DD	0a906099cH
	DD	03f360eebH
	DD	085670772H
	DD	013570005H
	DD	0824abf95H
	DD	0147ab8e2H
	DD	0ae2bb17bH
	DD	0381bb60cH
	DD	09b8ed292H
	DD	0dbed5e5H
	DD	0b7efdc7cH
	DD	021dfdb0bH
	DD	0d4d2d386H
	DD	042e2d4f1H
	DD	0f8b3dd68H
	DD	06e83da1fH
	DD	0cd16be81H
	DD	05b26b9f6H
	DD	0e177b06fH
	DD	07747b718H
	DD	0e65a0888H
	DD	0706a0fffH
	DD	0ca3b0666H
	DD	05c0b0111H
	DD	0ff9e658fH
	DD	069ae62f8H
	DD	0d3ff6b61H
	DD	045cf6c16H
	DD	078e20aa0H
	DD	0eed20dd7H
	DD	05483044eH
	DD	0c2b30339H
	DD	0612667a7H
	DD	0f71660d0H
	DD	04d476949H
	DD	0db776e3eH
	DD	04a6ad1aeH
	DD	0dc5ad6d9H
	DD	0660bdf40H
	DD	0f03bd837H
	DD	053aebca9H
	DD	0c59ebbdeH
	DD	07fcfb247H
	DD	0e9ffb530H
	DD	01cf2bdbdH
	DD	08ac2bacaH
	DD	03093b353H
	DD	0a6a3b424H
	DD	0536d0baH
	DD	09306d7cdH
	DD	02957de54H
	DD	0bf67d923H
	DD	02e7a66b3H
	DD	0b84a61c4H
	DD	021b685dH
	DD	0942b6f2aH
	DD	037be0bb4H
	DD	0a18e0cc3H
	DD	01bdf055aH
	DD	08def022dH
	DD	00H
	DD	041311b19H
	DD	082623632H
	DD	0c3532d2bH
	DD	04c56c64H
	DD	045f4777dH
	DD	086a75a56H
	DD	0c796414fH
	DD	088ad9c8H
	DD	049bbc2d1H
	DD	08ae8effaH
	DD	0cbd9f4e3H
	DD	0c4fb5acH
	DD	04d7eaeb5H
	DD	08e2d839eH
	DD	0cf1c9887H
	DD	05112c24aH
	DD	01023d953H
	DD	0d370f478H
	DD	09241ef61H
	DD	055d7ae2eH
	DD	014e6b537H
	DD	0d7b5981cH
	DD	096848305H
	DD	059981b82H
	DD	018a9009bH
	DD	0dbfa2db0H
	DD	09acb36a9H
	DD	05d5d77e6H
	DD	01c6c6cffH
	DD	0df3f41d4H
	DD	09e0e5acdH
	DD	0a2248495H
	DD	0e3159f8cH
	DD	02046b2a7H
	DD	06177a9beH
	DD	0a6e1e8f1H
	DD	0e7d0f3e8H
	DD	02483dec3H
	DD	065b2c5daH
	DD	0aaae5d5dH
	DD	0eb9f4644H
	DD	028cc6b6fH
	DD	069fd7076H
	DD	0ae6b3139H
	DD	0ef5a2a20H
	DD	02c09070bH
	DD	06d381c12H
	DD	0f33646dfH
	DD	0b2075dc6H
	DD	0715470edH
	DD	030656bf4H
	DD	0f7f32abbH
	DD	0b6c231a2H
	DD	075911c89H
	DD	034a00790H
	DD	0fbbc9f17H
	DD	0ba8d840eH
	DD	079dea925H
	DD	038efb23cH
	DD	0ff79f373H
	DD	0be48e86aH
	DD	07d1bc541H
	DD	03c2ade58H
	DD	054f79f0H
	DD	0447e62e9H
	DD	0872d4fc2H
	DD	0c61c54dbH
	DD	018a1594H
	DD	040bb0e8dH
	DD	083e823a6H
	DD	0c2d938bfH
	DD	0dc5a038H
	DD	04cf4bb21H
	DD	08fa7960aH
	DD	0ce968d13H
	DD	0900cc5cH
	DD	04831d745H
	DD	08b62fa6eH
	DD	0ca53e177H
	DD	0545dbbbaH
	DD	0156ca0a3H
	DD	0d63f8d88H
	DD	0970e9691H
	DD	05098d7deH
	DD	011a9ccc7H
	DD	0d2fae1ecH
	DD	093cbfaf5H
	DD	05cd76272H
	DD	01de6796bH
	DD	0deb55440H
	DD	09f844f59H
	DD	058120e16H
	DD	01923150fH
	DD	0da703824H
	DD	09b41233dH
	DD	0a76bfd65H
	DD	0e65ae67cH
	DD	02509cb57H
	DD	06438d04eH
	DD	0a3ae9101H
	DD	0e29f8a18H
	DD	021cca733H
	DD	060fdbc2aH
	DD	0afe124adH
	DD	0eed03fb4H
	DD	02d83129fH
	DD	06cb20986H
	DD	0ab2448c9H
	DD	0ea1553d0H
	DD	029467efbH
	DD	0687765e2H
	DD	0f6793f2fH
	DD	0b7482436H
	DD	0741b091dH
	DD	0352a1204H
	DD	0f2bc534bH
	DD	0b38d4852H
	DD	070de6579H
	DD	031ef7e60H
	DD	0fef3e6e7H
	DD	0bfc2fdfeH
	DD	07c91d0d5H
	DD	03da0cbccH
	DD	0fa368a83H
	DD	0bb07919aH
	DD	07854bcb1H
	DD	03965a7a8H
	DD	04b98833bH
	DD	0aa99822H
	DD	0c9fab509H
	DD	088cbae10H
	DD	04f5def5fH
	DD	0e6cf446H
	DD	0cd3fd96dH
	DD	08c0ec274H
	DD	043125af3H
	DD	022341eaH
	DD	0c1706cc1H
	DD	0804177d8H
	DD	047d73697H
	DD	06e62d8eH
	DD	0c5b500a5H
	DD	084841bbcH
	DD	01a8a4171H
	DD	05bbb5a68H
	DD	098e87743H
	DD	0d9d96c5aH
	DD	01e4f2d15H
	DD	05f7e360cH
	DD	09c2d1b27H
	DD	0dd1c003eH
	DD	0120098b9H
	DD	0533183a0H
	DD	09062ae8bH
	DD	0d153b592H
	DD	016c5f4ddH
	DD	057f4efc4H
	DD	094a7c2efH
	DD	0d596d9f6H
	DD	0e9bc07aeH
	DD	0a88d1cb7H
	DD	06bde319cH
	DD	02aef2a85H
	DD	0ed796bcaH
	DD	0ac4870d3H
	DD	06f1b5df8H
	DD	02e2a46e1H
	DD	0e136de66H
	DD	0a007c57fH
	DD	06354e854H
	DD	02265f34dH
	DD	0e5f3b202H
	DD	0a4c2a91bH
	DD	067918430H
	DD	026a09f29H
	DD	0b8aec5e4H
	DD	0f99fdefdH
	DD	03accf3d6H
	DD	07bfde8cfH
	DD	0bc6ba980H
	DD	0fd5ab299H
	DD	03e099fb2H
	DD	07f3884abH
	DD	0b0241c2cH
	DD	0f1150735H
	DD	032462a1eH
	DD	073773107H
	DD	0b4e17048H
	DD	0f5d06b51H
	DD	03683467aH
	DD	077b25d63H
	DD	04ed7facbH
	DD	0fe6e1d2H
	DD	0ccb5ccf9H
	DD	08d84d7e0H
	DD	04a1296afH
	DD	0b238db6H
	DD	0c870a09dH
	DD	08941bb84H
	DD	0465d2303H
	DD	076c381aH
	DD	0c43f1531H
	DD	0850e0e28H
	DD	042984f67H
	DD	03a9547eH
	DD	0c0fa7955H
	DD	081cb624cH
	DD	01fc53881H
	DD	05ef42398H
	DD	09da70eb3H
	DD	0dc9615aaH
	DD	01b0054e5H
	DD	05a314ffcH
	DD	0996262d7H
	DD	0d85379ceH
	DD	0174fe149H
	DD	0567efa50H
	DD	0952dd77bH
	DD	0d41ccc62H
	DD	0138a8d2dH
	DD	052bb9634H
	DD	091e8bb1fH
	DD	0d0d9a006H
	DD	0ecf37e5eH
	DD	0adc26547H
	DD	06e91486cH
	DD	02fa05375H
	DD	0e836123aH
	DD	0a9070923H
	DD	06a542408H
	DD	02b653f11H
	DD	0e479a796H
	DD	0a548bc8fH
	DD	0661b91a4H
	DD	0272a8abdH
	DD	0e0bccbf2H
	DD	0a18dd0ebH
	DD	062defdc0H
	DD	023efe6d9H
	DD	0bde1bc14H
	DD	0fcd0a70dH
	DD	03f838a26H
	DD	07eb2913fH
	DD	0b924d070H
	DD	0f815cb69H
	DD	03b46e642H
	DD	07a77fd5bH
	DD	0b56b65dcH
	DD	0f45a7ec5H
	DD	0370953eeH
	DD	0763848f7H
	DD	0b1ae09b8H
	DD	0f09f12a1H
	DD	033cc3f8aH
	DD	072fd2493H
	DD	00H
	DD	0376ac201H
	DD	06ed48403H
	DD	059be4602H
	DD	0dca80907H
	DD	0ebc2cb06H
	DD	0b27c8d04H
	DD	085164f05H
	DD	0b851130eH
	DD	08f3bd10fH
	DD	0d685970dH
	DD	0e1ef550cH
	DD	064f91a09H
	DD	05393d808H
	DD	0a2d9e0aH
	DD	03d475c0bH
	DD	070a3261cH
	DD	047c9e41dH
	DD	01e77a21fH
	DD	0291d601eH
	DD	0ac0b2f1bH
	DD	09b61ed1aH
	DD	0c2dfab18H
	DD	0f5b56919H
	DD	0c8f23512H
	DD	0ff98f713H
	DD	0a626b111H
	DD	0914c7310H
	DD	0145a3c15H
	DD	02330fe14H
	DD	07a8eb816H
	DD	04de47a17H
	DD	0e0464d38H
	DD	0d72c8f39H
	DD	08e92c93bH
	DD	0b9f80b3aH
	DD	03cee443fH
	DD	0b84863eH
	DD	0523ac03cH
	DD	06550023dH
	DD	058175e36H
	DD	06f7d9c37H
	DD	036c3da35H
	DD	01a91834H
	DD	084bf5731H
	DD	0b3d59530H
	DD	0ea6bd332H
	DD	0dd011133H
	DD	090e56b24H
	DD	0a78fa925H
	DD	0fe31ef27H
	DD	0c95b2d26H
	DD	04c4d6223H
	DD	07b27a022H
	DD	02299e620H
	DD	015f32421H
	DD	028b4782aH
	DD	01fdeba2bH
	DD	04660fc29H
	DD	0710a3e28H
	DD	0f41c712dH
	DD	0c376b32cH
	DD	09ac8f52eH
	DD	0ada2372fH
	DD	0c08d9a70H
	DD	0f7e75871H
	DD	0ae591e73H
	DD	09933dc72H
	DD	01c259377H
	DD	02b4f5176H
	DD	072f11774H
	DD	0459bd575H
	DD	078dc897eH
	DD	04fb64b7fH
	DD	016080d7dH
	DD	02162cf7cH
	DD	0a4748079H
	DD	0931e4278H
	DD	0caa0047aH
	DD	0fdcac67bH
	DD	0b02ebc6cH
	DD	087447e6dH
	DD	0defa386fH
	DD	0e990fa6eH
	DD	06c86b56bH
	DD	05bec776aH
	DD	02523168H
	DD	03538f369H
	DD	087faf62H
	DD	03f156d63H
	DD	066ab2b61H
	DD	051c1e960H
	DD	0d4d7a665H
	DD	0e3bd6464H
	DD	0ba032266H
	DD	08d69e067H
	DD	020cbd748H
	DD	017a11549H
	DD	04e1f534bH
	DD	07975914aH
	DD	0fc63de4fH
	DD	0cb091c4eH
	DD	092b75a4cH
	DD	0a5dd984dH
	DD	0989ac446H
	DD	0aff00647H
	DD	0f64e4045H
	DD	0c1248244H
	DD	04432cd41H
	DD	073580f40H
	DD	02ae64942H
	DD	01d8c8b43H
	DD	05068f154H
	DD	067023355H
	DD	03ebc7557H
	DD	09d6b756H
	DD	08cc0f853H
	DD	0bbaa3a52H
	DD	0e2147c50H
	DD	0d57ebe51H
	DD	0e839e25aH
	DD	0df53205bH
	DD	086ed6659H
	DD	0b187a458H
	DD	03491eb5dH
	DD	03fb295cH
	DD	05a456f5eH
	DD	06d2fad5fH
	DD	0801b35e1H
	DD	0b771f7e0H
	DD	0eecfb1e2H
	DD	0d9a573e3H
	DD	05cb33ce6H
	DD	06bd9fee7H
	DD	03267b8e5H
	DD	050d7ae4H
	DD	0384a26efH
	DD	0f20e4eeH
	DD	0569ea2ecH
	DD	061f460edH
	DD	0e4e22fe8H
	DD	0d388ede9H
	DD	08a36abebH
	DD	0bd5c69eaH
	DD	0f0b813fdH
	DD	0c7d2d1fcH
	DD	09e6c97feH
	DD	0a90655ffH
	DD	02c101afaH
	DD	01b7ad8fbH
	DD	042c49ef9H
	DD	075ae5cf8H
	DD	048e900f3H
	DD	07f83c2f2H
	DD	0263d84f0H
	DD	0115746f1H
	DD	0944109f4H
	DD	0a32bcbf5H
	DD	0fa958df7H
	DD	0cdff4ff6H
	DD	0605d78d9H
	DD	05737bad8H
	DD	0e89fcdaH
	DD	039e33edbH
	DD	0bcf571deH
	DD	08b9fb3dfH
	DD	0d221f5ddH
	DD	0e54b37dcH
	DD	0d80c6bd7H
	DD	0ef66a9d6H
	DD	0b6d8efd4H
	DD	081b22dd5H
	DD	04a462d0H
	DD	033cea0d1H
	DD	06a70e6d3H
	DD	05d1a24d2H
	DD	010fe5ec5H
	DD	027949cc4H
	DD	07e2adac6H
	DD	0494018c7H
	DD	0cc5657c2H
	DD	0fb3c95c3H
	DD	0a282d3c1H
	DD	095e811c0H
	DD	0a8af4dcbH
	DD	09fc58fcaH
	DD	0c67bc9c8H
	DD	0f1110bc9H
	DD	0740744ccH
	DD	0436d86cdH
	DD	01ad3c0cfH
	DD	02db902ceH
	DD	04096af91H
	DD	077fc6d90H
	DD	02e422b92H
	DD	01928e993H
	DD	09c3ea696H
	DD	0ab546497H
	DD	0f2ea2295H
	DD	0c580e094H
	DD	0f8c7bc9fH
	DD	0cfad7e9eH
	DD	09613389cH
	DD	0a179fa9dH
	DD	0246fb598H
	DD	013057799H
	DD	04abb319bH
	DD	07dd1f39aH
	DD	03035898dH
	DD	075f4b8cH
	DD	05ee10d8eH
	DD	0698bcf8fH
	DD	0ec9d808aH
	DD	0dbf7428bH
	DD	082490489H
	DD	0b523c688H
	DD	088649a83H
	DD	0bf0e5882H
	DD	0e6b01e80H
	DD	0d1dadc81H
	DD	054cc9384H
	DD	063a65185H
	DD	03a181787H
	DD	0d72d586H
	DD	0a0d0e2a9H
	DD	097ba20a8H
	DD	0ce0466aaH
	DD	0f96ea4abH
	DD	07c78ebaeH
	DD	04b1229afH
	DD	012ac6fadH
	DD	025c6adacH
	DD	01881f1a7H
	DD	02feb33a6H
	DD	0765575a4H
	DD	0413fb7a5H
	DD	0c429f8a0H
	DD	0f3433aa1H
	DD	0aafd7ca3H
	DD	09d97bea2H
	DD	0d073c4b5H
	DD	0e71906b4H
	DD	0bea740b6H
	DD	089cd82b7H
	DD	0cdbcdb2H
	DD	03bb10fb3H
	DD	0620f49b1H
	DD	055658bb0H
	DD	06822d7bbH
	DD	05f4815baH
	DD	06f653b8H
	DD	0319c91b9H
	DD	0b48adebcH
	DD	083e01cbdH
	DD	0da5e5abfH
	DD	0ed3498beH
	DD	00H
	DD	06567bcb8H
	DD	08bc809aaH
	DD	0eeafb512H
	DD	05797628fH
	DD	032f0de37H
	DD	0dc5f6b25H
	DD	0b938d79dH
	DD	0ef28b4c5H
	DD	08a4f087dH
	DD	064e0bd6fH
	DD	018701d7H
	DD	0b8bfd64aH
	DD	0ddd86af2H
	DD	03377dfe0H
	DD	056106358H
	DD	09f571950H
	DD	0fa30a5e8H
	DD	0149f10faH
	DD	071f8ac42H
	DD	0c8c07bdfH
	DD	0ada7c767H
	DD	043087275H
	DD	0266fcecdH
	DD	0707fad95H
	DD	01518112dH
	DD	0fbb7a43fH
	DD	09ed01887H
	DD	027e8cf1aH
	DD	0428f73a2H
	DD	0ac20c6b0H
	DD	0c9477a08H
	DD	03eaf32a0H
	DD	05bc88e18H
	DD	0b5673b0aH
	DD	0d00087b2H
	DD	06938502fH
	DD	0c5fec97H
	DD	0e2f05985H
	DD	08797e53dH
	DD	0d1878665H
	DD	0b4e03addH
	DD	05a4f8fcfH
	DD	03f283377H
	DD	08610e4eaH
	DD	0e3775852H
	DD	0dd8ed40H
	DD	068bf51f8H
	DD	0a1f82bf0H
	DD	0c49f9748H
	DD	02a30225aH
	DD	04f579ee2H
	DD	0f66f497fH
	DD	09308f5c7H
	DD	07da740d5H
	DD	018c0fc6dH
	DD	04ed09f35H
	DD	02bb7238dH
	DD	0c518969fH
	DD	0a07f2a27H
	DD	01947fdbaH
	DD	07c204102H
	DD	0928ff410H
	DD	0f7e848a8H
	DD	03d58149bH
	DD	0583fa823H
	DD	0b6901d31H
	DD	0d3f7a189H
	DD	06acf7614H
	DD	0fa8caacH
	DD	0e1077fbeH
	DD	08460c306H
	DD	0d270a05eH
	DD	0b7171ce6H
	DD	059b8a9f4H
	DD	03cdf154cH
	DD	085e7c2d1H
	DD	0e0807e69H
	DD	0e2fcb7bH
	DD	06b4877c3H
	DD	0a20f0dcbH
	DD	0c768b173H
	DD	029c70461H
	DD	04ca0b8d9H
	DD	0f5986f44H
	DD	090ffd3fcH
	DD	07e5066eeH
	DD	01b37da56H
	DD	04d27b90eH
	DD	0284005b6H
	DD	0c6efb0a4H
	DD	0a3880c1cH
	DD	01ab0db81H
	DD	07fd76739H
	DD	09178d22bH
	DD	0f41f6e93H
	DD	03f7263bH
	DD	066909a83H
	DD	0883f2f91H
	DD	0ed589329H
	DD	0546044b4H
	DD	03107f80cH
	DD	0dfa84d1eH
	DD	0bacff1a6H
	DD	0ecdf92feH
	DD	089b82e46H
	DD	067179b54H
	DD	027027ecH
	DD	0bb48f071H
	DD	0de2f4cc9H
	DD	03080f9dbH
	DD	055e74563H
	DD	09ca03f6bH
	DD	0f9c783d3H
	DD	0176836c1H
	DD	0720f8a79H
	DD	0cb375de4H
	DD	0ae50e15cH
	DD	040ff544eH
	DD	02598e8f6H
	DD	073888baeH
	DD	016ef3716H
	DD	0f8408204H
	DD	09d273ebcH
	DD	0241fe921H
	DD	041785599H
	DD	0afd7e08bH
	DD	0cab05c33H
	DD	03bb659edH
	DD	05ed1e555H
	DD	0b07e5047H
	DD	0d519ecffH
	DD	06c213b62H
	DD	094687daH
	DD	0e7e932c8H
	DD	0828e8e70H
	DD	0d49eed28H
	DD	0b1f95190H
	DD	05f56e482H
	DD	03a31583aH
	DD	083098fa7H
	DD	0e66e331fH
	DD	08c1860dH
	DD	06da63ab5H
	DD	0a4e140bdH
	DD	0c186fc05H
	DD	02f294917H
	DD	04a4ef5afH
	DD	0f3762232H
	DD	096119e8aH
	DD	078be2b98H
	DD	01dd99720H
	DD	04bc9f478H
	DD	02eae48c0H
	DD	0c001fdd2H
	DD	0a566416aH
	DD	01c5e96f7H
	DD	079392a4fH
	DD	097969f5dH
	DD	0f2f123e5H
	DD	05196b4dH
	DD	0607ed7f5H
	DD	08ed162e7H
	DD	0ebb6de5fH
	DD	0528e09c2H
	DD	037e9b57aH
	DD	0d9460068H
	DD	0bc21bcd0H
	DD	0ea31df88H
	DD	08f566330H
	DD	061f9d622H
	DD	049e6a9aH
	DD	0bda6bd07H
	DD	0d8c101bfH
	DD	0366eb4adH
	DD	053090815H
	DD	09a4e721dH
	DD	0ff29cea5H
	DD	011867bb7H
	DD	074e1c70fH
	DD	0cdd91092H
	DD	0a8beac2aH
	DD	046111938H
	DD	02376a580H
	DD	07566c6d8H
	DD	010017a60H
	DD	0feaecf72H
	DD	09bc973caH
	DD	022f1a457H
	DD	0479618efH
	DD	0a939adfdH
	DD	0cc5e1145H
	DD	06ee4d76H
	DD	06389f1ceH
	DD	08d2644dcH
	DD	0e841f864H
	DD	051792ff9H
	DD	0341e9341H
	DD	0dab12653H
	DD	0bfd69aebH
	DD	0e9c6f9b3H
	DD	08ca1450bH
	DD	0620ef019H
	DD	07694ca1H
	DD	0be519b3cH
	DD	0db362784H
	DD	035999296H
	DD	050fe2e2eH
	DD	099b95426H
	DD	0fcdee89eH
	DD	012715d8cH
	DD	07716e134H
	DD	0ce2e36a9H
	DD	0ab498a11H
	DD	045e63f03H
	DD	0208183bbH
	DD	07691e0e3H
	DD	013f65c5bH
	DD	0fd59e949H
	DD	0983e55f1H
	DD	02106826cH
	DD	044613ed4H
	DD	0aace8bc6H
	DD	0cfa9377eH
	DD	038417fd6H
	DD	05d26c36eH
	DD	0b389767cH
	DD	0d6eecac4H
	DD	06fd61d59H
	DD	0ab1a1e1H
	DD	0e41e14f3H
	DD	08179a84bH
	DD	0d769cb13H
	DD	0b20e77abH
	DD	05ca1c2b9H
	DD	039c67e01H
	DD	080fea99cH
	DD	0e5991524H
	DD	0b36a036H
	DD	06e511c8eH
	DD	0a7166686H
	DD	0c271da3eH
	DD	02cde6f2cH
	DD	049b9d394H
	DD	0f0810409H
	DD	095e6b8b1H
	DD	07b490da3H
	DD	01e2eb11bH
	DD	0483ed243H
	DD	02d596efbH
	DD	0c3f6dbe9H
	DD	0a6916751H
	DD	01fa9b0ccH
	DD	07ace0c74H
	DD	09461b966H
	DD	0f10605deH
;	COMDAT pdata
; File d:\lp_solve_5.5\xli\xli_zimpl\ziboptvs10\thirdparty\zlib\crc32.c
pdata	SEGMENT
$pdata$gf2_matrix_times DD imagerel gf2_matrix_times
	DD	imagerel gf2_matrix_times+87
	DD	imagerel $unwind$gf2_matrix_times
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gf2_matrix_times DD 010d01H
	DD	0220dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT gf2_matrix_times
_TEXT	SEGMENT
sum$ = 0
mat$ = 32
vec$ = 40
gf2_matrix_times PROC					; COMDAT

; 347  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 18	 sub	 rsp, 24

; 348  :     unsigned long sum;
; 349  : 
; 350  :     sum = 0;

  0000d	c7 04 24 00 00
	00 00		 mov	 DWORD PTR sum$[rsp], 0
$LN3@gf2_matrix:

; 351  :     while (vec) {

  00014	83 7c 24 28 00	 cmp	 DWORD PTR vec$[rsp], 0
  00019	74 34		 je	 SHORT $LN2@gf2_matrix

; 352  :         if (vec & 1)

  0001b	8b 44 24 28	 mov	 eax, DWORD PTR vec$[rsp]
  0001f	83 e0 01	 and	 eax, 1
  00022	85 c0		 test	 eax, eax
  00024	74 0f		 je	 SHORT $LN1@gf2_matrix

; 353  :             sum ^= *mat;

  00026	48 8b 44 24 20	 mov	 rax, QWORD PTR mat$[rsp]
  0002b	8b 08		 mov	 ecx, DWORD PTR [rax]
  0002d	8b 04 24	 mov	 eax, DWORD PTR sum$[rsp]
  00030	33 c1		 xor	 eax, ecx
  00032	89 04 24	 mov	 DWORD PTR sum$[rsp], eax
$LN1@gf2_matrix:

; 354  :         vec >>= 1;

  00035	8b 44 24 28	 mov	 eax, DWORD PTR vec$[rsp]
  00039	d1 e8		 shr	 eax, 1
  0003b	89 44 24 28	 mov	 DWORD PTR vec$[rsp], eax

; 355  :         mat++;

  0003f	48 8b 44 24 20	 mov	 rax, QWORD PTR mat$[rsp]
  00044	48 83 c0 04	 add	 rax, 4
  00048	48 89 44 24 20	 mov	 QWORD PTR mat$[rsp], rax

; 356  :     }

  0004d	eb c5		 jmp	 SHORT $LN3@gf2_matrix
$LN2@gf2_matrix:

; 357  :     return sum;

  0004f	8b 04 24	 mov	 eax, DWORD PTR sum$[rsp]

; 358  : }

  00052	48 83 c4 18	 add	 rsp, 24
  00056	c3		 ret	 0
gf2_matrix_times ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$crc32_big DD imagerel crc32_big
	DD	imagerel crc32_big+1738
	DD	imagerel $unwind$crc32_big
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$crc32_big DD 011201H
	DD	02212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT crc32_big
_TEXT	SEGMENT
buf4$ = 0
c$ = 8
crc$ = 32
buf$ = 40
len$ = 48
crc32_big PROC						; COMDAT

; 308  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 18	 sub	 rsp, 24

; 309  :     register u4 c;
; 310  :     register const u4 FAR *buf4;
; 311  : 
; 312  :     c = REV((u4)crc);

  00012	8b 44 24 20	 mov	 eax, DWORD PTR crc$[rsp]
  00016	c1 e8 18	 shr	 eax, 24
  00019	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0001e	8b 4c 24 20	 mov	 ecx, DWORD PTR crc$[rsp]
  00022	c1 e9 08	 shr	 ecx, 8
  00025	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  0002b	03 c1		 add	 eax, ecx
  0002d	8b 4c 24 20	 mov	 ecx, DWORD PTR crc$[rsp]
  00031	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  00037	c1 e1 08	 shl	 ecx, 8
  0003a	03 c1		 add	 eax, ecx
  0003c	8b 4c 24 20	 mov	 ecx, DWORD PTR crc$[rsp]
  00040	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00046	c1 e1 18	 shl	 ecx, 24
  00049	03 c1		 add	 eax, ecx
  0004b	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax

; 313  :     c = ~c;

  0004f	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00053	f7 d0		 not	 eax
  00055	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
$LN10@crc32_big:

; 314  :     while (len && ((ptrdiff_t)buf & 3)) {

  00059	83 7c 24 30 00	 cmp	 DWORD PTR len$[rsp], 0
  0005e	74 5a		 je	 SHORT $LN9@crc32_big
  00060	48 8b 44 24 28	 mov	 rax, QWORD PTR buf$[rsp]
  00065	48 83 e0 03	 and	 rax, 3
  00069	48 85 c0	 test	 rax, rax
  0006c	74 4c		 je	 SHORT $LN9@crc32_big

; 315  :         c = crc_table[4][(c >> 24) ^ *buf++] ^ (c << 8);

  0006e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:crc_table
  00075	8b 54 24 08	 mov	 edx, DWORD PTR c$[rsp]
  00079	c1 ea 18	 shr	 edx, 24
  0007c	48 8b 44 24 28	 mov	 rax, QWORD PTR buf$[rsp]
  00081	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00084	8b c2		 mov	 eax, edx
  00086	33 c1		 xor	 eax, ecx
  00088	8b c0		 mov	 eax, eax
  0008a	8b 4c 24 08	 mov	 ecx, DWORD PTR c$[rsp]
  0008e	c1 e1 08	 shl	 ecx, 8
  00091	41 8b 84 80 00
	10 00 00	 mov	 eax, DWORD PTR [r8+rax*4+4096]
  00099	33 c1		 xor	 eax, ecx
  0009b	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  0009f	48 8b 44 24 28	 mov	 rax, QWORD PTR buf$[rsp]
  000a4	48 83 c0 01	 add	 rax, 1
  000a8	48 89 44 24 28	 mov	 QWORD PTR buf$[rsp], rax

; 316  :         len--;

  000ad	8b 44 24 30	 mov	 eax, DWORD PTR len$[rsp]
  000b1	83 e8 01	 sub	 eax, 1
  000b4	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 317  :     }

  000b8	eb 9f		 jmp	 SHORT $LN10@crc32_big
$LN9@crc32_big:

; 318  : 
; 319  :     buf4 = (const u4 FAR *)(const void FAR *)buf;

  000ba	48 8b 44 24 28	 mov	 rax, QWORD PTR buf$[rsp]
  000bf	48 89 04 24	 mov	 QWORD PTR buf4$[rsp], rax

; 320  :     buf4--;

  000c3	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  000c7	48 83 e8 04	 sub	 rax, 4
  000cb	48 89 04 24	 mov	 QWORD PTR buf4$[rsp], rax
$LN8@crc32_big:

; 321  :     while (len >= 32) {

  000cf	83 7c 24 30 20	 cmp	 DWORD PTR len$[rsp], 32	; 00000020H
  000d4	0f 82 90 04 00
	00		 jb	 $LN7@crc32_big

; 322  :         DOBIG32;

  000da	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  000de	48 83 c0 04	 add	 rax, 4
  000e2	48 89 04 24	 mov	 QWORD PTR buf4$[rsp], rax
  000e6	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  000ea	8b 08		 mov	 ecx, DWORD PTR [rax]
  000ec	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  000f0	33 c1		 xor	 eax, ecx
  000f2	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  000f6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:crc_table
  000fd	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00101	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00106	8b d0		 mov	 edx, eax
  00108	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  0010f	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00113	c1 e8 08	 shr	 eax, 8
  00116	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0011b	8b c0		 mov	 eax, eax
  0011d	8b 84 81 00 14
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+5120]
  00124	45 8b 84 90 00
	10 00 00	 mov	 r8d, DWORD PTR [r8+rdx*4+4096]
  0012c	44 33 c0	 xor	 r8d, eax
  0012f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  00136	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  0013a	c1 e8 10	 shr	 eax, 16
  0013d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00142	8b c0		 mov	 eax, eax
  00144	44 33 84 81 00
	18 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+6144]
  0014c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:crc_table
  00153	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00157	c1 e8 18	 shr	 eax, 24
  0015a	8b c8		 mov	 ecx, eax
  0015c	41 8b c0	 mov	 eax, r8d
  0015f	33 84 8a 00 1c
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+7168]
  00166	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  0016a	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  0016e	48 83 c0 04	 add	 rax, 4
  00172	48 89 04 24	 mov	 QWORD PTR buf4$[rsp], rax
  00176	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  0017a	8b 08		 mov	 ecx, DWORD PTR [rax]
  0017c	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00180	33 c1		 xor	 eax, ecx
  00182	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  00186	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:crc_table
  0018d	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00191	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00196	8b d0		 mov	 edx, eax
  00198	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  0019f	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  001a3	c1 e8 08	 shr	 eax, 8
  001a6	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001ab	8b c0		 mov	 eax, eax
  001ad	8b 84 81 00 14
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+5120]
  001b4	45 8b 84 90 00
	10 00 00	 mov	 r8d, DWORD PTR [r8+rdx*4+4096]
  001bc	44 33 c0	 xor	 r8d, eax
  001bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  001c6	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  001ca	c1 e8 10	 shr	 eax, 16
  001cd	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001d2	8b c0		 mov	 eax, eax
  001d4	44 33 84 81 00
	18 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+6144]
  001dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:crc_table
  001e3	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  001e7	c1 e8 18	 shr	 eax, 24
  001ea	8b c8		 mov	 ecx, eax
  001ec	41 8b c0	 mov	 eax, r8d
  001ef	33 84 8a 00 1c
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+7168]
  001f6	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  001fa	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  001fe	48 83 c0 04	 add	 rax, 4
  00202	48 89 04 24	 mov	 QWORD PTR buf4$[rsp], rax
  00206	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  0020a	8b 08		 mov	 ecx, DWORD PTR [rax]
  0020c	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00210	33 c1		 xor	 eax, ecx
  00212	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  00216	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:crc_table
  0021d	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00221	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00226	8b d0		 mov	 edx, eax
  00228	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  0022f	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00233	c1 e8 08	 shr	 eax, 8
  00236	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0023b	8b c0		 mov	 eax, eax
  0023d	8b 84 81 00 14
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+5120]
  00244	45 8b 84 90 00
	10 00 00	 mov	 r8d, DWORD PTR [r8+rdx*4+4096]
  0024c	44 33 c0	 xor	 r8d, eax
  0024f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  00256	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  0025a	c1 e8 10	 shr	 eax, 16
  0025d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00262	8b c0		 mov	 eax, eax
  00264	44 33 84 81 00
	18 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+6144]
  0026c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:crc_table
  00273	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00277	c1 e8 18	 shr	 eax, 24
  0027a	8b c8		 mov	 ecx, eax
  0027c	41 8b c0	 mov	 eax, r8d
  0027f	33 84 8a 00 1c
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+7168]
  00286	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  0028a	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  0028e	48 83 c0 04	 add	 rax, 4
  00292	48 89 04 24	 mov	 QWORD PTR buf4$[rsp], rax
  00296	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  0029a	8b 08		 mov	 ecx, DWORD PTR [rax]
  0029c	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  002a0	33 c1		 xor	 eax, ecx
  002a2	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  002a6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:crc_table
  002ad	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  002b1	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002b6	8b d0		 mov	 edx, eax
  002b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  002bf	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  002c3	c1 e8 08	 shr	 eax, 8
  002c6	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002cb	8b c0		 mov	 eax, eax
  002cd	8b 84 81 00 14
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+5120]
  002d4	45 8b 84 90 00
	10 00 00	 mov	 r8d, DWORD PTR [r8+rdx*4+4096]
  002dc	44 33 c0	 xor	 r8d, eax
  002df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  002e6	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  002ea	c1 e8 10	 shr	 eax, 16
  002ed	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002f2	8b c0		 mov	 eax, eax
  002f4	44 33 84 81 00
	18 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+6144]
  002fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:crc_table
  00303	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00307	c1 e8 18	 shr	 eax, 24
  0030a	8b c8		 mov	 ecx, eax
  0030c	41 8b c0	 mov	 eax, r8d
  0030f	33 84 8a 00 1c
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+7168]
  00316	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  0031a	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  0031e	48 83 c0 04	 add	 rax, 4
  00322	48 89 04 24	 mov	 QWORD PTR buf4$[rsp], rax
  00326	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  0032a	8b 08		 mov	 ecx, DWORD PTR [rax]
  0032c	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00330	33 c1		 xor	 eax, ecx
  00332	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  00336	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:crc_table
  0033d	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00341	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00346	8b d0		 mov	 edx, eax
  00348	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  0034f	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00353	c1 e8 08	 shr	 eax, 8
  00356	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0035b	8b c0		 mov	 eax, eax
  0035d	8b 84 81 00 14
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+5120]
  00364	45 8b 84 90 00
	10 00 00	 mov	 r8d, DWORD PTR [r8+rdx*4+4096]
  0036c	44 33 c0	 xor	 r8d, eax
  0036f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  00376	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  0037a	c1 e8 10	 shr	 eax, 16
  0037d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00382	8b c0		 mov	 eax, eax
  00384	44 33 84 81 00
	18 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+6144]
  0038c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:crc_table
  00393	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00397	c1 e8 18	 shr	 eax, 24
  0039a	8b c8		 mov	 ecx, eax
  0039c	41 8b c0	 mov	 eax, r8d
  0039f	33 84 8a 00 1c
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+7168]
  003a6	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  003aa	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  003ae	48 83 c0 04	 add	 rax, 4
  003b2	48 89 04 24	 mov	 QWORD PTR buf4$[rsp], rax
  003b6	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  003ba	8b 08		 mov	 ecx, DWORD PTR [rax]
  003bc	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  003c0	33 c1		 xor	 eax, ecx
  003c2	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  003c6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:crc_table
  003cd	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  003d1	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003d6	8b d0		 mov	 edx, eax
  003d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  003df	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  003e3	c1 e8 08	 shr	 eax, 8
  003e6	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003eb	8b c0		 mov	 eax, eax
  003ed	8b 84 81 00 14
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+5120]
  003f4	45 8b 84 90 00
	10 00 00	 mov	 r8d, DWORD PTR [r8+rdx*4+4096]
  003fc	44 33 c0	 xor	 r8d, eax
  003ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  00406	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  0040a	c1 e8 10	 shr	 eax, 16
  0040d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00412	8b c0		 mov	 eax, eax
  00414	44 33 84 81 00
	18 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+6144]
  0041c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:crc_table
  00423	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00427	c1 e8 18	 shr	 eax, 24
  0042a	8b c8		 mov	 ecx, eax
  0042c	41 8b c0	 mov	 eax, r8d
  0042f	33 84 8a 00 1c
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+7168]
  00436	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  0043a	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  0043e	48 83 c0 04	 add	 rax, 4
  00442	48 89 04 24	 mov	 QWORD PTR buf4$[rsp], rax
  00446	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  0044a	8b 08		 mov	 ecx, DWORD PTR [rax]
  0044c	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00450	33 c1		 xor	 eax, ecx
  00452	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  00456	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:crc_table
  0045d	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00461	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00466	8b d0		 mov	 edx, eax
  00468	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  0046f	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00473	c1 e8 08	 shr	 eax, 8
  00476	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0047b	8b c0		 mov	 eax, eax
  0047d	8b 84 81 00 14
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+5120]
  00484	45 8b 84 90 00
	10 00 00	 mov	 r8d, DWORD PTR [r8+rdx*4+4096]
  0048c	44 33 c0	 xor	 r8d, eax
  0048f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  00496	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  0049a	c1 e8 10	 shr	 eax, 16
  0049d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  004a2	8b c0		 mov	 eax, eax
  004a4	44 33 84 81 00
	18 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+6144]
  004ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:crc_table
  004b3	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  004b7	c1 e8 18	 shr	 eax, 24
  004ba	8b c8		 mov	 ecx, eax
  004bc	41 8b c0	 mov	 eax, r8d
  004bf	33 84 8a 00 1c
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+7168]
  004c6	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  004ca	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  004ce	48 83 c0 04	 add	 rax, 4
  004d2	48 89 04 24	 mov	 QWORD PTR buf4$[rsp], rax
  004d6	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  004da	8b 08		 mov	 ecx, DWORD PTR [rax]
  004dc	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  004e0	33 c1		 xor	 eax, ecx
  004e2	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  004e6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:crc_table
  004ed	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  004f1	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  004f6	8b d0		 mov	 edx, eax
  004f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  004ff	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00503	c1 e8 08	 shr	 eax, 8
  00506	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0050b	8b c0		 mov	 eax, eax
  0050d	8b 84 81 00 14
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+5120]
  00514	45 8b 84 90 00
	10 00 00	 mov	 r8d, DWORD PTR [r8+rdx*4+4096]
  0051c	44 33 c0	 xor	 r8d, eax
  0051f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  00526	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  0052a	c1 e8 10	 shr	 eax, 16
  0052d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00532	8b c0		 mov	 eax, eax
  00534	44 33 84 81 00
	18 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+6144]
  0053c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:crc_table
  00543	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00547	c1 e8 18	 shr	 eax, 24
  0054a	8b c8		 mov	 ecx, eax
  0054c	41 8b c0	 mov	 eax, r8d
  0054f	33 84 8a 00 1c
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+7168]
  00556	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax

; 323  :         len -= 32;

  0055a	8b 44 24 30	 mov	 eax, DWORD PTR len$[rsp]
  0055e	83 e8 20	 sub	 eax, 32			; 00000020H
  00561	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 324  :     }

  00565	e9 65 fb ff ff	 jmp	 $LN8@crc32_big
$LN7@crc32_big:
$LN6@crc32_big:

; 325  :     while (len >= 4) {

  0056a	83 7c 24 30 04	 cmp	 DWORD PTR len$[rsp], 4
  0056f	0f 82 a0 00 00
	00		 jb	 $LN5@crc32_big

; 326  :         DOBIG4;

  00575	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  00579	48 83 c0 04	 add	 rax, 4
  0057d	48 89 04 24	 mov	 QWORD PTR buf4$[rsp], rax
  00581	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  00585	8b 08		 mov	 ecx, DWORD PTR [rax]
  00587	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  0058b	33 c1		 xor	 eax, ecx
  0058d	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  00591	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:crc_table
  00598	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  0059c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  005a1	8b d0		 mov	 edx, eax
  005a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  005aa	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  005ae	c1 e8 08	 shr	 eax, 8
  005b1	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  005b6	8b c0		 mov	 eax, eax
  005b8	8b 84 81 00 14
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+5120]
  005bf	45 8b 84 90 00
	10 00 00	 mov	 r8d, DWORD PTR [r8+rdx*4+4096]
  005c7	44 33 c0	 xor	 r8d, eax
  005ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  005d1	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  005d5	c1 e8 10	 shr	 eax, 16
  005d8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  005dd	8b c0		 mov	 eax, eax
  005df	44 33 84 81 00
	18 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+6144]
  005e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:crc_table
  005ee	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  005f2	c1 e8 18	 shr	 eax, 24
  005f5	8b c8		 mov	 ecx, eax
  005f7	41 8b c0	 mov	 eax, r8d
  005fa	33 84 8a 00 1c
	00 00		 xor	 eax, DWORD PTR [rdx+rcx*4+7168]
  00601	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax

; 327  :         len -= 4;

  00605	8b 44 24 30	 mov	 eax, DWORD PTR len$[rsp]
  00609	83 e8 04	 sub	 eax, 4
  0060c	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 328  :     }

  00610	e9 55 ff ff ff	 jmp	 $LN6@crc32_big
$LN5@crc32_big:

; 329  :     buf4++;

  00615	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  00619	48 83 c0 04	 add	 rax, 4
  0061d	48 89 04 24	 mov	 QWORD PTR buf4$[rsp], rax

; 330  :     buf = (const unsigned char FAR *)buf4;

  00621	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  00625	48 89 44 24 28	 mov	 QWORD PTR buf$[rsp], rax

; 331  : 
; 332  :     if (len) do {

  0062a	83 7c 24 30 00	 cmp	 DWORD PTR len$[rsp], 0
  0062f	74 51		 je	 SHORT $LN4@crc32_big
$LN3@crc32_big:

; 333  :         c = crc_table[4][(c >> 24) ^ *buf++] ^ (c << 8);

  00631	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:crc_table
  00638	8b 54 24 08	 mov	 edx, DWORD PTR c$[rsp]
  0063c	c1 ea 18	 shr	 edx, 24
  0063f	48 8b 44 24 28	 mov	 rax, QWORD PTR buf$[rsp]
  00644	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00647	8b c2		 mov	 eax, edx
  00649	33 c1		 xor	 eax, ecx
  0064b	8b c0		 mov	 eax, eax
  0064d	8b 4c 24 08	 mov	 ecx, DWORD PTR c$[rsp]
  00651	c1 e1 08	 shl	 ecx, 8
  00654	41 8b 84 80 00
	10 00 00	 mov	 eax, DWORD PTR [r8+rax*4+4096]
  0065c	33 c1		 xor	 eax, ecx
  0065e	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  00662	48 8b 44 24 28	 mov	 rax, QWORD PTR buf$[rsp]
  00667	48 83 c0 01	 add	 rax, 1
  0066b	48 89 44 24 28	 mov	 QWORD PTR buf$[rsp], rax

; 334  :     } while (--len);

  00670	8b 44 24 30	 mov	 eax, DWORD PTR len$[rsp]
  00674	83 e8 01	 sub	 eax, 1
  00677	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax
  0067b	83 7c 24 30 00	 cmp	 DWORD PTR len$[rsp], 0
  00680	75 af		 jne	 SHORT $LN3@crc32_big
$LN4@crc32_big:

; 335  :     c = ~c;

  00682	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00686	f7 d0		 not	 eax
  00688	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax

; 336  :     return (unsigned long)(REV(c));

  0068c	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00690	c1 e8 18	 shr	 eax, 24
  00693	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00698	8b 4c 24 08	 mov	 ecx, DWORD PTR c$[rsp]
  0069c	c1 e9 08	 shr	 ecx, 8
  0069f	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  006a5	03 c1		 add	 eax, ecx
  006a7	8b 4c 24 08	 mov	 ecx, DWORD PTR c$[rsp]
  006ab	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  006b1	c1 e1 08	 shl	 ecx, 8
  006b4	03 c1		 add	 eax, ecx
  006b6	8b 4c 24 08	 mov	 ecx, DWORD PTR c$[rsp]
  006ba	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  006c0	c1 e1 18	 shl	 ecx, 24
  006c3	03 c1		 add	 eax, ecx

; 337  : }

  006c5	48 83 c4 18	 add	 rsp, 24
  006c9	c3		 ret	 0
crc32_big ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$crc32_little DD imagerel crc32_little
	DD	imagerel crc32_little+1562
	DD	imagerel $unwind$crc32_little
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$crc32_little DD 011201H
	DD	02212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT crc32_little
_TEXT	SEGMENT
buf4$ = 0
c$ = 8
crc$ = 32
buf$ = 40
len$ = 48
crc32_little PROC					; COMDAT

; 268  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 18	 sub	 rsp, 24

; 269  :     register u4 c;
; 270  :     register const u4 FAR *buf4;
; 271  : 
; 272  :     c = (u4)crc;

  00012	8b 44 24 20	 mov	 eax, DWORD PTR crc$[rsp]
  00016	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax

; 273  :     c = ~c;

  0001a	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  0001e	f7 d0		 not	 eax
  00020	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
$LN10@crc32_litt:

; 274  :     while (len && ((ptrdiff_t)buf & 3)) {

  00024	83 7c 24 30 00	 cmp	 DWORD PTR len$[rsp], 0
  00029	74 55		 je	 SHORT $LN9@crc32_litt
  0002b	48 8b 44 24 28	 mov	 rax, QWORD PTR buf$[rsp]
  00030	48 83 e0 03	 and	 rax, 3
  00034	48 85 c0	 test	 rax, rax
  00037	74 47		 je	 SHORT $LN9@crc32_litt

; 275  :         c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);

  00039	48 8b 44 24 28	 mov	 rax, QWORD PTR buf$[rsp]
  0003e	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00041	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00045	33 c1		 xor	 eax, ecx
  00047	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0004c	8b d0		 mov	 edx, eax
  0004e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:crc_table
  00055	8b 4c 24 08	 mov	 ecx, DWORD PTR c$[rsp]
  00059	c1 e9 08	 shr	 ecx, 8
  0005c	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  0005f	33 c1		 xor	 eax, ecx
  00061	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  00065	48 8b 44 24 28	 mov	 rax, QWORD PTR buf$[rsp]
  0006a	48 83 c0 01	 add	 rax, 1
  0006e	48 89 44 24 28	 mov	 QWORD PTR buf$[rsp], rax

; 276  :         len--;

  00073	8b 44 24 30	 mov	 eax, DWORD PTR len$[rsp]
  00077	83 e8 01	 sub	 eax, 1
  0007a	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 277  :     }

  0007e	eb a4		 jmp	 SHORT $LN10@crc32_litt
$LN9@crc32_litt:

; 278  : 
; 279  :     buf4 = (const u4 FAR *)(const void FAR *)buf;

  00080	48 8b 44 24 28	 mov	 rax, QWORD PTR buf$[rsp]
  00085	48 89 04 24	 mov	 QWORD PTR buf4$[rsp], rax
$LN8@crc32_litt:

; 280  :     while (len >= 32) {

  00089	83 7c 24 30 20	 cmp	 DWORD PTR len$[rsp], 32	; 00000020H
  0008e	0f 82 70 04 00
	00		 jb	 $LN7@crc32_litt

; 281  :         DOLIT32;

  00094	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  00098	8b 08		 mov	 ecx, DWORD PTR [rax]
  0009a	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  0009e	33 c1		 xor	 eax, ecx
  000a0	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  000a4	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  000a8	48 83 c0 04	 add	 rax, 4
  000ac	48 89 04 24	 mov	 QWORD PTR buf4$[rsp], rax
  000b0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:crc_table
  000b7	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  000bb	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000c0	8b d0		 mov	 edx, eax
  000c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  000c9	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  000cd	c1 e8 08	 shr	 eax, 8
  000d0	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000d5	8b c0		 mov	 eax, eax
  000d7	8b 84 81 00 08
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+2048]
  000de	45 8b 84 90 00
	0c 00 00	 mov	 r8d, DWORD PTR [r8+rdx*4+3072]
  000e6	44 33 c0	 xor	 r8d, eax
  000e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  000f0	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  000f4	c1 e8 10	 shr	 eax, 16
  000f7	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000fc	8b c0		 mov	 eax, eax
  000fe	44 33 84 81 00
	04 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+1024]
  00106	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  0010a	c1 e8 18	 shr	 eax, 24
  0010d	8b d0		 mov	 edx, eax
  0010f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  00116	41 8b c0	 mov	 eax, r8d
  00119	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  0011c	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  00120	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  00124	8b 08		 mov	 ecx, DWORD PTR [rax]
  00126	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  0012a	33 c1		 xor	 eax, ecx
  0012c	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  00130	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  00134	48 83 c0 04	 add	 rax, 4
  00138	48 89 04 24	 mov	 QWORD PTR buf4$[rsp], rax
  0013c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:crc_table
  00143	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00147	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0014c	8b d0		 mov	 edx, eax
  0014e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  00155	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00159	c1 e8 08	 shr	 eax, 8
  0015c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00161	8b c0		 mov	 eax, eax
  00163	8b 84 81 00 08
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+2048]
  0016a	45 8b 84 90 00
	0c 00 00	 mov	 r8d, DWORD PTR [r8+rdx*4+3072]
  00172	44 33 c0	 xor	 r8d, eax
  00175	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  0017c	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00180	c1 e8 10	 shr	 eax, 16
  00183	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00188	8b c0		 mov	 eax, eax
  0018a	44 33 84 81 00
	04 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+1024]
  00192	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00196	c1 e8 18	 shr	 eax, 24
  00199	8b d0		 mov	 edx, eax
  0019b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  001a2	41 8b c0	 mov	 eax, r8d
  001a5	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  001a8	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  001ac	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  001b0	8b 08		 mov	 ecx, DWORD PTR [rax]
  001b2	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  001b6	33 c1		 xor	 eax, ecx
  001b8	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  001bc	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  001c0	48 83 c0 04	 add	 rax, 4
  001c4	48 89 04 24	 mov	 QWORD PTR buf4$[rsp], rax
  001c8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:crc_table
  001cf	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  001d3	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001d8	8b d0		 mov	 edx, eax
  001da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  001e1	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  001e5	c1 e8 08	 shr	 eax, 8
  001e8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001ed	8b c0		 mov	 eax, eax
  001ef	8b 84 81 00 08
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+2048]
  001f6	45 8b 84 90 00
	0c 00 00	 mov	 r8d, DWORD PTR [r8+rdx*4+3072]
  001fe	44 33 c0	 xor	 r8d, eax
  00201	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  00208	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  0020c	c1 e8 10	 shr	 eax, 16
  0020f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00214	8b c0		 mov	 eax, eax
  00216	44 33 84 81 00
	04 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+1024]
  0021e	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00222	c1 e8 18	 shr	 eax, 24
  00225	8b d0		 mov	 edx, eax
  00227	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  0022e	41 8b c0	 mov	 eax, r8d
  00231	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00234	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  00238	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  0023c	8b 08		 mov	 ecx, DWORD PTR [rax]
  0023e	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00242	33 c1		 xor	 eax, ecx
  00244	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  00248	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  0024c	48 83 c0 04	 add	 rax, 4
  00250	48 89 04 24	 mov	 QWORD PTR buf4$[rsp], rax
  00254	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:crc_table
  0025b	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  0025f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00264	8b d0		 mov	 edx, eax
  00266	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  0026d	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00271	c1 e8 08	 shr	 eax, 8
  00274	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00279	8b c0		 mov	 eax, eax
  0027b	8b 84 81 00 08
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+2048]
  00282	45 8b 84 90 00
	0c 00 00	 mov	 r8d, DWORD PTR [r8+rdx*4+3072]
  0028a	44 33 c0	 xor	 r8d, eax
  0028d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  00294	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00298	c1 e8 10	 shr	 eax, 16
  0029b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002a0	8b c0		 mov	 eax, eax
  002a2	44 33 84 81 00
	04 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+1024]
  002aa	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  002ae	c1 e8 18	 shr	 eax, 24
  002b1	8b d0		 mov	 edx, eax
  002b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  002ba	41 8b c0	 mov	 eax, r8d
  002bd	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  002c0	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  002c4	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  002c8	8b 08		 mov	 ecx, DWORD PTR [rax]
  002ca	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  002ce	33 c1		 xor	 eax, ecx
  002d0	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  002d4	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  002d8	48 83 c0 04	 add	 rax, 4
  002dc	48 89 04 24	 mov	 QWORD PTR buf4$[rsp], rax
  002e0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:crc_table
  002e7	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  002eb	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002f0	8b d0		 mov	 edx, eax
  002f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  002f9	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  002fd	c1 e8 08	 shr	 eax, 8
  00300	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00305	8b c0		 mov	 eax, eax
  00307	8b 84 81 00 08
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+2048]
  0030e	45 8b 84 90 00
	0c 00 00	 mov	 r8d, DWORD PTR [r8+rdx*4+3072]
  00316	44 33 c0	 xor	 r8d, eax
  00319	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  00320	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00324	c1 e8 10	 shr	 eax, 16
  00327	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0032c	8b c0		 mov	 eax, eax
  0032e	44 33 84 81 00
	04 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+1024]
  00336	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  0033a	c1 e8 18	 shr	 eax, 24
  0033d	8b d0		 mov	 edx, eax
  0033f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  00346	41 8b c0	 mov	 eax, r8d
  00349	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  0034c	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  00350	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  00354	8b 08		 mov	 ecx, DWORD PTR [rax]
  00356	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  0035a	33 c1		 xor	 eax, ecx
  0035c	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  00360	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  00364	48 83 c0 04	 add	 rax, 4
  00368	48 89 04 24	 mov	 QWORD PTR buf4$[rsp], rax
  0036c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:crc_table
  00373	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00377	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0037c	8b d0		 mov	 edx, eax
  0037e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  00385	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00389	c1 e8 08	 shr	 eax, 8
  0038c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00391	8b c0		 mov	 eax, eax
  00393	8b 84 81 00 08
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+2048]
  0039a	45 8b 84 90 00
	0c 00 00	 mov	 r8d, DWORD PTR [r8+rdx*4+3072]
  003a2	44 33 c0	 xor	 r8d, eax
  003a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  003ac	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  003b0	c1 e8 10	 shr	 eax, 16
  003b3	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003b8	8b c0		 mov	 eax, eax
  003ba	44 33 84 81 00
	04 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+1024]
  003c2	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  003c6	c1 e8 18	 shr	 eax, 24
  003c9	8b d0		 mov	 edx, eax
  003cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  003d2	41 8b c0	 mov	 eax, r8d
  003d5	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  003d8	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  003dc	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  003e0	8b 08		 mov	 ecx, DWORD PTR [rax]
  003e2	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  003e6	33 c1		 xor	 eax, ecx
  003e8	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  003ec	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  003f0	48 83 c0 04	 add	 rax, 4
  003f4	48 89 04 24	 mov	 QWORD PTR buf4$[rsp], rax
  003f8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:crc_table
  003ff	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00403	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00408	8b d0		 mov	 edx, eax
  0040a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  00411	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00415	c1 e8 08	 shr	 eax, 8
  00418	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0041d	8b c0		 mov	 eax, eax
  0041f	8b 84 81 00 08
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+2048]
  00426	45 8b 84 90 00
	0c 00 00	 mov	 r8d, DWORD PTR [r8+rdx*4+3072]
  0042e	44 33 c0	 xor	 r8d, eax
  00431	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  00438	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  0043c	c1 e8 10	 shr	 eax, 16
  0043f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00444	8b c0		 mov	 eax, eax
  00446	44 33 84 81 00
	04 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+1024]
  0044e	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00452	c1 e8 18	 shr	 eax, 24
  00455	8b d0		 mov	 edx, eax
  00457	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  0045e	41 8b c0	 mov	 eax, r8d
  00461	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00464	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  00468	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  0046c	8b 08		 mov	 ecx, DWORD PTR [rax]
  0046e	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00472	33 c1		 xor	 eax, ecx
  00474	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  00478	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  0047c	48 83 c0 04	 add	 rax, 4
  00480	48 89 04 24	 mov	 QWORD PTR buf4$[rsp], rax
  00484	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:crc_table
  0048b	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  0048f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00494	8b d0		 mov	 edx, eax
  00496	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  0049d	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  004a1	c1 e8 08	 shr	 eax, 8
  004a4	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  004a9	8b c0		 mov	 eax, eax
  004ab	8b 84 81 00 08
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+2048]
  004b2	45 8b 84 90 00
	0c 00 00	 mov	 r8d, DWORD PTR [r8+rdx*4+3072]
  004ba	44 33 c0	 xor	 r8d, eax
  004bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  004c4	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  004c8	c1 e8 10	 shr	 eax, 16
  004cb	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  004d0	8b c0		 mov	 eax, eax
  004d2	44 33 84 81 00
	04 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+1024]
  004da	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  004de	c1 e8 18	 shr	 eax, 24
  004e1	8b d0		 mov	 edx, eax
  004e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  004ea	41 8b c0	 mov	 eax, r8d
  004ed	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  004f0	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax

; 282  :         len -= 32;

  004f4	8b 44 24 30	 mov	 eax, DWORD PTR len$[rsp]
  004f8	83 e8 20	 sub	 eax, 32			; 00000020H
  004fb	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 283  :     }

  004ff	e9 85 fb ff ff	 jmp	 $LN8@crc32_litt
$LN7@crc32_litt:
$LN6@crc32_litt:

; 284  :     while (len >= 4) {

  00504	83 7c 24 30 04	 cmp	 DWORD PTR len$[rsp], 4
  00509	0f 82 9c 00 00
	00		 jb	 $LN5@crc32_litt

; 285  :         DOLIT4;

  0050f	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  00513	8b 08		 mov	 ecx, DWORD PTR [rax]
  00515	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00519	33 c1		 xor	 eax, ecx
  0051b	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  0051f	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  00523	48 83 c0 04	 add	 rax, 4
  00527	48 89 04 24	 mov	 QWORD PTR buf4$[rsp], rax
  0052b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:crc_table
  00532	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00536	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0053b	8b d0		 mov	 edx, eax
  0053d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  00544	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00548	c1 e8 08	 shr	 eax, 8
  0054b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00550	8b c0		 mov	 eax, eax
  00552	8b 84 81 00 08
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+2048]
  00559	45 8b 84 90 00
	0c 00 00	 mov	 r8d, DWORD PTR [r8+rdx*4+3072]
  00561	44 33 c0	 xor	 r8d, eax
  00564	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  0056b	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  0056f	c1 e8 10	 shr	 eax, 16
  00572	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00577	8b c0		 mov	 eax, eax
  00579	44 33 84 81 00
	04 00 00	 xor	 r8d, DWORD PTR [rcx+rax*4+1024]
  00581	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  00585	c1 e8 18	 shr	 eax, 24
  00588	8b d0		 mov	 edx, eax
  0058a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:crc_table
  00591	41 8b c0	 mov	 eax, r8d
  00594	33 04 91	 xor	 eax, DWORD PTR [rcx+rdx*4]
  00597	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax

; 286  :         len -= 4;

  0059b	8b 44 24 30	 mov	 eax, DWORD PTR len$[rsp]
  0059f	83 e8 04	 sub	 eax, 4
  005a2	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 287  :     }

  005a6	e9 59 ff ff ff	 jmp	 $LN6@crc32_litt
$LN5@crc32_litt:

; 288  :     buf = (const unsigned char FAR *)buf4;

  005ab	48 8b 04 24	 mov	 rax, QWORD PTR buf4$[rsp]
  005af	48 89 44 24 28	 mov	 QWORD PTR buf$[rsp], rax

; 289  : 
; 290  :     if (len) do {

  005b4	83 7c 24 30 00	 cmp	 DWORD PTR len$[rsp], 0
  005b9	74 4c		 je	 SHORT $LN4@crc32_litt
$LN3@crc32_litt:

; 291  :         c = crc_table[0][(c ^ *buf++) & 0xff] ^ (c >> 8);

  005bb	48 8b 44 24 28	 mov	 rax, QWORD PTR buf$[rsp]
  005c0	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  005c3	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  005c7	33 c1		 xor	 eax, ecx
  005c9	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  005ce	8b d0		 mov	 edx, eax
  005d0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:crc_table
  005d7	8b 4c 24 08	 mov	 ecx, DWORD PTR c$[rsp]
  005db	c1 e9 08	 shr	 ecx, 8
  005de	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  005e1	33 c1		 xor	 eax, ecx
  005e3	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax
  005e7	48 8b 44 24 28	 mov	 rax, QWORD PTR buf$[rsp]
  005ec	48 83 c0 01	 add	 rax, 1
  005f0	48 89 44 24 28	 mov	 QWORD PTR buf$[rsp], rax

; 292  :     } while (--len);

  005f5	8b 44 24 30	 mov	 eax, DWORD PTR len$[rsp]
  005f9	83 e8 01	 sub	 eax, 1
  005fc	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax
  00600	83 7c 24 30 00	 cmp	 DWORD PTR len$[rsp], 0
  00605	75 b4		 jne	 SHORT $LN3@crc32_litt
$LN4@crc32_litt:

; 293  :     c = ~c;

  00607	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]
  0060b	f7 d0		 not	 eax
  0060d	89 44 24 08	 mov	 DWORD PTR c$[rsp], eax

; 294  :     return (unsigned long)c;

  00611	8b 44 24 08	 mov	 eax, DWORD PTR c$[rsp]

; 295  : }

  00615	48 83 c4 18	 add	 rsp, 24
  00619	c3		 ret	 0
crc32_little ENDP
_TEXT	ENDS
PUBLIC	crc32
;	COMDAT pdata
pdata	SEGMENT
$pdata$crc32 DD	imagerel $LN13
	DD	imagerel $LN13+713
	DD	imagerel $unwind$crc32
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$crc32 DD 011201H
	DD	06212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT crc32
_TEXT	SEGMENT
endian$78075 = 32
crc$ = 64
buf$ = 72
len$ = 80
crc32	PROC						; COMDAT

; 225  : {

$LN13:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 226  :     if (buf == Z_NULL) return 0UL;

  00012	48 83 7c 24 48
	00		 cmp	 QWORD PTR buf$[rsp], 0
  00018	75 07		 jne	 SHORT $LN10@crc32
  0001a	33 c0		 xor	 eax, eax
  0001c	e9 a3 02 00 00	 jmp	 $LN11@crc32
$LN10@crc32:

; 227  : 
; 228  : #ifdef DYNAMIC_CRC_TABLE
; 229  :     if (crc_table_empty)
; 230  :         make_crc_table();
; 231  : #endif /* DYNAMIC_CRC_TABLE */
; 232  : 
; 233  : #ifdef BYFOUR
; 234  :     if (sizeof(void *) == sizeof(ptrdiff_t)) {

  00021	33 c0		 xor	 eax, eax
  00023	83 f8 01	 cmp	 eax, 1
  00026	74 43		 je	 SHORT $LN9@crc32

; 235  :         u4 endian;
; 236  : 
; 237  :         endian = 1;

  00028	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR endian$78075[rsp], 1

; 238  :         if (*((unsigned char *)(&endian)))

  00030	0f b6 44 24 20	 movzx	 eax, BYTE PTR endian$78075[rsp]
  00035	85 c0		 test	 eax, eax
  00037	74 1a		 je	 SHORT $LN8@crc32

; 239  :             return crc32_little(crc, buf, len);

  00039	44 8b 44 24 50	 mov	 r8d, DWORD PTR len$[rsp]
  0003e	48 8b 54 24 48	 mov	 rdx, QWORD PTR buf$[rsp]
  00043	8b 4c 24 40	 mov	 ecx, DWORD PTR crc$[rsp]
  00047	e8 00 00 00 00	 call	 crc32_little
  0004c	e9 73 02 00 00	 jmp	 $LN11@crc32

; 240  :         else

  00051	eb 18		 jmp	 SHORT $LN7@crc32
$LN8@crc32:

; 241  :             return crc32_big(crc, buf, len);

  00053	44 8b 44 24 50	 mov	 r8d, DWORD PTR len$[rsp]
  00058	48 8b 54 24 48	 mov	 rdx, QWORD PTR buf$[rsp]
  0005d	8b 4c 24 40	 mov	 ecx, DWORD PTR crc$[rsp]
  00061	e8 00 00 00 00	 call	 crc32_big
  00066	e9 59 02 00 00	 jmp	 $LN11@crc32
$LN7@crc32:
$LN9@crc32:

; 242  :     }
; 243  : #endif /* BYFOUR */
; 244  :     crc = crc ^ 0xffffffffUL;

  0006b	8b 44 24 40	 mov	 eax, DWORD PTR crc$[rsp]
  0006f	83 f0 ff	 xor	 eax, -1			; ffffffffH
  00072	89 44 24 40	 mov	 DWORD PTR crc$[rsp], eax
$LN6@crc32:

; 245  :     while (len >= 8) {

  00076	83 7c 24 50 08	 cmp	 DWORD PTR len$[rsp], 8
  0007b	0f 82 e8 01 00
	00		 jb	 $LN5@crc32

; 246  :         DO8;

  00081	48 8b 44 24 48	 mov	 rax, QWORD PTR buf$[rsp]
  00086	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00089	8b 44 24 40	 mov	 eax, DWORD PTR crc$[rsp]
  0008d	33 c1		 xor	 eax, ecx
  0008f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00094	48 63 d0	 movsxd	 rdx, eax
  00097	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:crc_table
  0009e	8b 4c 24 40	 mov	 ecx, DWORD PTR crc$[rsp]
  000a2	c1 e9 08	 shr	 ecx, 8
  000a5	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  000a8	33 c1		 xor	 eax, ecx
  000aa	89 44 24 40	 mov	 DWORD PTR crc$[rsp], eax
  000ae	48 8b 44 24 48	 mov	 rax, QWORD PTR buf$[rsp]
  000b3	48 83 c0 01	 add	 rax, 1
  000b7	48 89 44 24 48	 mov	 QWORD PTR buf$[rsp], rax
  000bc	48 8b 44 24 48	 mov	 rax, QWORD PTR buf$[rsp]
  000c1	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  000c4	8b 44 24 40	 mov	 eax, DWORD PTR crc$[rsp]
  000c8	33 c1		 xor	 eax, ecx
  000ca	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000cf	48 63 d0	 movsxd	 rdx, eax
  000d2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:crc_table
  000d9	8b 4c 24 40	 mov	 ecx, DWORD PTR crc$[rsp]
  000dd	c1 e9 08	 shr	 ecx, 8
  000e0	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  000e3	33 c1		 xor	 eax, ecx
  000e5	89 44 24 40	 mov	 DWORD PTR crc$[rsp], eax
  000e9	48 8b 44 24 48	 mov	 rax, QWORD PTR buf$[rsp]
  000ee	48 83 c0 01	 add	 rax, 1
  000f2	48 89 44 24 48	 mov	 QWORD PTR buf$[rsp], rax
  000f7	48 8b 44 24 48	 mov	 rax, QWORD PTR buf$[rsp]
  000fc	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  000ff	8b 44 24 40	 mov	 eax, DWORD PTR crc$[rsp]
  00103	33 c1		 xor	 eax, ecx
  00105	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0010a	48 63 d0	 movsxd	 rdx, eax
  0010d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:crc_table
  00114	8b 4c 24 40	 mov	 ecx, DWORD PTR crc$[rsp]
  00118	c1 e9 08	 shr	 ecx, 8
  0011b	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  0011e	33 c1		 xor	 eax, ecx
  00120	89 44 24 40	 mov	 DWORD PTR crc$[rsp], eax
  00124	48 8b 44 24 48	 mov	 rax, QWORD PTR buf$[rsp]
  00129	48 83 c0 01	 add	 rax, 1
  0012d	48 89 44 24 48	 mov	 QWORD PTR buf$[rsp], rax
  00132	48 8b 44 24 48	 mov	 rax, QWORD PTR buf$[rsp]
  00137	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  0013a	8b 44 24 40	 mov	 eax, DWORD PTR crc$[rsp]
  0013e	33 c1		 xor	 eax, ecx
  00140	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00145	48 63 d0	 movsxd	 rdx, eax
  00148	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:crc_table
  0014f	8b 4c 24 40	 mov	 ecx, DWORD PTR crc$[rsp]
  00153	c1 e9 08	 shr	 ecx, 8
  00156	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00159	33 c1		 xor	 eax, ecx
  0015b	89 44 24 40	 mov	 DWORD PTR crc$[rsp], eax
  0015f	48 8b 44 24 48	 mov	 rax, QWORD PTR buf$[rsp]
  00164	48 83 c0 01	 add	 rax, 1
  00168	48 89 44 24 48	 mov	 QWORD PTR buf$[rsp], rax
  0016d	48 8b 44 24 48	 mov	 rax, QWORD PTR buf$[rsp]
  00172	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00175	8b 44 24 40	 mov	 eax, DWORD PTR crc$[rsp]
  00179	33 c1		 xor	 eax, ecx
  0017b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00180	48 63 d0	 movsxd	 rdx, eax
  00183	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:crc_table
  0018a	8b 4c 24 40	 mov	 ecx, DWORD PTR crc$[rsp]
  0018e	c1 e9 08	 shr	 ecx, 8
  00191	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00194	33 c1		 xor	 eax, ecx
  00196	89 44 24 40	 mov	 DWORD PTR crc$[rsp], eax
  0019a	48 8b 44 24 48	 mov	 rax, QWORD PTR buf$[rsp]
  0019f	48 83 c0 01	 add	 rax, 1
  001a3	48 89 44 24 48	 mov	 QWORD PTR buf$[rsp], rax
  001a8	48 8b 44 24 48	 mov	 rax, QWORD PTR buf$[rsp]
  001ad	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  001b0	8b 44 24 40	 mov	 eax, DWORD PTR crc$[rsp]
  001b4	33 c1		 xor	 eax, ecx
  001b6	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001bb	48 63 d0	 movsxd	 rdx, eax
  001be	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:crc_table
  001c5	8b 4c 24 40	 mov	 ecx, DWORD PTR crc$[rsp]
  001c9	c1 e9 08	 shr	 ecx, 8
  001cc	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  001cf	33 c1		 xor	 eax, ecx
  001d1	89 44 24 40	 mov	 DWORD PTR crc$[rsp], eax
  001d5	48 8b 44 24 48	 mov	 rax, QWORD PTR buf$[rsp]
  001da	48 83 c0 01	 add	 rax, 1
  001de	48 89 44 24 48	 mov	 QWORD PTR buf$[rsp], rax
  001e3	48 8b 44 24 48	 mov	 rax, QWORD PTR buf$[rsp]
  001e8	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  001eb	8b 44 24 40	 mov	 eax, DWORD PTR crc$[rsp]
  001ef	33 c1		 xor	 eax, ecx
  001f1	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001f6	48 63 d0	 movsxd	 rdx, eax
  001f9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:crc_table
  00200	8b 4c 24 40	 mov	 ecx, DWORD PTR crc$[rsp]
  00204	c1 e9 08	 shr	 ecx, 8
  00207	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  0020a	33 c1		 xor	 eax, ecx
  0020c	89 44 24 40	 mov	 DWORD PTR crc$[rsp], eax
  00210	48 8b 44 24 48	 mov	 rax, QWORD PTR buf$[rsp]
  00215	48 83 c0 01	 add	 rax, 1
  00219	48 89 44 24 48	 mov	 QWORD PTR buf$[rsp], rax
  0021e	48 8b 44 24 48	 mov	 rax, QWORD PTR buf$[rsp]
  00223	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00226	8b 44 24 40	 mov	 eax, DWORD PTR crc$[rsp]
  0022a	33 c1		 xor	 eax, ecx
  0022c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00231	48 63 d0	 movsxd	 rdx, eax
  00234	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:crc_table
  0023b	8b 4c 24 40	 mov	 ecx, DWORD PTR crc$[rsp]
  0023f	c1 e9 08	 shr	 ecx, 8
  00242	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00245	33 c1		 xor	 eax, ecx
  00247	89 44 24 40	 mov	 DWORD PTR crc$[rsp], eax
  0024b	48 8b 44 24 48	 mov	 rax, QWORD PTR buf$[rsp]
  00250	48 83 c0 01	 add	 rax, 1
  00254	48 89 44 24 48	 mov	 QWORD PTR buf$[rsp], rax

; 247  :         len -= 8;

  00259	8b 44 24 50	 mov	 eax, DWORD PTR len$[rsp]
  0025d	83 e8 08	 sub	 eax, 8
  00260	89 44 24 50	 mov	 DWORD PTR len$[rsp], eax

; 248  :     }

  00264	e9 0d fe ff ff	 jmp	 $LN6@crc32
$LN5@crc32:

; 249  :     if (len) do {

  00269	83 7c 24 50 00	 cmp	 DWORD PTR len$[rsp], 0
  0026e	74 4d		 je	 SHORT $LN4@crc32
$LN3@crc32:

; 250  :         DO1;

  00270	48 8b 44 24 48	 mov	 rax, QWORD PTR buf$[rsp]
  00275	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00278	8b 44 24 40	 mov	 eax, DWORD PTR crc$[rsp]
  0027c	33 c1		 xor	 eax, ecx
  0027e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00283	48 63 d0	 movsxd	 rdx, eax
  00286	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:crc_table
  0028d	8b 4c 24 40	 mov	 ecx, DWORD PTR crc$[rsp]
  00291	c1 e9 08	 shr	 ecx, 8
  00294	8b 04 90	 mov	 eax, DWORD PTR [rax+rdx*4]
  00297	33 c1		 xor	 eax, ecx
  00299	89 44 24 40	 mov	 DWORD PTR crc$[rsp], eax
  0029d	48 8b 44 24 48	 mov	 rax, QWORD PTR buf$[rsp]
  002a2	48 83 c0 01	 add	 rax, 1
  002a6	48 89 44 24 48	 mov	 QWORD PTR buf$[rsp], rax

; 251  :     } while (--len);

  002ab	8b 44 24 50	 mov	 eax, DWORD PTR len$[rsp]
  002af	83 e8 01	 sub	 eax, 1
  002b2	89 44 24 50	 mov	 DWORD PTR len$[rsp], eax
  002b6	83 7c 24 50 00	 cmp	 DWORD PTR len$[rsp], 0
  002bb	75 b3		 jne	 SHORT $LN3@crc32
$LN4@crc32:

; 252  :     return crc ^ 0xffffffffUL;

  002bd	8b 44 24 40	 mov	 eax, DWORD PTR crc$[rsp]
  002c1	83 f0 ff	 xor	 eax, -1			; ffffffffH
$LN11@crc32:

; 253  : }

  002c4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  002c8	c3		 ret	 0
crc32	ENDP
_TEXT	ENDS
PUBLIC	get_crc_table
; Function compile flags: /Odtp
;	COMDAT get_crc_table
_TEXT	SEGMENT
get_crc_table PROC					; COMDAT

; 209  : #ifdef DYNAMIC_CRC_TABLE
; 210  :     if (crc_table_empty)
; 211  :         make_crc_table();
; 212  : #endif /* DYNAMIC_CRC_TABLE */
; 213  :     return (const unsigned long FAR *)crc_table;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:crc_table

; 214  : }

  00007	c3		 ret	 0
get_crc_table ENDP
;	COMDAT pdata
pdata	SEGMENT
$pdata$gf2_matrix_square DD imagerel gf2_matrix_square
	DD	imagerel gf2_matrix_square+89
	DD	imagerel $unwind$gf2_matrix_square
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gf2_matrix_square DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT gf2_matrix_square
_TEXT	SEGMENT
n$ = 32
square$ = 64
mat$ = 72
gf2_matrix_square PROC					; COMDAT

; 364  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 365  :     int n;
; 366  : 
; 367  :     for (n = 0; n < GF2_DIM; n++)

  0000e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  00016	eb 0b		 jmp	 SHORT $LN3@gf2_matrix@2
$LN2@gf2_matrix@2:
  00018	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  0001c	83 c0 01	 add	 eax, 1
  0001f	89 44 24 20	 mov	 DWORD PTR n$[rsp], eax
$LN3@gf2_matrix@2:
  00023	83 7c 24 20 20	 cmp	 DWORD PTR n$[rsp], 32	; 00000020H
  00028	7d 2a		 jge	 SHORT $LN1@gf2_matrix@2

; 368  :         square[n] = gf2_matrix_times(mat, mat[n]);

  0002a	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR n$[rsp]
  0002f	48 8b 44 24 48	 mov	 rax, QWORD PTR mat$[rsp]
  00034	8b 14 88	 mov	 edx, DWORD PTR [rax+rcx*4]
  00037	48 8b 4c 24 48	 mov	 rcx, QWORD PTR mat$[rsp]
  0003c	e8 00 00 00 00	 call	 gf2_matrix_times
  00041	44 8b d8	 mov	 r11d, eax
  00044	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR n$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR square$[rsp]
  0004e	44 89 1c 88	 mov	 DWORD PTR [rax+rcx*4], r11d
  00052	eb c4		 jmp	 SHORT $LN2@gf2_matrix@2
$LN1@gf2_matrix@2:

; 369  : }

  00054	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00058	c3		 ret	 0
gf2_matrix_square ENDP
;	COMDAT pdata
pdata	SEGMENT
$pdata$crc32_combine_ DD imagerel crc32_combine_
	DD	imagerel crc32_combine_+370
	DD	imagerel $unwind$crc32_combine_
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$crc32_combine_ DD 021401H
	DD	0290114H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT crc32_combine_
_TEXT	SEGMENT
n$ = 32
odd$ = 48
even$ = 176
row$ = 304
crc1$ = 336
crc2$ = 344
len2$ = 352
crc32_combine_ PROC					; COMDAT

; 376  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H

; 377  :     int n;
; 378  :     unsigned long row;
; 379  :     unsigned long even[GF2_DIM];    /* even-power-of-two zeros operator */
; 380  :     unsigned long odd[GF2_DIM];     /* odd-power-of-two zeros operator */
; 381  : 
; 382  :     /* degenerate case (also disallow negative lengths) */
; 383  :     if (len2 <= 0)

  00014	83 bc 24 60 01
	00 00 00	 cmp	 DWORD PTR len2$[rsp], 0
  0001c	7f 0c		 jg	 SHORT $LN10@crc32_comb

; 384  :         return crc1;

  0001e	8b 84 24 50 01
	00 00		 mov	 eax, DWORD PTR crc1$[rsp]
  00025	e9 40 01 00 00	 jmp	 $LN11@crc32_comb
$LN10@crc32_comb:

; 385  : 
; 386  :     /* put operator for one zero bit in odd */
; 387  :     odd[0] = 0xedb88320UL;          /* CRC-32 polynomial */

  0002a	c7 44 24 30 20
	83 b8 ed	 mov	 DWORD PTR odd$[rsp], -306674912 ; edb88320H

; 388  :     row = 1;

  00032	c7 84 24 30 01
	00 00 01 00 00
	00		 mov	 DWORD PTR row$[rsp], 1

; 389  :     for (n = 1; n < GF2_DIM; n++) {

  0003d	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR n$[rsp], 1
  00045	eb 0b		 jmp	 SHORT $LN9@crc32_comb
$LN8@crc32_comb:
  00047	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  0004b	83 c0 01	 add	 eax, 1
  0004e	89 44 24 20	 mov	 DWORD PTR n$[rsp], eax
$LN9@crc32_comb:
  00052	83 7c 24 20 20	 cmp	 DWORD PTR n$[rsp], 32	; 00000020H
  00057	7d 22		 jge	 SHORT $LN7@crc32_comb

; 390  :         odd[n] = row;

  00059	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR n$[rsp]
  0005e	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR row$[rsp]
  00065	89 44 8c 30	 mov	 DWORD PTR odd$[rsp+rcx*4], eax

; 391  :         row <<= 1;

  00069	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR row$[rsp]
  00070	d1 e0		 shl	 eax, 1
  00072	89 84 24 30 01
	00 00		 mov	 DWORD PTR row$[rsp], eax

; 392  :     }

  00079	eb cc		 jmp	 SHORT $LN8@crc32_comb
$LN7@crc32_comb:

; 393  : 
; 394  :     /* put operator for two zero bits in even */
; 395  :     gf2_matrix_square(even, odd);

  0007b	48 8d 54 24 30	 lea	 rdx, QWORD PTR odd$[rsp]
  00080	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR even$[rsp]
  00088	e8 00 00 00 00	 call	 gf2_matrix_square

; 396  : 
; 397  :     /* put operator for four zero bits in odd */
; 398  :     gf2_matrix_square(odd, even);

  0008d	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR even$[rsp]
  00095	48 8d 4c 24 30	 lea	 rcx, QWORD PTR odd$[rsp]
  0009a	e8 00 00 00 00	 call	 gf2_matrix_square
$LN6@crc32_comb:

; 399  : 
; 400  :     /* apply len2 zeros to crc1 (first square will put the operator for one
; 401  :        zero byte, eight zero bits, in even) */
; 402  :     do {
; 403  :         /* apply zeros operator for this bit of len2 */
; 404  :         gf2_matrix_square(even, odd);

  0009f	48 8d 54 24 30	 lea	 rdx, QWORD PTR odd$[rsp]
  000a4	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR even$[rsp]
  000ac	e8 00 00 00 00	 call	 gf2_matrix_square

; 405  :         if (len2 & 1)

  000b1	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR len2$[rsp]
  000b8	83 e0 01	 and	 eax, 1
  000bb	85 c0		 test	 eax, eax
  000bd	74 1b		 je	 SHORT $LN3@crc32_comb

; 406  :             crc1 = gf2_matrix_times(even, crc1);

  000bf	8b 94 24 50 01
	00 00		 mov	 edx, DWORD PTR crc1$[rsp]
  000c6	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR even$[rsp]
  000ce	e8 00 00 00 00	 call	 gf2_matrix_times
  000d3	89 84 24 50 01
	00 00		 mov	 DWORD PTR crc1$[rsp], eax
$LN3@crc32_comb:

; 407  :         len2 >>= 1;

  000da	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR len2$[rsp]
  000e1	d1 f8		 sar	 eax, 1
  000e3	89 84 24 60 01
	00 00		 mov	 DWORD PTR len2$[rsp], eax

; 408  : 
; 409  :         /* if no more bits set, then done */
; 410  :         if (len2 == 0)

  000ea	83 bc 24 60 01
	00 00 00	 cmp	 DWORD PTR len2$[rsp], 0
  000f2	75 02		 jne	 SHORT $LN2@crc32_comb

; 411  :             break;

  000f4	eb 56		 jmp	 SHORT $LN4@crc32_comb
$LN2@crc32_comb:

; 412  : 
; 413  :         /* another iteration of the loop with odd and even swapped */
; 414  :         gf2_matrix_square(odd, even);

  000f6	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR even$[rsp]
  000fe	48 8d 4c 24 30	 lea	 rcx, QWORD PTR odd$[rsp]
  00103	e8 00 00 00 00	 call	 gf2_matrix_square

; 415  :         if (len2 & 1)

  00108	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR len2$[rsp]
  0010f	83 e0 01	 and	 eax, 1
  00112	85 c0		 test	 eax, eax
  00114	74 18		 je	 SHORT $LN1@crc32_comb

; 416  :             crc1 = gf2_matrix_times(odd, crc1);

  00116	8b 94 24 50 01
	00 00		 mov	 edx, DWORD PTR crc1$[rsp]
  0011d	48 8d 4c 24 30	 lea	 rcx, QWORD PTR odd$[rsp]
  00122	e8 00 00 00 00	 call	 gf2_matrix_times
  00127	89 84 24 50 01
	00 00		 mov	 DWORD PTR crc1$[rsp], eax
$LN1@crc32_comb:

; 417  :         len2 >>= 1;

  0012e	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR len2$[rsp]
  00135	d1 f8		 sar	 eax, 1
  00137	89 84 24 60 01
	00 00		 mov	 DWORD PTR len2$[rsp], eax

; 418  : 
; 419  :         /* if no more bits set, then done */
; 420  :     } while (len2 != 0);

  0013e	83 bc 24 60 01
	00 00 00	 cmp	 DWORD PTR len2$[rsp], 0
  00146	0f 85 53 ff ff
	ff		 jne	 $LN6@crc32_comb
$LN4@crc32_comb:

; 421  : 
; 422  :     /* return combined crc */
; 423  :     crc1 ^= crc2;

  0014c	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR crc2$[rsp]
  00153	8b 84 24 50 01
	00 00		 mov	 eax, DWORD PTR crc1$[rsp]
  0015a	33 c1		 xor	 eax, ecx
  0015c	89 84 24 50 01
	00 00		 mov	 DWORD PTR crc1$[rsp], eax

; 424  :     return crc1;

  00163	8b 84 24 50 01
	00 00		 mov	 eax, DWORD PTR crc1$[rsp]
$LN11@crc32_comb:

; 425  : }

  0016a	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  00171	c3		 ret	 0
crc32_combine_ ENDP
PUBLIC	crc32_combine
;	COMDAT pdata
pdata	SEGMENT
$pdata$crc32_combine DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$crc32_combine
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$crc32_combine DD 011101H
	DD	04211H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT crc32_combine
_TEXT	SEGMENT
crc1$ = 48
crc2$ = 56
len2$ = 64
crc32_combine PROC					; COMDAT

; 432  : {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 433  :     return crc32_combine_(crc1, crc2, len2);

  00011	44 8b 44 24 40	 mov	 r8d, DWORD PTR len2$[rsp]
  00016	8b 54 24 38	 mov	 edx, DWORD PTR crc2$[rsp]
  0001a	8b 4c 24 30	 mov	 ecx, DWORD PTR crc1$[rsp]
  0001e	e8 00 00 00 00	 call	 crc32_combine_

; 434  : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
crc32_combine ENDP
END
