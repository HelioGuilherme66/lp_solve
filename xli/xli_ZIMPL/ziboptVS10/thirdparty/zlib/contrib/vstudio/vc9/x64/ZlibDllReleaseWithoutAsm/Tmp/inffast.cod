; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	inflate_fast
;	COMDAT pdata
; File d:\lp_solve_5.5\xli\xli_zimpl\ziboptvs10\thirdparty\zlib\inffast.c
pdata	SEGMENT
$pdata$inflate_fast DD imagerel $LN62
	DD	imagerel $LN62+2940
	DD	imagerel $unwind$inflate_fast
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$inflate_fast DD 021001H
	DD	0150110H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT inflate_fast
_TEXT	SEGMENT
beg$ = 0
here$ = 8
window$ = 16
last$ = 24
dcode$ = 32
whave$ = 40
in$ = 48
len$ = 56
bits$ = 60
wnext$ = 64
lmask$ = 68
end$ = 72
lcode$ = 80
dist$ = 88
hold$ = 92
wsize$ = 96
dmask$ = 100
from$ = 104
op$ = 112
out$ = 120
state$ = 128
tv335 = 136
tv343 = 144
strm$ = 176
start$ = 184
inflate_fast PROC					; COMDAT

; 70   : {

$LN62:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 71   :     struct inflate_state FAR *state;
; 72   :     unsigned char FAR *in;      /* local strm->next_in */
; 73   :     unsigned char FAR *last;    /* while in < last, enough input available */
; 74   :     unsigned char FAR *out;     /* local strm->next_out */
; 75   :     unsigned char FAR *beg;     /* inflate()'s initial strm->next_out */
; 76   :     unsigned char FAR *end;     /* while out < end, enough space available */
; 77   : #ifdef INFLATE_STRICT
; 78   :     unsigned dmax;              /* maximum distance from zlib header */
; 79   : #endif
; 80   :     unsigned wsize;             /* window size or zero if not using window */
; 81   :     unsigned whave;             /* valid bytes in the window */
; 82   :     unsigned wnext;             /* window write index */
; 83   :     unsigned char FAR *window;  /* allocated sliding window, if wsize != 0 */
; 84   :     unsigned long hold;         /* local strm->hold */
; 85   :     unsigned bits;              /* local strm->bits */
; 86   :     code const FAR *lcode;      /* local strm->lencode */
; 87   :     code const FAR *dcode;      /* local strm->distcode */
; 88   :     unsigned lmask;             /* mask for first level of length codes */
; 89   :     unsigned dmask;             /* mask for first level of distance codes */
; 90   :     code here;                  /* retrieved table entry */
; 91   :     unsigned op;                /* code bits, operation, extra bits, or */
; 92   :                                 /*  window position, window bytes to copy */
; 93   :     unsigned len;               /* match length, unused bytes */
; 94   :     unsigned dist;              /* match distance */
; 95   :     unsigned char FAR *from;    /* where to copy match from */
; 96   : 
; 97   :     /* copy state to local variables */
; 98   :     state = (struct inflate_state FAR *)strm->state;

  00010	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  00018	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0001c	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR state$[rsp], rax

; 99   :     in = strm->next_in - OFF;

  00024	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  0002c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002f	48 83 e8 01	 sub	 rax, 1
  00033	48 89 44 24 30	 mov	 QWORD PTR in$[rsp], rax

; 100  :     last = in + (strm->avail_in - 5);

  00038	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  00040	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00043	83 e8 05	 sub	 eax, 5
  00046	8b c8		 mov	 ecx, eax
  00048	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  0004d	48 03 c1	 add	 rax, rcx
  00050	48 89 44 24 18	 mov	 QWORD PTR last$[rsp], rax

; 101  :     out = strm->next_out - OFF;

  00055	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  0005d	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00061	48 83 e8 01	 sub	 rax, 1
  00065	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax

; 102  :     beg = out - (start - strm->avail_out);

  0006a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  00072	8b 48 18	 mov	 ecx, DWORD PTR [rax+24]
  00075	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR start$[rsp]
  0007c	2b c1		 sub	 eax, ecx
  0007e	8b c8		 mov	 ecx, eax
  00080	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00085	48 2b c1	 sub	 rax, rcx
  00088	48 89 04 24	 mov	 QWORD PTR beg$[rsp], rax

; 103  :     end = out + (strm->avail_out - 257);

  0008c	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  00094	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00097	2d 01 01 00 00	 sub	 eax, 257		; 00000101H
  0009c	8b c8		 mov	 ecx, eax
  0009e	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  000a3	48 03 c1	 add	 rax, rcx
  000a6	48 89 44 24 48	 mov	 QWORD PTR end$[rsp], rax

; 104  : #ifdef INFLATE_STRICT
; 105  :     dmax = state->dmax;
; 106  : #endif
; 107  :     wsize = state->wsize;

  000ab	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  000b3	8b 40 2c	 mov	 eax, DWORD PTR [rax+44]
  000b6	89 44 24 60	 mov	 DWORD PTR wsize$[rsp], eax

; 108  :     whave = state->whave;

  000ba	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  000c2	8b 40 30	 mov	 eax, DWORD PTR [rax+48]
  000c5	89 44 24 28	 mov	 DWORD PTR whave$[rsp], eax

; 109  :     wnext = state->wnext;

  000c9	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  000d1	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  000d4	89 44 24 40	 mov	 DWORD PTR wnext$[rsp], eax

; 110  :     window = state->window;

  000d8	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  000e0	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  000e4	48 89 44 24 10	 mov	 QWORD PTR window$[rsp], rax

; 111  :     hold = state->hold;

  000e9	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  000f1	8b 40 40	 mov	 eax, DWORD PTR [rax+64]
  000f4	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 112  :     bits = state->bits;

  000f8	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00100	8b 40 44	 mov	 eax, DWORD PTR [rax+68]
  00103	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax

; 113  :     lcode = state->lencode;

  00107	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  0010f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00113	48 89 44 24 50	 mov	 QWORD PTR lcode$[rsp], rax

; 114  :     dcode = state->distcode;

  00118	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00120	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00124	48 89 44 24 20	 mov	 QWORD PTR dcode$[rsp], rax

; 115  :     lmask = (1U << state->lenbits) - 1;

  00129	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00131	8b 48 68	 mov	 ecx, DWORD PTR [rax+104]
  00134	b8 01 00 00 00	 mov	 eax, 1
  00139	d3 e0		 shl	 eax, cl
  0013b	83 e8 01	 sub	 eax, 1
  0013e	89 44 24 44	 mov	 DWORD PTR lmask$[rsp], eax

; 116  :     dmask = (1U << state->distbits) - 1;

  00142	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  0014a	8b 48 6c	 mov	 ecx, DWORD PTR [rax+108]
  0014d	b8 01 00 00 00	 mov	 eax, 1
  00152	d3 e0		 shl	 eax, cl
  00154	83 e8 01	 sub	 eax, 1
  00157	89 44 24 64	 mov	 DWORD PTR dmask$[rsp], eax
$LN55@inflate_fa:

; 117  : 
; 118  :     /* decode literals and length/distances until end-of-block or not enough
; 119  :        input data or output space */
; 120  :     do {
; 121  :         if (bits < 15) {

  0015b	83 7c 24 3c 0f	 cmp	 DWORD PTR bits$[rsp], 15
  00160	73 70		 jae	 SHORT $LN52@inflate_fa

; 122  :             hold += (unsigned long)(PUP(in)) << bits;

  00162	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  00167	48 83 c0 01	 add	 rax, 1
  0016b	48 89 44 24 30	 mov	 QWORD PTR in$[rsp], rax
  00170	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  00175	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  00178	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  0017c	0f b6 c8	 movzx	 ecx, al
  0017f	8b c2		 mov	 eax, edx
  00181	d3 e0		 shl	 eax, cl
  00183	8b c8		 mov	 ecx, eax
  00185	8b 44 24 5c	 mov	 eax, DWORD PTR hold$[rsp]
  00189	03 c1		 add	 eax, ecx
  0018b	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 123  :             bits += 8;

  0018f	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  00193	83 c0 08	 add	 eax, 8
  00196	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax

; 124  :             hold += (unsigned long)(PUP(in)) << bits;

  0019a	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  0019f	48 83 c0 01	 add	 rax, 1
  001a3	48 89 44 24 30	 mov	 QWORD PTR in$[rsp], rax
  001a8	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  001ad	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  001b0	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  001b4	0f b6 c8	 movzx	 ecx, al
  001b7	8b c2		 mov	 eax, edx
  001b9	d3 e0		 shl	 eax, cl
  001bb	8b c8		 mov	 ecx, eax
  001bd	8b 44 24 5c	 mov	 eax, DWORD PTR hold$[rsp]
  001c1	03 c1		 add	 eax, ecx
  001c3	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 125  :             bits += 8;

  001c7	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  001cb	83 c0 08	 add	 eax, 8
  001ce	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax
$LN52@inflate_fa:

; 126  :         }
; 127  :         here = lcode[hold & lmask];

  001d2	8b 4c 24 44	 mov	 ecx, DWORD PTR lmask$[rsp]
  001d6	8b 44 24 5c	 mov	 eax, DWORD PTR hold$[rsp]
  001da	23 c1		 and	 eax, ecx
  001dc	8b c8		 mov	 ecx, eax
  001de	48 8b 44 24 50	 mov	 rax, QWORD PTR lcode$[rsp]
  001e3	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  001e6	89 44 24 08	 mov	 DWORD PTR here$[rsp], eax
$dolen$78168:

; 128  :       dolen:
; 129  :         op = (unsigned)(here.bits);

  001ea	0f b6 44 24 09	 movzx	 eax, BYTE PTR here$[rsp+1]
  001ef	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 130  :         hold >>= op;

  001f3	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  001f7	0f b6 c8	 movzx	 ecx, al
  001fa	8b 44 24 5c	 mov	 eax, DWORD PTR hold$[rsp]
  001fe	d3 e8		 shr	 eax, cl
  00200	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 131  :         bits -= op;

  00204	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  00208	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  0020c	2b c1		 sub	 eax, ecx
  0020e	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax

; 132  :         op = (unsigned)(here.op);

  00212	0f b6 44 24 08	 movzx	 eax, BYTE PTR here$[rsp]
  00217	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 133  :         if (op == 0) {                          /* literal */

  0021b	83 7c 24 70 00	 cmp	 DWORD PTR op$[rsp], 0
  00220	75 1f		 jne	 SHORT $LN51@inflate_fa

; 134  :             Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
; 135  :                     "inflate:         literal '%c'\n" :
; 136  :                     "inflate:         literal 0x%02x\n", here.val));
; 137  :             PUP(out) = (unsigned char)(here.val);

  00222	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00227	48 83 c0 01	 add	 rax, 1
  0022b	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  00230	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  00235	0f b6 44 24 0a	 movzx	 eax, BYTE PTR here$[rsp+2]
  0023a	88 01		 mov	 BYTE PTR [rcx], al
  0023c	e9 db 07 00 00	 jmp	 $LN50@inflate_fa
$LN51@inflate_fa:

; 138  :         }
; 139  :         else if (op & 16) {                     /* length base */

  00241	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00245	83 e0 10	 and	 eax, 16
  00248	85 c0		 test	 eax, eax
  0024a	0f 84 4f 07 00
	00		 je	 $LN49@inflate_fa

; 140  :             len = (unsigned)(here.val);

  00250	0f b7 44 24 0a	 movzx	 eax, WORD PTR here$[rsp+2]
  00255	89 44 24 38	 mov	 DWORD PTR len$[rsp], eax

; 141  :             op &= 15;                           /* number of extra bits */

  00259	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  0025d	83 e0 0f	 and	 eax, 15
  00260	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 142  :             if (op) {

  00264	83 7c 24 70 00	 cmp	 DWORD PTR op$[rsp], 0
  00269	74 7f		 je	 SHORT $LN48@inflate_fa

; 143  :                 if (bits < op) {

  0026b	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  0026f	39 44 24 3c	 cmp	 DWORD PTR bits$[rsp], eax
  00273	73 38		 jae	 SHORT $LN47@inflate_fa

; 144  :                     hold += (unsigned long)(PUP(in)) << bits;

  00275	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  0027a	48 83 c0 01	 add	 rax, 1
  0027e	48 89 44 24 30	 mov	 QWORD PTR in$[rsp], rax
  00283	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  00288	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  0028b	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  0028f	0f b6 c8	 movzx	 ecx, al
  00292	8b c2		 mov	 eax, edx
  00294	d3 e0		 shl	 eax, cl
  00296	8b c8		 mov	 ecx, eax
  00298	8b 44 24 5c	 mov	 eax, DWORD PTR hold$[rsp]
  0029c	03 c1		 add	 eax, ecx
  0029e	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 145  :                     bits += 8;

  002a2	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  002a6	83 c0 08	 add	 eax, 8
  002a9	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax
$LN47@inflate_fa:

; 146  :                 }
; 147  :                 len += (unsigned)hold & ((1U << op) - 1);

  002ad	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  002b1	b8 01 00 00 00	 mov	 eax, 1
  002b6	d3 e0		 shl	 eax, cl
  002b8	83 e8 01	 sub	 eax, 1
  002bb	8b 4c 24 5c	 mov	 ecx, DWORD PTR hold$[rsp]
  002bf	23 c8		 and	 ecx, eax
  002c1	8b 44 24 38	 mov	 eax, DWORD PTR len$[rsp]
  002c5	03 c1		 add	 eax, ecx
  002c7	89 44 24 38	 mov	 DWORD PTR len$[rsp], eax

; 148  :                 hold >>= op;

  002cb	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  002cf	0f b6 c8	 movzx	 ecx, al
  002d2	8b 44 24 5c	 mov	 eax, DWORD PTR hold$[rsp]
  002d6	d3 e8		 shr	 eax, cl
  002d8	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 149  :                 bits -= op;

  002dc	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  002e0	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  002e4	2b c1		 sub	 eax, ecx
  002e6	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax
$LN48@inflate_fa:

; 150  :             }
; 151  :             Tracevv((stderr, "inflate:         length %u\n", len));
; 152  :             if (bits < 15) {

  002ea	83 7c 24 3c 0f	 cmp	 DWORD PTR bits$[rsp], 15
  002ef	73 70		 jae	 SHORT $LN46@inflate_fa

; 153  :                 hold += (unsigned long)(PUP(in)) << bits;

  002f1	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  002f6	48 83 c0 01	 add	 rax, 1
  002fa	48 89 44 24 30	 mov	 QWORD PTR in$[rsp], rax
  002ff	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  00304	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  00307	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  0030b	0f b6 c8	 movzx	 ecx, al
  0030e	8b c2		 mov	 eax, edx
  00310	d3 e0		 shl	 eax, cl
  00312	8b c8		 mov	 ecx, eax
  00314	8b 44 24 5c	 mov	 eax, DWORD PTR hold$[rsp]
  00318	03 c1		 add	 eax, ecx
  0031a	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 154  :                 bits += 8;

  0031e	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  00322	83 c0 08	 add	 eax, 8
  00325	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax

; 155  :                 hold += (unsigned long)(PUP(in)) << bits;

  00329	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  0032e	48 83 c0 01	 add	 rax, 1
  00332	48 89 44 24 30	 mov	 QWORD PTR in$[rsp], rax
  00337	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  0033c	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  0033f	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  00343	0f b6 c8	 movzx	 ecx, al
  00346	8b c2		 mov	 eax, edx
  00348	d3 e0		 shl	 eax, cl
  0034a	8b c8		 mov	 ecx, eax
  0034c	8b 44 24 5c	 mov	 eax, DWORD PTR hold$[rsp]
  00350	03 c1		 add	 eax, ecx
  00352	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 156  :                 bits += 8;

  00356	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  0035a	83 c0 08	 add	 eax, 8
  0035d	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax
$LN46@inflate_fa:

; 157  :             }
; 158  :             here = dcode[hold & dmask];

  00361	8b 4c 24 64	 mov	 ecx, DWORD PTR dmask$[rsp]
  00365	8b 44 24 5c	 mov	 eax, DWORD PTR hold$[rsp]
  00369	23 c1		 and	 eax, ecx
  0036b	8b c8		 mov	 ecx, eax
  0036d	48 8b 44 24 20	 mov	 rax, QWORD PTR dcode$[rsp]
  00372	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00375	89 44 24 08	 mov	 DWORD PTR here$[rsp], eax
$dodist$78183:

; 159  :           dodist:
; 160  :             op = (unsigned)(here.bits);

  00379	0f b6 44 24 09	 movzx	 eax, BYTE PTR here$[rsp+1]
  0037e	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 161  :             hold >>= op;

  00382	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00386	0f b6 c8	 movzx	 ecx, al
  00389	8b 44 24 5c	 mov	 eax, DWORD PTR hold$[rsp]
  0038d	d3 e8		 shr	 eax, cl
  0038f	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 162  :             bits -= op;

  00393	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  00397	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  0039b	2b c1		 sub	 eax, ecx
  0039d	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax

; 163  :             op = (unsigned)(here.op);

  003a1	0f b6 44 24 08	 movzx	 eax, BYTE PTR here$[rsp]
  003a6	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 164  :             if (op & 16) {                      /* distance base */

  003aa	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  003ae	83 e0 10	 and	 eax, 16
  003b1	85 c0		 test	 eax, eax
  003b3	0f 84 81 05 00
	00		 je	 $LN45@inflate_fa

; 165  :                 dist = (unsigned)(here.val);

  003b9	0f b7 44 24 0a	 movzx	 eax, WORD PTR here$[rsp+2]
  003be	89 44 24 58	 mov	 DWORD PTR dist$[rsp], eax

; 166  :                 op &= 15;                       /* number of extra bits */

  003c2	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  003c6	83 e0 0f	 and	 eax, 15
  003c9	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 167  :                 if (bits < op) {

  003cd	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  003d1	39 44 24 3c	 cmp	 DWORD PTR bits$[rsp], eax
  003d5	73 7a		 jae	 SHORT $LN44@inflate_fa

; 168  :                     hold += (unsigned long)(PUP(in)) << bits;

  003d7	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  003dc	48 83 c0 01	 add	 rax, 1
  003e0	48 89 44 24 30	 mov	 QWORD PTR in$[rsp], rax
  003e5	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  003ea	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  003ed	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  003f1	0f b6 c8	 movzx	 ecx, al
  003f4	8b c2		 mov	 eax, edx
  003f6	d3 e0		 shl	 eax, cl
  003f8	8b c8		 mov	 ecx, eax
  003fa	8b 44 24 5c	 mov	 eax, DWORD PTR hold$[rsp]
  003fe	03 c1		 add	 eax, ecx
  00400	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 169  :                     bits += 8;

  00404	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  00408	83 c0 08	 add	 eax, 8
  0040b	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax

; 170  :                     if (bits < op) {

  0040f	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00413	39 44 24 3c	 cmp	 DWORD PTR bits$[rsp], eax
  00417	73 38		 jae	 SHORT $LN43@inflate_fa

; 171  :                         hold += (unsigned long)(PUP(in)) << bits;

  00419	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  0041e	48 83 c0 01	 add	 rax, 1
  00422	48 89 44 24 30	 mov	 QWORD PTR in$[rsp], rax
  00427	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  0042c	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  0042f	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  00433	0f b6 c8	 movzx	 ecx, al
  00436	8b c2		 mov	 eax, edx
  00438	d3 e0		 shl	 eax, cl
  0043a	8b c8		 mov	 ecx, eax
  0043c	8b 44 24 5c	 mov	 eax, DWORD PTR hold$[rsp]
  00440	03 c1		 add	 eax, ecx
  00442	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 172  :                         bits += 8;

  00446	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  0044a	83 c0 08	 add	 eax, 8
  0044d	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax
$LN43@inflate_fa:
$LN44@inflate_fa:

; 173  :                     }
; 174  :                 }
; 175  :                 dist += (unsigned)hold & ((1U << op) - 1);

  00451	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  00455	b8 01 00 00 00	 mov	 eax, 1
  0045a	d3 e0		 shl	 eax, cl
  0045c	83 e8 01	 sub	 eax, 1
  0045f	8b 4c 24 5c	 mov	 ecx, DWORD PTR hold$[rsp]
  00463	23 c8		 and	 ecx, eax
  00465	8b 44 24 58	 mov	 eax, DWORD PTR dist$[rsp]
  00469	03 c1		 add	 eax, ecx
  0046b	89 44 24 58	 mov	 DWORD PTR dist$[rsp], eax

; 176  : #ifdef INFLATE_STRICT
; 177  :                 if (dist > dmax) {
; 178  :                     strm->msg = (char *)"invalid distance too far back";
; 179  :                     state->mode = BAD;
; 180  :                     break;
; 181  :                 }
; 182  : #endif
; 183  :                 hold >>= op;

  0046f	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00473	0f b6 c8	 movzx	 ecx, al
  00476	8b 44 24 5c	 mov	 eax, DWORD PTR hold$[rsp]
  0047a	d3 e8		 shr	 eax, cl
  0047c	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 184  :                 bits -= op;

  00480	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  00484	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  00488	2b c1		 sub	 eax, ecx
  0048a	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax

; 185  :                 Tracevv((stderr, "inflate:         distance %u\n", dist));
; 186  :                 op = (unsigned)(out - beg);     /* max distance in output */

  0048e	48 8b 0c 24	 mov	 rcx, QWORD PTR beg$[rsp]
  00492	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00497	48 2b c1	 sub	 rax, rcx
  0049a	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 187  :                 if (dist > op) {                /* see if copy from window */

  0049e	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  004a2	39 44 24 58	 cmp	 DWORD PTR dist$[rsp], eax
  004a6	0f 86 80 03 00
	00		 jbe	 $LN42@inflate_fa

; 188  :                     op = dist - op;             /* distance back in window */

  004ac	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  004b0	8b 44 24 58	 mov	 eax, DWORD PTR dist$[rsp]
  004b4	2b c1		 sub	 eax, ecx
  004b6	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 189  :                     if (op > whave) {

  004ba	8b 44 24 28	 mov	 eax, DWORD PTR whave$[rsp]
  004be	39 44 24 70	 cmp	 DWORD PTR op$[rsp], eax
  004c2	76 37		 jbe	 SHORT $LN41@inflate_fa

; 190  :                         if (state->sane) {

  004c4	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  004cc	83 b8 d8 1b 00
	00 00		 cmp	 DWORD PTR [rax+7128], 0
  004d3	74 26		 je	 SHORT $LN40@inflate_fa

; 191  :                             strm->msg =
; 192  :                                 (char *)"invalid distance too far back";

  004d5	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR strm$[rsp]
  004dd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back?$AA@
  004e4	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 193  :                             state->mode = BAD;

  004e8	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  004f0	c7 00 1d 00 00
	00		 mov	 DWORD PTR [rax], 29

; 194  :                             break;

  004f6	e9 3d 05 00 00	 jmp	 $LN53@inflate_fa
$LN40@inflate_fa:
$LN41@inflate_fa:

; 195  :                         }
; 196  : #ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
; 197  :                         if (len <= op - whave) {
; 198  :                             do {
; 199  :                                 PUP(out) = 0;
; 200  :                             } while (--len);
; 201  :                             continue;
; 202  :                         }
; 203  :                         len -= op - whave;
; 204  :                         do {
; 205  :                             PUP(out) = 0;
; 206  :                         } while (--op > whave);
; 207  :                         if (op == 0) {
; 208  :                             from = out - dist;
; 209  :                             do {
; 210  :                                 PUP(out) = PUP(from);
; 211  :                             } while (--len);
; 212  :                             continue;
; 213  :                         }
; 214  : #endif
; 215  :                     }
; 216  :                     from = window - OFF;

  004fb	48 8b 44 24 10	 mov	 rax, QWORD PTR window$[rsp]
  00500	48 83 e8 01	 sub	 rax, 1
  00504	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax

; 217  :                     if (wnext == 0) {           /* very common case */

  00509	83 7c 24 40 00	 cmp	 DWORD PTR wnext$[rsp], 0
  0050e	0f 85 84 00 00
	00		 jne	 $LN39@inflate_fa

; 218  :                         from += wsize - op;

  00514	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  00518	8b 44 24 60	 mov	 eax, DWORD PTR wsize$[rsp]
  0051c	2b c1		 sub	 eax, ecx
  0051e	8b c8		 mov	 ecx, eax
  00520	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00525	48 03 c1	 add	 rax, rcx
  00528	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax

; 219  :                         if (op < len) {         /* some from window */

  0052d	8b 44 24 38	 mov	 eax, DWORD PTR len$[rsp]
  00531	39 44 24 70	 cmp	 DWORD PTR op$[rsp], eax
  00535	73 5c		 jae	 SHORT $LN38@inflate_fa

; 220  :                             len -= op;

  00537	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  0053b	8b 44 24 38	 mov	 eax, DWORD PTR len$[rsp]
  0053f	2b c1		 sub	 eax, ecx
  00541	89 44 24 38	 mov	 DWORD PTR len$[rsp], eax
$LN37@inflate_fa:

; 221  :                             do {
; 222  :                                 PUP(out) = PUP(from);

  00545	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  0054a	48 83 c0 01	 add	 rax, 1
  0054e	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  00553	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00558	48 83 c0 01	 add	 rax, 1
  0055c	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  00561	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  00566	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  0056b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0056e	88 01		 mov	 BYTE PTR [rcx], al

; 223  :                             } while (--op);

  00570	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00574	83 e8 01	 sub	 eax, 1
  00577	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax
  0057b	83 7c 24 70 00	 cmp	 DWORD PTR op$[rsp], 0
  00580	75 c3		 jne	 SHORT $LN37@inflate_fa

; 224  :                             from = out - dist;  /* rest from output */

  00582	8b 4c 24 58	 mov	 ecx, DWORD PTR dist$[rsp]
  00586	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  0058b	48 2b c1	 sub	 rax, rcx
  0058e	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
$LN38@inflate_fa:

; 225  :                         }

  00593	e9 8f 01 00 00	 jmp	 $LN34@inflate_fa
$LN39@inflate_fa:

; 226  :                     }
; 227  :                     else if (wnext < op) {      /* wrap around window */

  00598	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  0059c	39 44 24 40	 cmp	 DWORD PTR wnext$[rsp], eax
  005a0	0f 83 02 01 00
	00		 jae	 $LN33@inflate_fa

; 228  :                         from += wsize + wnext - op;

  005a6	8b 4c 24 40	 mov	 ecx, DWORD PTR wnext$[rsp]
  005aa	8b 44 24 60	 mov	 eax, DWORD PTR wsize$[rsp]
  005ae	03 c1		 add	 eax, ecx
  005b0	2b 44 24 70	 sub	 eax, DWORD PTR op$[rsp]
  005b4	8b c8		 mov	 ecx, eax
  005b6	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  005bb	48 03 c1	 add	 rax, rcx
  005be	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax

; 229  :                         op -= wnext;

  005c3	8b 4c 24 40	 mov	 ecx, DWORD PTR wnext$[rsp]
  005c7	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  005cb	2b c1		 sub	 eax, ecx
  005cd	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 230  :                         if (op < len) {         /* some from end of window */

  005d1	8b 44 24 38	 mov	 eax, DWORD PTR len$[rsp]
  005d5	39 44 24 70	 cmp	 DWORD PTR op$[rsp], eax
  005d9	0f 83 c7 00 00
	00		 jae	 $LN32@inflate_fa

; 231  :                             len -= op;

  005df	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  005e3	8b 44 24 38	 mov	 eax, DWORD PTR len$[rsp]
  005e7	2b c1		 sub	 eax, ecx
  005e9	89 44 24 38	 mov	 DWORD PTR len$[rsp], eax
$LN31@inflate_fa:

; 232  :                             do {
; 233  :                                 PUP(out) = PUP(from);

  005ed	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  005f2	48 83 c0 01	 add	 rax, 1
  005f6	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  005fb	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00600	48 83 c0 01	 add	 rax, 1
  00604	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  00609	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  0060e	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00613	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00616	88 01		 mov	 BYTE PTR [rcx], al

; 234  :                             } while (--op);

  00618	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  0061c	83 e8 01	 sub	 eax, 1
  0061f	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax
  00623	83 7c 24 70 00	 cmp	 DWORD PTR op$[rsp], 0
  00628	75 c3		 jne	 SHORT $LN31@inflate_fa

; 235  :                             from = window - OFF;

  0062a	48 8b 44 24 10	 mov	 rax, QWORD PTR window$[rsp]
  0062f	48 83 e8 01	 sub	 rax, 1
  00633	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax

; 236  :                             if (wnext < len) {  /* some from start of window */

  00638	8b 44 24 38	 mov	 eax, DWORD PTR len$[rsp]
  0063c	39 44 24 40	 cmp	 DWORD PTR wnext$[rsp], eax
  00640	73 64		 jae	 SHORT $LN28@inflate_fa

; 237  :                                 op = wnext;

  00642	8b 44 24 40	 mov	 eax, DWORD PTR wnext$[rsp]
  00646	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax

; 238  :                                 len -= op;

  0064a	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  0064e	8b 44 24 38	 mov	 eax, DWORD PTR len$[rsp]
  00652	2b c1		 sub	 eax, ecx
  00654	89 44 24 38	 mov	 DWORD PTR len$[rsp], eax
$LN27@inflate_fa:

; 239  :                                 do {
; 240  :                                     PUP(out) = PUP(from);

  00658	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  0065d	48 83 c0 01	 add	 rax, 1
  00661	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  00666	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  0066b	48 83 c0 01	 add	 rax, 1
  0066f	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  00674	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  00679	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  0067e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00681	88 01		 mov	 BYTE PTR [rcx], al

; 241  :                                 } while (--op);

  00683	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00687	83 e8 01	 sub	 eax, 1
  0068a	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax
  0068e	83 7c 24 70 00	 cmp	 DWORD PTR op$[rsp], 0
  00693	75 c3		 jne	 SHORT $LN27@inflate_fa

; 242  :                                 from = out - dist;      /* rest from output */

  00695	8b 4c 24 58	 mov	 ecx, DWORD PTR dist$[rsp]
  00699	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  0069e	48 2b c1	 sub	 rax, rcx
  006a1	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
$LN28@inflate_fa:
$LN32@inflate_fa:

; 243  :                             }
; 244  :                         }
; 245  :                     }
; 246  :                     else {                      /* contiguous in window */

  006a6	eb 7f		 jmp	 SHORT $LN24@inflate_fa
$LN33@inflate_fa:

; 247  :                         from += wnext - op;

  006a8	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  006ac	8b 44 24 40	 mov	 eax, DWORD PTR wnext$[rsp]
  006b0	2b c1		 sub	 eax, ecx
  006b2	8b c8		 mov	 ecx, eax
  006b4	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  006b9	48 03 c1	 add	 rax, rcx
  006bc	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax

; 248  :                         if (op < len) {         /* some from window */

  006c1	8b 44 24 38	 mov	 eax, DWORD PTR len$[rsp]
  006c5	39 44 24 70	 cmp	 DWORD PTR op$[rsp], eax
  006c9	73 5c		 jae	 SHORT $LN23@inflate_fa

; 249  :                             len -= op;

  006cb	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  006cf	8b 44 24 38	 mov	 eax, DWORD PTR len$[rsp]
  006d3	2b c1		 sub	 eax, ecx
  006d5	89 44 24 38	 mov	 DWORD PTR len$[rsp], eax
$LN22@inflate_fa:

; 250  :                             do {
; 251  :                                 PUP(out) = PUP(from);

  006d9	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  006de	48 83 c0 01	 add	 rax, 1
  006e2	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  006e7	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  006ec	48 83 c0 01	 add	 rax, 1
  006f0	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  006f5	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  006fa	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  006ff	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00702	88 01		 mov	 BYTE PTR [rcx], al

; 252  :                             } while (--op);

  00704	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  00708	83 e8 01	 sub	 eax, 1
  0070b	89 44 24 70	 mov	 DWORD PTR op$[rsp], eax
  0070f	83 7c 24 70 00	 cmp	 DWORD PTR op$[rsp], 0
  00714	75 c3		 jne	 SHORT $LN22@inflate_fa

; 253  :                             from = out - dist;  /* rest from output */

  00716	8b 4c 24 58	 mov	 ecx, DWORD PTR dist$[rsp]
  0071a	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  0071f	48 2b c1	 sub	 rax, rcx
  00722	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
$LN23@inflate_fa:
$LN24@inflate_fa:
$LN34@inflate_fa:
$LN19@inflate_fa:

; 254  :                         }
; 255  :                     }
; 256  :                     while (len > 2) {

  00727	83 7c 24 38 02	 cmp	 DWORD PTR len$[rsp], 2
  0072c	0f 86 91 00 00
	00		 jbe	 $LN18@inflate_fa

; 257  :                         PUP(out) = PUP(from);

  00732	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00737	48 83 c0 01	 add	 rax, 1
  0073b	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  00740	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00745	48 83 c0 01	 add	 rax, 1
  00749	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  0074e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  00753	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00758	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0075b	88 01		 mov	 BYTE PTR [rcx], al

; 258  :                         PUP(out) = PUP(from);

  0075d	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00762	48 83 c0 01	 add	 rax, 1
  00766	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  0076b	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00770	48 83 c0 01	 add	 rax, 1
  00774	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  00779	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  0077e	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00783	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00786	88 01		 mov	 BYTE PTR [rcx], al

; 259  :                         PUP(out) = PUP(from);

  00788	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  0078d	48 83 c0 01	 add	 rax, 1
  00791	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  00796	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  0079b	48 83 c0 01	 add	 rax, 1
  0079f	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  007a4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  007a9	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  007ae	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  007b1	88 01		 mov	 BYTE PTR [rcx], al

; 260  :                         len -= 3;

  007b3	8b 44 24 38	 mov	 eax, DWORD PTR len$[rsp]
  007b7	83 e8 03	 sub	 eax, 3
  007ba	89 44 24 38	 mov	 DWORD PTR len$[rsp], eax

; 261  :                     }

  007be	e9 64 ff ff ff	 jmp	 $LN19@inflate_fa
$LN18@inflate_fa:

; 262  :                     if (len) {

  007c3	83 7c 24 38 00	 cmp	 DWORD PTR len$[rsp], 0
  007c8	74 5d		 je	 SHORT $LN17@inflate_fa

; 263  :                         PUP(out) = PUP(from);

  007ca	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  007cf	48 83 c0 01	 add	 rax, 1
  007d3	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  007d8	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  007dd	48 83 c0 01	 add	 rax, 1
  007e1	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  007e6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  007eb	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  007f0	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  007f3	88 01		 mov	 BYTE PTR [rcx], al

; 264  :                         if (len > 1)

  007f5	83 7c 24 38 01	 cmp	 DWORD PTR len$[rsp], 1
  007fa	76 2b		 jbe	 SHORT $LN16@inflate_fa

; 265  :                             PUP(out) = PUP(from);

  007fc	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00801	48 83 c0 01	 add	 rax, 1
  00805	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  0080a	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  0080f	48 83 c0 01	 add	 rax, 1
  00813	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  00818	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  0081d	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00822	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00825	88 01		 mov	 BYTE PTR [rcx], al
$LN16@inflate_fa:
$LN17@inflate_fa:

; 266  :                     }
; 267  :                 }
; 268  :                 else {

  00827	e9 0c 01 00 00	 jmp	 $LN15@inflate_fa
$LN42@inflate_fa:

; 269  :                     from = out - dist;          /* copy direct from output */

  0082c	8b 4c 24 58	 mov	 ecx, DWORD PTR dist$[rsp]
  00830	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00835	48 2b c1	 sub	 rax, rcx
  00838	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
$LN14@inflate_fa:

; 270  :                     do {                        /* minimum length is three */
; 271  :                         PUP(out) = PUP(from);

  0083d	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00842	48 83 c0 01	 add	 rax, 1
  00846	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  0084b	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00850	48 83 c0 01	 add	 rax, 1
  00854	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  00859	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  0085e	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00863	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00866	88 01		 mov	 BYTE PTR [rcx], al

; 272  :                         PUP(out) = PUP(from);

  00868	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  0086d	48 83 c0 01	 add	 rax, 1
  00871	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  00876	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  0087b	48 83 c0 01	 add	 rax, 1
  0087f	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  00884	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  00889	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  0088e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00891	88 01		 mov	 BYTE PTR [rcx], al

; 273  :                         PUP(out) = PUP(from);

  00893	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00898	48 83 c0 01	 add	 rax, 1
  0089c	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  008a1	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  008a6	48 83 c0 01	 add	 rax, 1
  008aa	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  008af	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  008b4	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  008b9	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  008bc	88 01		 mov	 BYTE PTR [rcx], al

; 274  :                         len -= 3;

  008be	8b 44 24 38	 mov	 eax, DWORD PTR len$[rsp]
  008c2	83 e8 03	 sub	 eax, 3
  008c5	89 44 24 38	 mov	 DWORD PTR len$[rsp], eax

; 275  :                     } while (len > 2);

  008c9	83 7c 24 38 02	 cmp	 DWORD PTR len$[rsp], 2
  008ce	0f 87 69 ff ff
	ff		 ja	 $LN14@inflate_fa

; 276  :                     if (len) {

  008d4	83 7c 24 38 00	 cmp	 DWORD PTR len$[rsp], 0
  008d9	74 5d		 je	 SHORT $LN11@inflate_fa

; 277  :                         PUP(out) = PUP(from);

  008db	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  008e0	48 83 c0 01	 add	 rax, 1
  008e4	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  008e9	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  008ee	48 83 c0 01	 add	 rax, 1
  008f2	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  008f7	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  008fc	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00901	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00904	88 01		 mov	 BYTE PTR [rcx], al

; 278  :                         if (len > 1)

  00906	83 7c 24 38 01	 cmp	 DWORD PTR len$[rsp], 1
  0090b	76 2b		 jbe	 SHORT $LN10@inflate_fa

; 279  :                             PUP(out) = PUP(from);

  0090d	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00912	48 83 c0 01	 add	 rax, 1
  00916	48 89 44 24 68	 mov	 QWORD PTR from$[rsp], rax
  0091b	48 8b 44 24 78	 mov	 rax, QWORD PTR out$[rsp]
  00920	48 83 c0 01	 add	 rax, 1
  00924	48 89 44 24 78	 mov	 QWORD PTR out$[rsp], rax
  00929	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  0092e	48 8b 44 24 68	 mov	 rax, QWORD PTR from$[rsp]
  00933	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00936	88 01		 mov	 BYTE PTR [rcx], al
$LN10@inflate_fa:
$LN11@inflate_fa:
$LN15@inflate_fa:

; 280  :                     }
; 281  :                 }

  00938	eb 63		 jmp	 SHORT $LN9@inflate_fa
$LN45@inflate_fa:

; 282  :             }
; 283  :             else if ((op & 64) == 0) {          /* 2nd level distance code */

  0093a	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  0093e	83 e0 40	 and	 eax, 64			; 00000040H
  00941	85 c0		 test	 eax, eax
  00943	75 32		 jne	 SHORT $LN8@inflate_fa

; 284  :                 here = dcode[here.val + (hold & ((1U << op) - 1))];

  00945	0f b7 54 24 0a	 movzx	 edx, WORD PTR here$[rsp+2]
  0094a	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  0094e	b8 01 00 00 00	 mov	 eax, 1
  00953	d3 e0		 shl	 eax, cl
  00955	83 e8 01	 sub	 eax, 1
  00958	8b 4c 24 5c	 mov	 ecx, DWORD PTR hold$[rsp]
  0095c	23 c8		 and	 ecx, eax
  0095e	8b c2		 mov	 eax, edx
  00960	03 c1		 add	 eax, ecx
  00962	8b c8		 mov	 ecx, eax
  00964	48 8b 44 24 20	 mov	 rax, QWORD PTR dcode$[rsp]
  00969	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  0096c	89 44 24 08	 mov	 DWORD PTR here$[rsp], eax

; 285  :                 goto dodist;

  00970	e9 04 fa ff ff	 jmp	 $dodist$78183

; 286  :             }
; 287  :             else {

  00975	eb 26		 jmp	 SHORT $LN7@inflate_fa
$LN8@inflate_fa:

; 288  :                 strm->msg = (char *)"invalid distance code";

  00977	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR strm$[rsp]
  0097f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BG@LBKINIKP@invalid?5distance?5code?$AA@
  00986	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 289  :                 state->mode = BAD;

  0098a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00992	c7 00 1d 00 00
	00		 mov	 DWORD PTR [rax], 29

; 290  :                 break;

  00998	e9 9b 00 00 00	 jmp	 $LN53@inflate_fa
$LN7@inflate_fa:
$LN9@inflate_fa:

; 291  :             }

  0099d	eb 7d		 jmp	 SHORT $LN6@inflate_fa
$LN49@inflate_fa:

; 292  :         }
; 293  :         else if ((op & 64) == 0) {              /* 2nd level length code */

  0099f	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  009a3	83 e0 40	 and	 eax, 64			; 00000040H
  009a6	85 c0		 test	 eax, eax
  009a8	75 32		 jne	 SHORT $LN5@inflate_fa

; 294  :             here = lcode[here.val + (hold & ((1U << op) - 1))];

  009aa	0f b7 54 24 0a	 movzx	 edx, WORD PTR here$[rsp+2]
  009af	8b 4c 24 70	 mov	 ecx, DWORD PTR op$[rsp]
  009b3	b8 01 00 00 00	 mov	 eax, 1
  009b8	d3 e0		 shl	 eax, cl
  009ba	83 e8 01	 sub	 eax, 1
  009bd	8b 4c 24 5c	 mov	 ecx, DWORD PTR hold$[rsp]
  009c1	23 c8		 and	 ecx, eax
  009c3	8b c2		 mov	 eax, edx
  009c5	03 c1		 add	 eax, ecx
  009c7	8b c8		 mov	 ecx, eax
  009c9	48 8b 44 24 50	 mov	 rax, QWORD PTR lcode$[rsp]
  009ce	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  009d1	89 44 24 08	 mov	 DWORD PTR here$[rsp], eax
  009d5	e9 10 f8 ff ff	 jmp	 $dolen$78168

; 295  :             goto dolen;

  009da	eb 40		 jmp	 SHORT $LN4@inflate_fa
$LN5@inflate_fa:

; 296  :         }
; 297  :         else if (op & 32) {                     /* end-of-block */

  009dc	8b 44 24 70	 mov	 eax, DWORD PTR op$[rsp]
  009e0	83 e0 20	 and	 eax, 32			; 00000020H
  009e3	85 c0		 test	 eax, eax
  009e5	74 12		 je	 SHORT $LN3@inflate_fa

; 298  :             Tracevv((stderr, "inflate:         end of block\n"));
; 299  :             state->mode = TYPE;

  009e7	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  009ef	c7 00 0b 00 00
	00		 mov	 DWORD PTR [rax], 11

; 300  :             break;

  009f5	eb 41		 jmp	 SHORT $LN53@inflate_fa

; 301  :         }
; 302  :         else {

  009f7	eb 23		 jmp	 SHORT $LN2@inflate_fa
$LN3@inflate_fa:

; 303  :             strm->msg = (char *)"invalid literal/length code";

  009f9	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR strm$[rsp]
  00a01	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code?$AA@
  00a08	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 304  :             state->mode = BAD;

  00a0c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR state$[rsp]
  00a14	c7 00 1d 00 00
	00		 mov	 DWORD PTR [rax], 29

; 305  :             break;

  00a1a	eb 1c		 jmp	 SHORT $LN53@inflate_fa
$LN2@inflate_fa:
$LN4@inflate_fa:
$LN6@inflate_fa:
$LN50@inflate_fa:

; 306  :         }
; 307  :     } while (in < last && out < end);

  00a1c	48 8b 44 24 18	 mov	 rax, QWORD PTR last$[rsp]
  00a21	48 39 44 24 30	 cmp	 QWORD PTR in$[rsp], rax
  00a26	73 10		 jae	 SHORT $LN1@inflate_fa
  00a28	48 8b 44 24 48	 mov	 rax, QWORD PTR end$[rsp]
  00a2d	48 39 44 24 78	 cmp	 QWORD PTR out$[rsp], rax
  00a32	0f 82 23 f7 ff
	ff		 jb	 $LN55@inflate_fa
$LN1@inflate_fa:
$LN53@inflate_fa:

; 308  : 
; 309  :     /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
; 310  :     len = bits >> 3;

  00a38	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  00a3c	c1 e8 03	 shr	 eax, 3
  00a3f	89 44 24 38	 mov	 DWORD PTR len$[rsp], eax

; 311  :     in -= len;

  00a43	8b 4c 24 38	 mov	 ecx, DWORD PTR len$[rsp]
  00a47	48 8b 44 24 30	 mov	 rax, QWORD PTR in$[rsp]
  00a4c	48 2b c1	 sub	 rax, rcx
  00a4f	48 89 44 24 30	 mov	 QWORD PTR in$[rsp], rax

; 312  :     bits -= len << 3;

  00a54	8b 4c 24 38	 mov	 ecx, DWORD PTR len$[rsp]
  00a58	c1 e1 03	 shl	 ecx, 3
  00a5b	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  00a5f	2b c1		 sub	 eax, ecx
  00a61	89 44 24 3c	 mov	 DWORD PTR bits$[rsp], eax

; 313  :     hold &= (1U << bits) - 1;

  00a65	8b 4c 24 3c	 mov	 ecx, DWORD PTR bits$[rsp]
  00a69	b8 01 00 00 00	 mov	 eax, 1
  00a6e	d3 e0		 shl	 eax, cl
  00a70	8b c8		 mov	 ecx, eax
  00a72	83 e9 01	 sub	 ecx, 1
  00a75	8b 44 24 5c	 mov	 eax, DWORD PTR hold$[rsp]
  00a79	23 c1		 and	 eax, ecx
  00a7b	89 44 24 5c	 mov	 DWORD PTR hold$[rsp], eax

; 314  : 
; 315  :     /* update state and return */
; 316  :     strm->next_in = in + OFF;

  00a7f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR in$[rsp]
  00a84	48 83 c1 01	 add	 rcx, 1
  00a88	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  00a90	48 89 08	 mov	 QWORD PTR [rax], rcx

; 317  :     strm->next_out = out + OFF;

  00a93	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  00a98	48 83 c1 01	 add	 rcx, 1
  00a9c	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR strm$[rsp]
  00aa4	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 318  :     strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));

  00aa8	48 8b 44 24 18	 mov	 rax, QWORD PTR last$[rsp]
  00aad	48 39 44 24 30	 cmp	 QWORD PTR in$[rsp], rax
  00ab2	73 1b		 jae	 SHORT $LN58@inflate_fa
  00ab4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR in$[rsp]
  00ab9	48 8b 44 24 18	 mov	 rax, QWORD PTR last$[rsp]
  00abe	48 2b c1	 sub	 rax, rcx
  00ac1	48 83 c0 05	 add	 rax, 5
  00ac5	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv335[rsp], rax
  00acd	eb 1d		 jmp	 SHORT $LN59@inflate_fa
$LN58@inflate_fa:
  00acf	48 8b 44 24 18	 mov	 rax, QWORD PTR last$[rsp]
  00ad4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR in$[rsp]
  00ad9	48 2b c8	 sub	 rcx, rax
  00adc	b8 05 00 00 00	 mov	 eax, 5
  00ae1	48 2b c1	 sub	 rax, rcx
  00ae4	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv335[rsp], rax
$LN59@inflate_fa:
  00aec	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR strm$[rsp]
  00af4	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv335[rsp]
  00afb	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 319  :     strm->avail_out = (unsigned)(out < end ?
; 320  :                                  257 + (end - out) : 257 - (out - end));

  00afe	48 8b 44 24 48	 mov	 rax, QWORD PTR end$[rsp]
  00b03	48 39 44 24 78	 cmp	 QWORD PTR out$[rsp], rax
  00b08	73 1d		 jae	 SHORT $LN60@inflate_fa
  00b0a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  00b0f	48 8b 44 24 48	 mov	 rax, QWORD PTR end$[rsp]
  00b14	48 2b c1	 sub	 rax, rcx
  00b17	48 05 01 01 00
	00		 add	 rax, 257		; 00000101H
  00b1d	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv343[rsp], rax
  00b25	eb 1d		 jmp	 SHORT $LN61@inflate_fa
$LN60@inflate_fa:
  00b27	48 8b 44 24 48	 mov	 rax, QWORD PTR end$[rsp]
  00b2c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out$[rsp]
  00b31	48 2b c8	 sub	 rcx, rax
  00b34	b8 01 01 00 00	 mov	 eax, 257		; 00000101H
  00b39	48 2b c1	 sub	 rax, rcx
  00b3c	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv343[rsp], rax
$LN61@inflate_fa:
  00b44	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR strm$[rsp]
  00b4c	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR tv343[rsp]
  00b53	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 321  :     state->hold = hold;

  00b56	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR state$[rsp]
  00b5e	8b 44 24 5c	 mov	 eax, DWORD PTR hold$[rsp]
  00b62	89 41 40	 mov	 DWORD PTR [rcx+64], eax

; 322  :     state->bits = bits;

  00b65	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR state$[rsp]
  00b6d	8b 44 24 3c	 mov	 eax, DWORD PTR bits$[rsp]
  00b71	89 41 44	 mov	 DWORD PTR [rcx+68], eax

; 323  :     return;
; 324  : }

  00b74	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00b7b	c3		 ret	 0
inflate_fast ENDP
END
