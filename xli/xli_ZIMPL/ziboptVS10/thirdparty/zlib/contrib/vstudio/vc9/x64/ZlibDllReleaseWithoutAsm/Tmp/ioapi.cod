; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_03HMFOOINA@r?$CLb?$AA@			; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
EXTRN	__imp_ftell:PROC
EXTRN	__imp_fseek:PROC
EXTRN	__imp_fread:PROC
EXTRN	__imp_fwrite:PROC
EXTRN	__imp__ftelli64:PROC
EXTRN	__imp__fseeki64:PROC
EXTRN	__imp_fclose:PROC
EXTRN	__imp_ferror:PROC
EXTRN	__imp_fopen:PROC
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HMFOOINA@r?$CLb?$AA@
CONST	SEGMENT
??_C@_03HMFOOINA@r?$CLb?$AA@ DB 'r+b', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
;	COMDAT pdata
; File d:\lp_solve_5.5\xli\xli_zimpl\ziboptvs10\thirdparty\zlib\contrib\minizip\ioapi.c
pdata	SEGMENT
$pdata$ferror_file_func DD imagerel ferror_file_func
	DD	imagerel ferror_file_func+38
	DD	imagerel $unwind$ferror_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ferror_file_func DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ferror_file_func
_TEXT	SEGMENT
ret$ = 32
opaque$ = 64
stream$ = 72
ferror_file_func PROC					; COMDAT

; 206  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 207  :     int ret;
; 208  :     ret = ferror((FILE *)stream);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stream$[rsp]
  00013	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ferror
  00019	89 44 24 20	 mov	 DWORD PTR ret$[rsp], eax

; 209  :     return ret;

  0001d	8b 44 24 20	 mov	 eax, DWORD PTR ret$[rsp]

; 210  : }

  00021	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00025	c3		 ret	 0
ferror_file_func ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fclose_file_func DD imagerel fclose_file_func
	DD	imagerel fclose_file_func+38
	DD	imagerel $unwind$fclose_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fclose_file_func DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT fclose_file_func
_TEXT	SEGMENT
ret$ = 32
opaque$ = 64
stream$ = 72
fclose_file_func PROC					; COMDAT

; 199  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 200  :     int ret;
; 201  :     ret = fclose((FILE *)stream);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stream$[rsp]
  00013	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose
  00019	89 44 24 20	 mov	 DWORD PTR ret$[rsp], eax

; 202  :     return ret;

  0001d	8b 44 24 20	 mov	 eax, DWORD PTR ret$[rsp]

; 203  : }

  00021	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00025	c3		 ret	 0
fclose_file_func ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fseek64_file_func DD imagerel fseek64_file_func
	DD	imagerel fseek64_file_func+150
	DD	imagerel $unwind$fseek64_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fseek64_file_func DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT fseek64_file_func
_TEXT	SEGMENT
fseek_origin$ = 32
ret$ = 36
tv64 = 40
opaque$ = 64
stream$ = 72
offset$ = 80
origin$ = 88
fseek64_file_func PROC					; COMDAT

; 173  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 174  :     int fseek_origin=0;

  00018	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR fseek_origin$[rsp], 0

; 175  :     long ret;
; 176  :     switch (origin)

  00020	8b 44 24 58	 mov	 eax, DWORD PTR origin$[rsp]
  00024	89 44 24 28	 mov	 DWORD PTR tv64[rsp], eax
  00028	83 7c 24 28 00	 cmp	 DWORD PTR tv64[rsp], 0
  0002d	74 24		 je	 SHORT $LN3@fseek64_fi
  0002f	83 7c 24 28 01	 cmp	 DWORD PTR tv64[rsp], 1
  00034	74 09		 je	 SHORT $LN5@fseek64_fi
  00036	83 7c 24 28 02	 cmp	 DWORD PTR tv64[rsp], 2
  0003b	74 0c		 je	 SHORT $LN4@fseek64_fi
  0003d	eb 1e		 jmp	 SHORT $LN2@fseek64_fi
$LN5@fseek64_fi:

; 177  :     {
; 178  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 179  :         fseek_origin = SEEK_CUR;

  0003f	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR fseek_origin$[rsp], 1

; 180  :         break;

  00047	eb 1b		 jmp	 SHORT $LN6@fseek64_fi
$LN4@fseek64_fi:

; 181  :     case ZLIB_FILEFUNC_SEEK_END :
; 182  :         fseek_origin = SEEK_END;

  00049	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR fseek_origin$[rsp], 2

; 183  :         break;

  00051	eb 11		 jmp	 SHORT $LN6@fseek64_fi
$LN3@fseek64_fi:

; 184  :     case ZLIB_FILEFUNC_SEEK_SET :
; 185  :         fseek_origin = SEEK_SET;

  00053	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR fseek_origin$[rsp], 0

; 186  :         break;

  0005b	eb 07		 jmp	 SHORT $LN6@fseek64_fi
$LN2@fseek64_fi:

; 187  :     default: return -1;

  0005d	b8 ff ff ff ff	 mov	 eax, -1
  00062	eb 2d		 jmp	 SHORT $LN8@fseek64_fi
$LN6@fseek64_fi:

; 188  :     }
; 189  :     ret = 0;

  00064	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0

; 190  : 
; 191  :     if(fseeko64((FILE *)stream, offset, fseek_origin) != 0)

  0006c	44 8b 44 24 20	 mov	 r8d, DWORD PTR fseek_origin$[rsp]
  00071	48 8b 54 24 50	 mov	 rdx, QWORD PTR offset$[rsp]
  00076	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stream$[rsp]
  0007b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fseeki64
  00081	85 c0		 test	 eax, eax
  00083	74 08		 je	 SHORT $LN1@fseek64_fi

; 192  :                         ret = -1;

  00085	c7 44 24 24 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1
$LN1@fseek64_fi:

; 193  : 
; 194  :     return ret;

  0008d	8b 44 24 24	 mov	 eax, DWORD PTR ret$[rsp]
$LN8@fseek64_fi:

; 195  : }

  00091	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00095	c3		 ret	 0
fseek64_file_func ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fseek_file_func DD imagerel fseek_file_func
	DD	imagerel fseek_file_func+149
	DD	imagerel $unwind$fseek_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fseek_file_func DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT fseek_file_func
_TEXT	SEGMENT
fseek_origin$ = 32
ret$ = 36
tv64 = 40
opaque$ = 64
stream$ = 72
offset$ = 80
origin$ = 88
fseek_file_func PROC					; COMDAT

; 150  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 151  :     int fseek_origin=0;

  00018	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR fseek_origin$[rsp], 0

; 152  :     long ret;
; 153  :     switch (origin)

  00020	8b 44 24 58	 mov	 eax, DWORD PTR origin$[rsp]
  00024	89 44 24 28	 mov	 DWORD PTR tv64[rsp], eax
  00028	83 7c 24 28 00	 cmp	 DWORD PTR tv64[rsp], 0
  0002d	74 24		 je	 SHORT $LN3@fseek_file
  0002f	83 7c 24 28 01	 cmp	 DWORD PTR tv64[rsp], 1
  00034	74 09		 je	 SHORT $LN5@fseek_file
  00036	83 7c 24 28 02	 cmp	 DWORD PTR tv64[rsp], 2
  0003b	74 0c		 je	 SHORT $LN4@fseek_file
  0003d	eb 1e		 jmp	 SHORT $LN2@fseek_file
$LN5@fseek_file:

; 154  :     {
; 155  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 156  :         fseek_origin = SEEK_CUR;

  0003f	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR fseek_origin$[rsp], 1

; 157  :         break;

  00047	eb 1b		 jmp	 SHORT $LN6@fseek_file
$LN4@fseek_file:

; 158  :     case ZLIB_FILEFUNC_SEEK_END :
; 159  :         fseek_origin = SEEK_END;

  00049	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR fseek_origin$[rsp], 2

; 160  :         break;

  00051	eb 11		 jmp	 SHORT $LN6@fseek_file
$LN3@fseek_file:

; 161  :     case ZLIB_FILEFUNC_SEEK_SET :
; 162  :         fseek_origin = SEEK_SET;

  00053	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR fseek_origin$[rsp], 0

; 163  :         break;

  0005b	eb 07		 jmp	 SHORT $LN6@fseek_file
$LN2@fseek_file:

; 164  :     default: return -1;

  0005d	b8 ff ff ff ff	 mov	 eax, -1
  00062	eb 2c		 jmp	 SHORT $LN8@fseek_file
$LN6@fseek_file:

; 165  :     }
; 166  :     ret = 0;

  00064	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0

; 167  :     if (fseek((FILE *)stream, offset, fseek_origin) != 0)

  0006c	44 8b 44 24 20	 mov	 r8d, DWORD PTR fseek_origin$[rsp]
  00071	8b 54 24 50	 mov	 edx, DWORD PTR offset$[rsp]
  00075	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stream$[rsp]
  0007a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fseek
  00080	85 c0		 test	 eax, eax
  00082	74 08		 je	 SHORT $LN1@fseek_file

; 168  :         ret = -1;

  00084	c7 44 24 24 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1
$LN1@fseek_file:

; 169  :     return ret;

  0008c	8b 44 24 24	 mov	 eax, DWORD PTR ret$[rsp]
$LN8@fseek_file:

; 170  : }

  00090	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00094	c3		 ret	 0
fseek_file_func ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ftell64_file_func DD imagerel ftell64_file_func
	DD	imagerel ftell64_file_func+40
	DD	imagerel $unwind$ftell64_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ftell64_file_func DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ftell64_file_func
_TEXT	SEGMENT
ret$ = 32
opaque$ = 64
stream$ = 72
ftell64_file_func PROC					; COMDAT

; 143  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 144  :     ZPOS64_T ret;
; 145  :     ret = ftello64((FILE *)stream);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stream$[rsp]
  00013	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__ftelli64
  00019	48 89 44 24 20	 mov	 QWORD PTR ret$[rsp], rax

; 146  :     return ret;

  0001e	48 8b 44 24 20	 mov	 rax, QWORD PTR ret$[rsp]

; 147  : }

  00023	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00027	c3		 ret	 0
ftell64_file_func ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ftell_file_func DD imagerel ftell_file_func
	DD	imagerel ftell_file_func+38
	DD	imagerel $unwind$ftell_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ftell_file_func DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ftell_file_func
_TEXT	SEGMENT
ret$ = 32
opaque$ = 64
stream$ = 72
ftell_file_func PROC					; COMDAT

; 135  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 136  :     long ret;
; 137  :     ret = ftell((FILE *)stream);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stream$[rsp]
  00013	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ftell
  00019	89 44 24 20	 mov	 DWORD PTR ret$[rsp], eax

; 138  :     return ret;

  0001d	8b 44 24 20	 mov	 eax, DWORD PTR ret$[rsp]

; 139  : }

  00021	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00025	c3		 ret	 0
ftell_file_func ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fwrite_file_func DD imagerel fwrite_file_func
	DD	imagerel fwrite_file_func+63
	DD	imagerel $unwind$fwrite_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fwrite_file_func DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT fwrite_file_func
_TEXT	SEGMENT
ret$ = 32
opaque$ = 64
stream$ = 72
buf$ = 80
size$ = 88
fwrite_file_func PROC					; COMDAT

; 128  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 129  :     uLong ret;
; 130  :     ret = (uLong)fwrite(buf, 1, (size_t)size, (FILE *)stream);

  00018	44 8b 44 24 58	 mov	 r8d, DWORD PTR size$[rsp]
  0001d	4c 8b 4c 24 48	 mov	 r9, QWORD PTR stream$[rsp]
  00022	ba 01 00 00 00	 mov	 edx, 1
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  0002c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwrite
  00032	89 44 24 20	 mov	 DWORD PTR ret$[rsp], eax

; 131  :     return ret;

  00036	8b 44 24 20	 mov	 eax, DWORD PTR ret$[rsp]

; 132  : }

  0003a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003e	c3		 ret	 0
fwrite_file_func ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fread_file_func DD imagerel fread_file_func
	DD	imagerel fread_file_func+63
	DD	imagerel $unwind$fread_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fread_file_func DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT fread_file_func
_TEXT	SEGMENT
ret$ = 32
opaque$ = 64
stream$ = 72
buf$ = 80
size$ = 88
fread_file_func PROC					; COMDAT

; 121  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 122  :     uLong ret;
; 123  :     ret = (uLong)fread(buf, 1, (size_t)size, (FILE *)stream);

  00018	44 8b 44 24 58	 mov	 r8d, DWORD PTR size$[rsp]
  0001d	4c 8b 4c 24 48	 mov	 r9, QWORD PTR stream$[rsp]
  00022	ba 01 00 00 00	 mov	 edx, 1
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  0002c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
  00032	89 44 24 20	 mov	 DWORD PTR ret$[rsp], eax

; 124  :     return ret;

  00036	8b 44 24 20	 mov	 eax, DWORD PTR ret$[rsp]

; 125  : }

  0003a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003e	c3		 ret	 0
fread_file_func ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fopen64_file_func DD imagerel fopen64_file_func
	DD	imagerel fopen64_file_func+158
	DD	imagerel $unwind$fopen64_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fopen64_file_func DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT fopen64_file_func
_TEXT	SEGMENT
file$ = 32
mode_fopen$ = 40
opaque$ = 64
filename$ = 72
mode$ = 80
fopen64_file_func PROC					; COMDAT

; 102  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 103  :     FILE* file = NULL;

  00013	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR file$[rsp], 0

; 104  :     const char* mode_fopen = NULL;

  0001c	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR mode_fopen$[rsp], 0

; 105  :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  00025	8b 44 24 50	 mov	 eax, DWORD PTR mode$[rsp]
  00029	83 e0 03	 and	 eax, 3
  0002c	83 f8 01	 cmp	 eax, 1
  0002f	75 0e		 jne	 SHORT $LN6@fopen64_fi

; 106  :         mode_fopen = "rb";

  00031	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02JDPG@rb?$AA@
  00038	48 89 44 24 28	 mov	 QWORD PTR mode_fopen$[rsp], rax

; 107  :     else

  0003d	eb 30		 jmp	 SHORT $LN5@fopen64_fi
$LN6@fopen64_fi:

; 108  :     if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  0003f	8b 44 24 50	 mov	 eax, DWORD PTR mode$[rsp]
  00043	83 e0 04	 and	 eax, 4
  00046	85 c0		 test	 eax, eax
  00048	74 0e		 je	 SHORT $LN4@fopen64_fi

; 109  :         mode_fopen = "r+b";

  0004a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03HMFOOINA@r?$CLb?$AA@
  00051	48 89 44 24 28	 mov	 QWORD PTR mode_fopen$[rsp], rax

; 110  :     else

  00056	eb 17		 jmp	 SHORT $LN3@fopen64_fi
$LN4@fopen64_fi:

; 111  :     if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  00058	8b 44 24 50	 mov	 eax, DWORD PTR mode$[rsp]
  0005c	83 e0 08	 and	 eax, 8
  0005f	85 c0		 test	 eax, eax
  00061	74 0c		 je	 SHORT $LN2@fopen64_fi

; 112  :         mode_fopen = "wb";

  00063	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02GMLFBBN@wb?$AA@
  0006a	48 89 44 24 28	 mov	 QWORD PTR mode_fopen$[rsp], rax
$LN2@fopen64_fi:
$LN3@fopen64_fi:
$LN5@fopen64_fi:

; 113  : 
; 114  :     if ((filename!=NULL) && (mode_fopen != NULL))

  0006f	48 83 7c 24 48
	00		 cmp	 QWORD PTR filename$[rsp], 0
  00075	74 1d		 je	 SHORT $LN1@fopen64_fi
  00077	48 83 7c 24 28
	00		 cmp	 QWORD PTR mode_fopen$[rsp], 0
  0007d	74 15		 je	 SHORT $LN1@fopen64_fi

; 115  :         file = fopen64((const char*)filename, mode_fopen);

  0007f	48 8b 54 24 28	 mov	 rdx, QWORD PTR mode_fopen$[rsp]
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR filename$[rsp]
  00089	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  0008f	48 89 44 24 20	 mov	 QWORD PTR file$[rsp], rax
$LN1@fopen64_fi:

; 116  :     return file;

  00094	48 8b 44 24 20	 mov	 rax, QWORD PTR file$[rsp]

; 117  : }

  00099	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009d	c3		 ret	 0
fopen64_file_func ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fopen_file_func DD imagerel fopen_file_func
	DD	imagerel fopen_file_func+158
	DD	imagerel $unwind$fopen_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fopen_file_func DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT fopen_file_func
_TEXT	SEGMENT
file$ = 32
mode_fopen$ = 40
opaque$ = 64
filename$ = 72
mode$ = 80
fopen_file_func PROC					; COMDAT

; 84   : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 85   :     FILE* file = NULL;

  00013	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR file$[rsp], 0

; 86   :     const char* mode_fopen = NULL;

  0001c	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR mode_fopen$[rsp], 0

; 87   :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  00025	8b 44 24 50	 mov	 eax, DWORD PTR mode$[rsp]
  00029	83 e0 03	 and	 eax, 3
  0002c	83 f8 01	 cmp	 eax, 1
  0002f	75 0e		 jne	 SHORT $LN6@fopen_file

; 88   :         mode_fopen = "rb";

  00031	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02JDPG@rb?$AA@
  00038	48 89 44 24 28	 mov	 QWORD PTR mode_fopen$[rsp], rax

; 89   :     else

  0003d	eb 30		 jmp	 SHORT $LN5@fopen_file
$LN6@fopen_file:

; 90   :     if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  0003f	8b 44 24 50	 mov	 eax, DWORD PTR mode$[rsp]
  00043	83 e0 04	 and	 eax, 4
  00046	85 c0		 test	 eax, eax
  00048	74 0e		 je	 SHORT $LN4@fopen_file

; 91   :         mode_fopen = "r+b";

  0004a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03HMFOOINA@r?$CLb?$AA@
  00051	48 89 44 24 28	 mov	 QWORD PTR mode_fopen$[rsp], rax

; 92   :     else

  00056	eb 17		 jmp	 SHORT $LN3@fopen_file
$LN4@fopen_file:

; 93   :     if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  00058	8b 44 24 50	 mov	 eax, DWORD PTR mode$[rsp]
  0005c	83 e0 08	 and	 eax, 8
  0005f	85 c0		 test	 eax, eax
  00061	74 0c		 je	 SHORT $LN2@fopen_file

; 94   :         mode_fopen = "wb";

  00063	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02GMLFBBN@wb?$AA@
  0006a	48 89 44 24 28	 mov	 QWORD PTR mode_fopen$[rsp], rax
$LN2@fopen_file:
$LN3@fopen_file:
$LN5@fopen_file:

; 95   : 
; 96   :     if ((filename!=NULL) && (mode_fopen != NULL))

  0006f	48 83 7c 24 48
	00		 cmp	 QWORD PTR filename$[rsp], 0
  00075	74 1d		 je	 SHORT $LN1@fopen_file
  00077	48 83 7c 24 28
	00		 cmp	 QWORD PTR mode_fopen$[rsp], 0
  0007d	74 15		 je	 SHORT $LN1@fopen_file

; 97   :         file = fopen(filename, mode_fopen);

  0007f	48 8b 54 24 28	 mov	 rdx, QWORD PTR mode_fopen$[rsp]
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR filename$[rsp]
  00089	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  0008f	48 89 44 24 20	 mov	 QWORD PTR file$[rsp], rax
$LN1@fopen_file:

; 98   :     return file;

  00094	48 8b 44 24 20	 mov	 rax, QWORD PTR file$[rsp]

; 99   : }

  00099	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009d	c3		 ret	 0
fopen_file_func ENDP
_TEXT	ENDS
PUBLIC	fill_zlib_filefunc64_32_def_from_filefunc32
; Function compile flags: /Odtp
;	COMDAT fill_zlib_filefunc64_32_def_from_filefunc32
_TEXT	SEGMENT
p_filefunc64_32$ = 8
p_filefunc32$ = 16
fill_zlib_filefunc64_32_def_from_filefunc32 PROC	; COMDAT

; 58   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 59   :     p_filefunc64_32->zfile_func64.zopen64_file = NULL;

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR p_filefunc64_32$[rsp]
  0000f	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 60   :     p_filefunc64_32->zopen32_file = p_filefunc32->zopen_file;

  00016	48 8b 4c 24 08	 mov	 rcx, QWORD PTR p_filefunc64_32$[rsp]
  0001b	48 8b 44 24 10	 mov	 rax, QWORD PTR p_filefunc32$[rsp]
  00020	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00023	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax

; 61   :     p_filefunc64_32->zfile_func64.zerror_file = p_filefunc32->zerror_file;

  00027	48 8b 4c 24 08	 mov	 rcx, QWORD PTR p_filefunc64_32$[rsp]
  0002c	48 8b 44 24 10	 mov	 rax, QWORD PTR p_filefunc32$[rsp]
  00031	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00035	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 62   :     p_filefunc64_32->zfile_func64.zread_file = p_filefunc32->zread_file;

  00039	48 8b 4c 24 08	 mov	 rcx, QWORD PTR p_filefunc64_32$[rsp]
  0003e	48 8b 44 24 10	 mov	 rax, QWORD PTR p_filefunc32$[rsp]
  00043	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00047	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 63   :     p_filefunc64_32->zfile_func64.zwrite_file = p_filefunc32->zwrite_file;

  0004b	48 8b 4c 24 08	 mov	 rcx, QWORD PTR p_filefunc64_32$[rsp]
  00050	48 8b 44 24 10	 mov	 rax, QWORD PTR p_filefunc32$[rsp]
  00055	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00059	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 64   :     p_filefunc64_32->zfile_func64.ztell64_file = NULL;

  0005d	48 8b 44 24 08	 mov	 rax, QWORD PTR p_filefunc64_32$[rsp]
  00062	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 65   :     p_filefunc64_32->zfile_func64.zseek64_file = NULL;

  0006a	48 8b 44 24 08	 mov	 rax, QWORD PTR p_filefunc64_32$[rsp]
  0006f	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0

; 66   :     p_filefunc64_32->zfile_func64.zclose_file = p_filefunc32->zclose_file;

  00077	48 8b 4c 24 08	 mov	 rcx, QWORD PTR p_filefunc64_32$[rsp]
  0007c	48 8b 44 24 10	 mov	 rax, QWORD PTR p_filefunc32$[rsp]
  00081	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00085	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 67   :     p_filefunc64_32->zfile_func64.zerror_file = p_filefunc32->zerror_file;

  00089	48 8b 4c 24 08	 mov	 rcx, QWORD PTR p_filefunc64_32$[rsp]
  0008e	48 8b 44 24 10	 mov	 rax, QWORD PTR p_filefunc32$[rsp]
  00093	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00097	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 68   :     p_filefunc64_32->zfile_func64.opaque = p_filefunc32->opaque;

  0009b	48 8b 4c 24 08	 mov	 rcx, QWORD PTR p_filefunc64_32$[rsp]
  000a0	48 8b 44 24 10	 mov	 rax, QWORD PTR p_filefunc32$[rsp]
  000a5	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  000a9	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 69   :     p_filefunc64_32->zseek32_file = p_filefunc32->zseek_file;

  000ad	48 8b 4c 24 08	 mov	 rcx, QWORD PTR p_filefunc64_32$[rsp]
  000b2	48 8b 44 24 10	 mov	 rax, QWORD PTR p_filefunc32$[rsp]
  000b7	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000bb	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax

; 70   :     p_filefunc64_32->ztell32_file = p_filefunc32->ztell_file;

  000bf	48 8b 4c 24 08	 mov	 rcx, QWORD PTR p_filefunc64_32$[rsp]
  000c4	48 8b 44 24 10	 mov	 rax, QWORD PTR p_filefunc32$[rsp]
  000c9	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  000cd	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 71   : }

  000d1	c3		 ret	 0
fill_zlib_filefunc64_32_def_from_filefunc32 ENDP
_TEXT	ENDS
PUBLIC	call_ztell64
;	COMDAT pdata
pdata	SEGMENT
$pdata$call_ztell64 DD imagerel $LN7
	DD	imagerel $LN7+105
	DD	imagerel $unwind$call_ztell64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$call_ztell64 DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT call_ztell64
_TEXT	SEGMENT
tell_uLong$79737 = 32
pfilefunc$ = 64
filestream$ = 72
call_ztell64 PROC					; COMDAT

; 44   : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 45   :     if (pfilefunc->zfile_func64.zseek64_file != NULL)

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR pfilefunc$[rsp]
  00013	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  00018	74 1a		 je	 SHORT $LN4@call_ztell

; 46   :         return (*(pfilefunc->zfile_func64.ztell64_file)) (pfilefunc->zfile_func64.opaque,filestream);

  0001a	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  0001f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pfilefunc$[rsp]
  00024	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00028	48 8b 44 24 40	 mov	 rax, QWORD PTR pfilefunc$[rsp]
  0002d	ff 50 18	 call	 QWORD PTR [rax+24]
  00030	eb 32		 jmp	 SHORT $LN5@call_ztell

; 47   :     else

  00032	eb 30		 jmp	 SHORT $LN3@call_ztell
$LN4@call_ztell:

; 48   :     {
; 49   :         uLong tell_uLong = (*(pfilefunc->ztell32_file))(pfilefunc->zfile_func64.opaque,filestream);

  00034	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  00039	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pfilefunc$[rsp]
  0003e	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00042	48 8b 44 24 40	 mov	 rax, QWORD PTR pfilefunc$[rsp]
  00047	ff 50 48	 call	 QWORD PTR [rax+72]
  0004a	89 44 24 20	 mov	 DWORD PTR tell_uLong$79737[rsp], eax

; 50   :         if ((tell_uLong) == ((uLong)-1))

  0004e	83 7c 24 20 ff	 cmp	 DWORD PTR tell_uLong$79737[rsp], -1 ; ffffffffH
  00053	75 0b		 jne	 SHORT $LN2@call_ztell

; 51   :             return (ZPOS64_T)-1;

  00055	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0005c	eb 06		 jmp	 SHORT $LN5@call_ztell

; 52   :         else

  0005e	eb 04		 jmp	 SHORT $LN1@call_ztell
$LN2@call_ztell:

; 53   :             return tell_uLong;

  00060	8b 44 24 20	 mov	 eax, DWORD PTR tell_uLong$79737[rsp]
$LN1@call_ztell:
$LN3@call_ztell:
$LN5@call_ztell:

; 54   :     }
; 55   : }

  00064	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00068	c3		 ret	 0
call_ztell64 ENDP
_TEXT	ENDS
PUBLIC	call_zseek64
;	COMDAT pdata
pdata	SEGMENT
$pdata$call_zseek64 DD imagerel $LN7
	DD	imagerel $LN7+137
	DD	imagerel $unwind$call_zseek64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$call_zseek64 DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT call_zseek64
_TEXT	SEGMENT
offsetTruncated$79725 = 32
pfilefunc$ = 64
filestream$ = 72
offset$ = 80
origin$ = 88
call_zseek64 PROC					; COMDAT

; 30   : {

$LN7:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 31   :     if (pfilefunc->zfile_func64.zseek64_file != NULL)

  00018	48 8b 44 24 40	 mov	 rax, QWORD PTR pfilefunc$[rsp]
  0001d	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  00022	74 24		 je	 SHORT $LN4@call_zseek

; 32   :         return (*(pfilefunc->zfile_func64.zseek64_file)) (pfilefunc->zfile_func64.opaque,filestream,offset,origin);

  00024	44 8b 4c 24 58	 mov	 r9d, DWORD PTR origin$[rsp]
  00029	4c 8b 44 24 50	 mov	 r8, QWORD PTR offset$[rsp]
  0002e	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  00033	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pfilefunc$[rsp]
  00038	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR pfilefunc$[rsp]
  00041	ff 50 20	 call	 QWORD PTR [rax+32]
  00044	eb 3e		 jmp	 SHORT $LN5@call_zseek

; 33   :     else

  00046	eb 3c		 jmp	 SHORT $LN3@call_zseek
$LN4@call_zseek:

; 34   :     {
; 35   :         uLong offsetTruncated = (uLong)offset;

  00048	8b 44 24 50	 mov	 eax, DWORD PTR offset$[rsp]
  0004c	89 44 24 20	 mov	 DWORD PTR offsetTruncated$79725[rsp], eax

; 36   :         if (offsetTruncated != offset)

  00050	8b 44 24 20	 mov	 eax, DWORD PTR offsetTruncated$79725[rsp]
  00054	48 3b 44 24 50	 cmp	 rax, QWORD PTR offset$[rsp]
  00059	74 09		 je	 SHORT $LN2@call_zseek

; 37   :             return -1;

  0005b	b8 ff ff ff ff	 mov	 eax, -1
  00060	eb 22		 jmp	 SHORT $LN5@call_zseek

; 38   :         else

  00062	eb 20		 jmp	 SHORT $LN1@call_zseek
$LN2@call_zseek:

; 39   :             return (*(pfilefunc->zseek32_file))(pfilefunc->zfile_func64.opaque,filestream,offsetTruncated,origin);

  00064	44 8b 4c 24 58	 mov	 r9d, DWORD PTR origin$[rsp]
  00069	44 8b 44 24 20	 mov	 r8d, DWORD PTR offsetTruncated$79725[rsp]
  0006e	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  00073	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pfilefunc$[rsp]
  00078	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0007c	48 8b 44 24 40	 mov	 rax, QWORD PTR pfilefunc$[rsp]
  00081	ff 50 50	 call	 QWORD PTR [rax+80]
$LN1@call_zseek:
$LN3@call_zseek:
$LN5@call_zseek:

; 40   :     }
; 41   : }

  00084	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00088	c3		 ret	 0
call_zseek64 ENDP
_TEXT	ENDS
PUBLIC	call_zopen64
;	COMDAT pdata
pdata	SEGMENT
$pdata$call_zopen64 DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$call_zopen64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$call_zopen64 DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT call_zopen64
_TEXT	SEGMENT
pfilefunc$ = 48
filename$ = 56
mode$ = 64
call_zopen64 PROC					; COMDAT

; 20   : {

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 21   :     if (pfilefunc->zfile_func64.zopen64_file != NULL)

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR pfilefunc$[rsp]
  00018	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0001c	74 1e		 je	 SHORT $LN2@call_zopen

; 22   :         return (*(pfilefunc->zfile_func64.zopen64_file)) (pfilefunc->zfile_func64.opaque,filename,mode);

  0001e	44 8b 44 24 40	 mov	 r8d, DWORD PTR mode$[rsp]
  00023	48 8b 54 24 38	 mov	 rdx, QWORD PTR filename$[rsp]
  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfilefunc$[rsp]
  0002d	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR pfilefunc$[rsp]
  00036	ff 10		 call	 QWORD PTR [rax]
  00038	eb 1d		 jmp	 SHORT $LN3@call_zopen

; 23   :     else

  0003a	eb 1b		 jmp	 SHORT $LN1@call_zopen
$LN2@call_zopen:

; 24   :     {
; 25   :         return (*(pfilefunc->zopen32_file))(pfilefunc->zfile_func64.opaque,(const char*)filename,mode);

  0003c	44 8b 44 24 40	 mov	 r8d, DWORD PTR mode$[rsp]
  00041	48 8b 54 24 38	 mov	 rdx, QWORD PTR filename$[rsp]
  00046	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pfilefunc$[rsp]
  0004b	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0004f	48 8b 44 24 30	 mov	 rax, QWORD PTR pfilefunc$[rsp]
  00054	ff 50 40	 call	 QWORD PTR [rax+64]
$LN1@call_zopen:
$LN3@call_zopen:

; 26   :     }
; 27   : }

  00057	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005b	c3		 ret	 0
call_zopen64 ENDP
PUBLIC	fill_fopen64_filefunc
; Function compile flags: /Odtp
;	COMDAT fill_fopen64_filefunc
_TEXT	SEGMENT
pzlib_filefunc_def$ = 8
fill_fopen64_filefunc PROC				; COMDAT

; 226  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 227  :     pzlib_filefunc_def->zopen64_file = fopen64_file_func;

  00005	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:fopen64_file_func
  00011	48 89 01	 mov	 QWORD PTR [rcx], rax

; 228  :     pzlib_filefunc_def->zread_file = fread_file_func;

  00014	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:fread_file_func
  00020	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 229  :     pzlib_filefunc_def->zwrite_file = fwrite_file_func;

  00024	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:fwrite_file_func
  00030	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 230  :     pzlib_filefunc_def->ztell64_file = ftell64_file_func;

  00034	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:ftell64_file_func
  00040	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 231  :     pzlib_filefunc_def->zseek64_file = fseek64_file_func;

  00044	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:fseek64_file_func
  00050	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 232  :     pzlib_filefunc_def->zclose_file = fclose_file_func;

  00054	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:fclose_file_func
  00060	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 233  :     pzlib_filefunc_def->zerror_file = ferror_file_func;

  00064	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:ferror_file_func
  00070	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 234  :     pzlib_filefunc_def->opaque = NULL;

  00074	48 8b 44 24 08	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  00079	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 235  : }

  00081	c3		 ret	 0
fill_fopen64_filefunc ENDP
END
