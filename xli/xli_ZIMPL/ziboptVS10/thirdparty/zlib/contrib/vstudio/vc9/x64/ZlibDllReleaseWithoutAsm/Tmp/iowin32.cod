; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

include listing.inc

INCLUDELIB OLDNAMES

EXTRN	__imp_CreateFileW:PROC
EXTRN	__imp_CreateFileA:PROC
EXTRN	__imp_ReadFile:PROC
EXTRN	__imp_WriteFile:PROC
EXTRN	__imp_GetLastError:PROC
EXTRN	__imp_SetFilePointer:PROC
EXTRN	__imp_CloseHandle:PROC
PUBLIC	win32_error_file_func
;	COMDAT pdata
; File d:\lp_solve_5.5\xli\xli_zimpl\ziboptvs10\thirdparty\zlib\contrib\minizip\iowin32.c
pdata	SEGMENT
$pdata$win32_error_file_func DD imagerel $LN4
	DD	imagerel $LN4+48
	DD	imagerel $unwind$win32_error_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_error_file_func DD 010e01H
	DD	0220eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT win32_error_file_func
_TEXT	SEGMENT
ret$ = 0
opaque$ = 32
stream$ = 40
win32_error_file_func PROC				; COMDAT

; 332  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 333  :     int ret=-1;

  0000e	c7 04 24 ff ff
	ff ff		 mov	 DWORD PTR ret$[rsp], -1

; 334  :     if (stream!=NULL)

  00015	48 83 7c 24 28
	00		 cmp	 QWORD PTR stream$[rsp], 0
  0001b	74 0b		 je	 SHORT $LN1@win32_erro

; 335  :     {
; 336  :         ret = ((WIN32FILE_IOWIN*)stream) -> error;

  0001d	48 8b 44 24 28	 mov	 rax, QWORD PTR stream$[rsp]
  00022	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00025	89 04 24	 mov	 DWORD PTR ret$[rsp], eax
$LN1@win32_erro:

; 337  :     }
; 338  :     return ret;

  00028	8b 04 24	 mov	 eax, DWORD PTR ret$[rsp]

; 339  : }

  0002b	48 83 c4 18	 add	 rsp, 24
  0002f	c3		 ret	 0
win32_error_file_func ENDP
_TEXT	ENDS
PUBLIC	win32_close_file_func
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_close_file_func DD imagerel $LN5
	DD	imagerel $LN5+90
	DD	imagerel $unwind$win32_close_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_close_file_func DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT win32_close_file_func
_TEXT	SEGMENT
ret$ = 32
hFile$80050 = 40
opaque$ = 64
stream$ = 72
win32_close_file_func PROC				; COMDAT

; 314  : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 315  :     int ret=-1;

  0000e	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1

; 316  : 
; 317  :     if (stream!=NULL)

  00016	48 83 7c 24 48
	00		 cmp	 QWORD PTR stream$[rsp], 0
  0001c	74 33		 je	 SHORT $LN2@win32_clos

; 318  :     {
; 319  :         HANDLE hFile;
; 320  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  0001e	48 8b 44 24 48	 mov	 rax, QWORD PTR stream$[rsp]
  00023	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00026	48 89 44 24 28	 mov	 QWORD PTR hFile$80050[rsp], rax

; 321  :         if (hFile != NULL)

  0002b	48 83 7c 24 28
	00		 cmp	 QWORD PTR hFile$80050[rsp], 0
  00031	74 13		 je	 SHORT $LN1@win32_clos

; 322  :         {
; 323  :             CloseHandle(hFile);

  00033	48 8b 4c 24 28	 mov	 rcx, QWORD PTR hFile$80050[rsp]
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 324  :             ret=0;

  0003e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0
$LN1@win32_clos:

; 325  :         }
; 326  :         free(stream);

  00046	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stream$[rsp]
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN2@win32_clos:

; 327  :     }
; 328  :     return ret;

  00051	8b 44 24 20	 mov	 eax, DWORD PTR ret$[rsp]

; 329  : }

  00055	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00059	c3		 ret	 0
win32_close_file_func ENDP
_TEXT	ENDS
PUBLIC	win32_seek64_file_func
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_seek64_file_func DD imagerel $LN13
	DD	imagerel $LN13+248
	DD	imagerel $unwind$win32_seek64_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_seek64_file_func DD 011801H
	DD	0a218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT win32_seek64_file_func
_TEXT	SEGMENT
hFile$ = 32
ret$ = 40
dwMoveMethod$ = 44
dwSet$80035 = 48
li$80033 = 56
dwErr$80038 = 64
tv65 = 68
opaque$ = 96
stream$ = 104
offset$ = 112
origin$ = 120
win32_seek64_file_func PROC				; COMDAT

; 275  : {

$LN13:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 276  :     DWORD dwMoveMethod=0xFFFFFFFF;

  00018	c7 44 24 2c ff
	ff ff ff	 mov	 DWORD PTR dwMoveMethod$[rsp], -1 ; ffffffffH

; 277  :     HANDLE hFile = NULL;

  00020	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR hFile$[rsp], 0

; 278  :     long ret=-1;

  00029	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1

; 279  : 
; 280  :     if (stream!=NULL)

  00031	48 83 7c 24 68
	00		 cmp	 QWORD PTR stream$[rsp], 0
  00037	74 0d		 je	 SHORT $LN10@win32_seek

; 281  :         hFile = ((WIN32FILE_IOWIN*)stream)->hf;

  00039	48 8b 44 24 68	 mov	 rax, QWORD PTR stream$[rsp]
  0003e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00041	48 89 44 24 20	 mov	 QWORD PTR hFile$[rsp], rax
$LN10@win32_seek:

; 282  : 
; 283  :     switch (origin)

  00046	8b 44 24 78	 mov	 eax, DWORD PTR origin$[rsp]
  0004a	89 44 24 44	 mov	 DWORD PTR tv65[rsp], eax
  0004e	83 7c 24 44 00	 cmp	 DWORD PTR tv65[rsp], 0
  00053	74 24		 je	 SHORT $LN5@win32_seek
  00055	83 7c 24 44 01	 cmp	 DWORD PTR tv65[rsp], 1
  0005a	74 09		 je	 SHORT $LN7@win32_seek
  0005c	83 7c 24 44 02	 cmp	 DWORD PTR tv65[rsp], 2
  00061	74 0c		 je	 SHORT $LN6@win32_seek
  00063	eb 1e		 jmp	 SHORT $LN4@win32_seek
$LN7@win32_seek:

; 284  :     {
; 285  :         case ZLIB_FILEFUNC_SEEK_CUR :
; 286  :             dwMoveMethod = FILE_CURRENT;

  00065	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR dwMoveMethod$[rsp], 1

; 287  :             break;

  0006d	eb 1b		 jmp	 SHORT $LN8@win32_seek
$LN6@win32_seek:

; 288  :         case ZLIB_FILEFUNC_SEEK_END :
; 289  :             dwMoveMethod = FILE_END;

  0006f	c7 44 24 2c 02
	00 00 00	 mov	 DWORD PTR dwMoveMethod$[rsp], 2

; 290  :             break;

  00077	eb 11		 jmp	 SHORT $LN8@win32_seek
$LN5@win32_seek:

; 291  :         case ZLIB_FILEFUNC_SEEK_SET :
; 292  :             dwMoveMethod = FILE_BEGIN;

  00079	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR dwMoveMethod$[rsp], 0

; 293  :             break;

  00081	eb 07		 jmp	 SHORT $LN8@win32_seek
$LN4@win32_seek:

; 294  :         default: return -1;

  00083	b8 ff ff ff ff	 mov	 eax, -1
  00088	eb 69		 jmp	 SHORT $LN11@win32_seek
$LN8@win32_seek:

; 295  :     }
; 296  : 
; 297  :     if (hFile)

  0008a	48 83 7c 24 20
	00		 cmp	 QWORD PTR hFile$[rsp], 0
  00090	74 5d		 je	 SHORT $LN3@win32_seek

; 298  :     {
; 299  :         LARGE_INTEGER* li = (LARGE_INTEGER*)&offset;

  00092	48 8d 44 24 70	 lea	 rax, QWORD PTR offset$[rsp]
  00097	48 89 44 24 38	 mov	 QWORD PTR li$80033[rsp], rax

; 300  :         DWORD dwSet = SetFilePointer(hFile, li->u.LowPart, &li->u.HighPart, dwMoveMethod);

  0009c	4c 8b 44 24 38	 mov	 r8, QWORD PTR li$80033[rsp]
  000a1	49 83 c0 04	 add	 r8, 4
  000a5	44 8b 4c 24 2c	 mov	 r9d, DWORD PTR dwMoveMethod$[rsp]
  000aa	48 8b 44 24 38	 mov	 rax, QWORD PTR li$80033[rsp]
  000af	8b 10		 mov	 edx, DWORD PTR [rax]
  000b1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR hFile$[rsp]
  000b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetFilePointer
  000bc	89 44 24 30	 mov	 DWORD PTR dwSet$80035[rsp], eax

; 301  :         if (dwSet == INVALID_SET_FILE_POINTER)

  000c0	83 7c 24 30 ff	 cmp	 DWORD PTR dwSet$80035[rsp], -1 ; ffffffffH
  000c5	75 20		 jne	 SHORT $LN2@win32_seek

; 302  :         {
; 303  :             DWORD dwErr = GetLastError();

  000c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  000cd	89 44 24 40	 mov	 DWORD PTR dwErr$80038[rsp], eax

; 304  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  000d1	48 8b 4c 24 68	 mov	 rcx, QWORD PTR stream$[rsp]
  000d6	8b 44 24 40	 mov	 eax, DWORD PTR dwErr$80038[rsp]
  000da	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 305  :             ret = -1;

  000dd	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1

; 306  :         }
; 307  :         else

  000e5	eb 08		 jmp	 SHORT $LN1@win32_seek
$LN2@win32_seek:

; 308  :             ret=0;

  000e7	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0
$LN1@win32_seek:
$LN3@win32_seek:

; 309  :     }
; 310  :     return ret;

  000ef	8b 44 24 28	 mov	 eax, DWORD PTR ret$[rsp]
$LN11@win32_seek:

; 311  : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
win32_seek64_file_func ENDP
_TEXT	ENDS
PUBLIC	win32_seek_file_func
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_seek_file_func DD imagerel $LN13
	DD	imagerel $LN13+229
	DD	imagerel $unwind$win32_seek_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_seek_file_func DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT win32_seek_file_func
_TEXT	SEGMENT
hFile$ = 32
ret$ = 40
dwMoveMethod$ = 44
dwSet$80000 = 48
dwErr$80004 = 52
tv65 = 56
opaque$ = 80
stream$ = 88
offset$ = 96
origin$ = 104
win32_seek_file_func PROC				; COMDAT

; 238  : {

$LN13:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 239  :     DWORD dwMoveMethod=0xFFFFFFFF;

  00018	c7 44 24 2c ff
	ff ff ff	 mov	 DWORD PTR dwMoveMethod$[rsp], -1 ; ffffffffH

; 240  :     HANDLE hFile = NULL;

  00020	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR hFile$[rsp], 0

; 241  : 
; 242  :     long ret=-1;

  00029	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1

; 243  :     if (stream!=NULL)

  00031	48 83 7c 24 58
	00		 cmp	 QWORD PTR stream$[rsp], 0
  00037	74 0d		 je	 SHORT $LN10@win32_seek@2

; 244  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00039	48 8b 44 24 58	 mov	 rax, QWORD PTR stream$[rsp]
  0003e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00041	48 89 44 24 20	 mov	 QWORD PTR hFile$[rsp], rax
$LN10@win32_seek@2:

; 245  :     switch (origin)

  00046	8b 44 24 68	 mov	 eax, DWORD PTR origin$[rsp]
  0004a	89 44 24 38	 mov	 DWORD PTR tv65[rsp], eax
  0004e	83 7c 24 38 00	 cmp	 DWORD PTR tv65[rsp], 0
  00053	74 24		 je	 SHORT $LN5@win32_seek@2
  00055	83 7c 24 38 01	 cmp	 DWORD PTR tv65[rsp], 1
  0005a	74 09		 je	 SHORT $LN7@win32_seek@2
  0005c	83 7c 24 38 02	 cmp	 DWORD PTR tv65[rsp], 2
  00061	74 0c		 je	 SHORT $LN6@win32_seek@2
  00063	eb 1e		 jmp	 SHORT $LN4@win32_seek@2
$LN7@win32_seek@2:

; 246  :     {
; 247  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 248  :         dwMoveMethod = FILE_CURRENT;

  00065	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR dwMoveMethod$[rsp], 1

; 249  :         break;

  0006d	eb 1b		 jmp	 SHORT $LN8@win32_seek@2
$LN6@win32_seek@2:

; 250  :     case ZLIB_FILEFUNC_SEEK_END :
; 251  :         dwMoveMethod = FILE_END;

  0006f	c7 44 24 2c 02
	00 00 00	 mov	 DWORD PTR dwMoveMethod$[rsp], 2

; 252  :         break;

  00077	eb 11		 jmp	 SHORT $LN8@win32_seek@2
$LN5@win32_seek@2:

; 253  :     case ZLIB_FILEFUNC_SEEK_SET :
; 254  :         dwMoveMethod = FILE_BEGIN;

  00079	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR dwMoveMethod$[rsp], 0

; 255  :         break;

  00081	eb 07		 jmp	 SHORT $LN8@win32_seek@2
$LN4@win32_seek@2:

; 256  :     default: return -1;

  00083	b8 ff ff ff ff	 mov	 eax, -1
  00088	eb 56		 jmp	 SHORT $LN11@win32_seek@2
$LN8@win32_seek@2:

; 257  :     }
; 258  : 
; 259  :     if (hFile != NULL)

  0008a	48 83 7c 24 20
	00		 cmp	 QWORD PTR hFile$[rsp], 0
  00090	74 4a		 je	 SHORT $LN3@win32_seek@2

; 260  :     {
; 261  :         DWORD dwSet = SetFilePointer(hFile, offset, NULL, dwMoveMethod);

  00092	44 8b 4c 24 2c	 mov	 r9d, DWORD PTR dwMoveMethod$[rsp]
  00097	45 33 c0	 xor	 r8d, r8d
  0009a	8b 54 24 60	 mov	 edx, DWORD PTR offset$[rsp]
  0009e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR hFile$[rsp]
  000a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetFilePointer
  000a9	89 44 24 30	 mov	 DWORD PTR dwSet$80000[rsp], eax

; 262  :         if (dwSet == INVALID_SET_FILE_POINTER)

  000ad	83 7c 24 30 ff	 cmp	 DWORD PTR dwSet$80000[rsp], -1 ; ffffffffH
  000b2	75 20		 jne	 SHORT $LN2@win32_seek@2

; 263  :         {
; 264  :             DWORD dwErr = GetLastError();

  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  000ba	89 44 24 34	 mov	 DWORD PTR dwErr$80004[rsp], eax

; 265  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  000be	48 8b 4c 24 58	 mov	 rcx, QWORD PTR stream$[rsp]
  000c3	8b 44 24 34	 mov	 eax, DWORD PTR dwErr$80004[rsp]
  000c7	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 266  :             ret = -1;

  000ca	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1

; 267  :         }
; 268  :         else

  000d2	eb 08		 jmp	 SHORT $LN1@win32_seek@2
$LN2@win32_seek@2:

; 269  :             ret=0;

  000d4	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0
$LN1@win32_seek@2:
$LN3@win32_seek@2:

; 270  :     }
; 271  :     return ret;

  000dc	8b 44 24 28	 mov	 eax, DWORD PTR ret$[rsp]
$LN11@win32_seek@2:

; 272  : }

  000e0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e4	c3		 ret	 0
win32_seek_file_func ENDP
_TEXT	ENDS
PUBLIC	win32_tell64_file_func
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_tell64_file_func DD imagerel $LN7
	DD	imagerel $LN7+170
	DD	imagerel $unwind$win32_tell64_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_tell64_file_func DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT win32_tell64_file_func
_TEXT	SEGMENT
hFile$ = 32
ret$ = 40
li$79966 = 48
dwErr$79968 = 56
opaque$ = 80
stream$ = 88
win32_tell64_file_func PROC				; COMDAT

; 213  : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 214  :     ZPOS64_T ret= (ZPOS64_T)-1;

  0000e	48 c7 44 24 28
	ff ff ff ff	 mov	 QWORD PTR ret$[rsp], -1

; 215  :     HANDLE hFile = NULL;

  00017	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR hFile$[rsp], 0

; 216  :     if (stream!=NULL)

  00020	48 83 7c 24 58
	00		 cmp	 QWORD PTR stream$[rsp], 0
  00026	74 0d		 je	 SHORT $LN4@win32_tell

; 217  :         hFile = ((WIN32FILE_IOWIN*)stream)->hf;

  00028	48 8b 44 24 58	 mov	 rax, QWORD PTR stream$[rsp]
  0002d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00030	48 89 44 24 20	 mov	 QWORD PTR hFile$[rsp], rax
$LN4@win32_tell:

; 218  : 
; 219  :     if (hFile)

  00035	48 83 7c 24 20
	00		 cmp	 QWORD PTR hFile$[rsp], 0
  0003b	74 63		 je	 SHORT $LN3@win32_tell

; 220  :     {
; 221  :         LARGE_INTEGER li;
; 222  :         li.QuadPart = 0;

  0003d	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR li$79966[rsp], 0

; 223  :         li.u.LowPart = SetFilePointer(hFile, li.u.LowPart, &li.u.HighPart, FILE_CURRENT);

  00046	41 b9 01 00 00
	00		 mov	 r9d, 1
  0004c	4c 8d 44 24 34	 lea	 r8, QWORD PTR li$79966[rsp+4]
  00051	8b 54 24 30	 mov	 edx, DWORD PTR li$79966[rsp]
  00055	48 8b 4c 24 20	 mov	 rcx, QWORD PTR hFile$[rsp]
  0005a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetFilePointer
  00060	89 44 24 30	 mov	 DWORD PTR li$79966[rsp], eax

; 224  :         if ( (li.LowPart == 0xFFFFFFFF) && (GetLastError() != NO_ERROR))

  00064	83 7c 24 30 ff	 cmp	 DWORD PTR li$79966[rsp], -1 ; ffffffffH
  00069	75 2b		 jne	 SHORT $LN2@win32_tell
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  00071	85 c0		 test	 eax, eax
  00073	74 21		 je	 SHORT $LN2@win32_tell

; 225  :         {
; 226  :             DWORD dwErr = GetLastError();

  00075	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  0007b	89 44 24 38	 mov	 DWORD PTR dwErr$79968[rsp], eax

; 227  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  0007f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR stream$[rsp]
  00084	8b 44 24 38	 mov	 eax, DWORD PTR dwErr$79968[rsp]
  00088	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 228  :             ret = (ZPOS64_T)-1;

  0008b	48 c7 44 24 28
	ff ff ff ff	 mov	 QWORD PTR ret$[rsp], -1

; 229  :         }
; 230  :         else

  00094	eb 0a		 jmp	 SHORT $LN1@win32_tell
$LN2@win32_tell:

; 231  :             ret=li.QuadPart;

  00096	48 8b 44 24 30	 mov	 rax, QWORD PTR li$79966[rsp]
  0009b	48 89 44 24 28	 mov	 QWORD PTR ret$[rsp], rax
$LN1@win32_tell:
$LN3@win32_tell:

; 232  :     }
; 233  :     return ret;

  000a0	48 8b 44 24 28	 mov	 rax, QWORD PTR ret$[rsp]

; 234  : }

  000a5	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a9	c3		 ret	 0
win32_tell64_file_func ENDP
_TEXT	ENDS
PUBLIC	win32_tell_file_func
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_tell_file_func DD imagerel $LN7
	DD	imagerel $LN7+142
	DD	imagerel $unwind$win32_tell_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_tell_file_func DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT win32_tell_file_func
_TEXT	SEGMENT
hFile$ = 32
ret$ = 40
dwSet$79944 = 44
dwErr$79948 = 48
opaque$ = 80
stream$ = 88
win32_tell_file_func PROC				; COMDAT

; 192  : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 193  :     long ret=-1;

  0000e	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1

; 194  :     HANDLE hFile = NULL;

  00016	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR hFile$[rsp], 0

; 195  :     if (stream!=NULL)

  0001f	48 83 7c 24 58
	00		 cmp	 QWORD PTR stream$[rsp], 0
  00025	74 0d		 je	 SHORT $LN4@win32_tell@2

; 196  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00027	48 8b 44 24 58	 mov	 rax, QWORD PTR stream$[rsp]
  0002c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002f	48 89 44 24 20	 mov	 QWORD PTR hFile$[rsp], rax
$LN4@win32_tell@2:

; 197  :     if (hFile != NULL)

  00034	48 83 7c 24 20
	00		 cmp	 QWORD PTR hFile$[rsp], 0
  0003a	74 49		 je	 SHORT $LN3@win32_tell@2

; 198  :     {
; 199  :         DWORD dwSet = SetFilePointer(hFile, 0, NULL, FILE_CURRENT);

  0003c	41 b9 01 00 00
	00		 mov	 r9d, 1
  00042	45 33 c0	 xor	 r8d, r8d
  00045	33 d2		 xor	 edx, edx
  00047	48 8b 4c 24 20	 mov	 rcx, QWORD PTR hFile$[rsp]
  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetFilePointer
  00052	89 44 24 2c	 mov	 DWORD PTR dwSet$79944[rsp], eax

; 200  :         if (dwSet == INVALID_SET_FILE_POINTER)

  00056	83 7c 24 2c ff	 cmp	 DWORD PTR dwSet$79944[rsp], -1 ; ffffffffH
  0005b	75 20		 jne	 SHORT $LN2@win32_tell@2

; 201  :         {
; 202  :             DWORD dwErr = GetLastError();

  0005d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  00063	89 44 24 30	 mov	 DWORD PTR dwErr$79948[rsp], eax

; 203  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  00067	48 8b 4c 24 58	 mov	 rcx, QWORD PTR stream$[rsp]
  0006c	8b 44 24 30	 mov	 eax, DWORD PTR dwErr$79948[rsp]
  00070	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 204  :             ret = -1;

  00073	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1

; 205  :         }
; 206  :         else

  0007b	eb 08		 jmp	 SHORT $LN1@win32_tell@2
$LN2@win32_tell@2:

; 207  :             ret=(long)dwSet;

  0007d	8b 44 24 2c	 mov	 eax, DWORD PTR dwSet$79944[rsp]
  00081	89 44 24 28	 mov	 DWORD PTR ret$[rsp], eax
$LN1@win32_tell@2:
$LN3@win32_tell@2:

; 208  :     }
; 209  :     return ret;

  00085	8b 44 24 28	 mov	 eax, DWORD PTR ret$[rsp]

; 210  : }

  00089	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0008d	c3		 ret	 0
win32_tell_file_func ENDP
_TEXT	ENDS
PUBLIC	win32_write_file_func
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_write_file_func DD imagerel $LN7
	DD	imagerel $LN7+155
	DD	imagerel $unwind$win32_write_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_write_file_func DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT win32_write_file_func
_TEXT	SEGMENT
hFile$ = 48
ret$ = 56
dwErr$79926 = 60
opaque$ = 80
stream$ = 88
buf$ = 96
size$ = 104
win32_write_file_func PROC				; COMDAT

; 171  : {

$LN7:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 172  :     uLong ret=0;

  00018	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0

; 173  :     HANDLE hFile = NULL;

  00020	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR hFile$[rsp], 0

; 174  :     if (stream!=NULL)

  00029	48 83 7c 24 58
	00		 cmp	 QWORD PTR stream$[rsp], 0
  0002f	74 0d		 je	 SHORT $LN4@win32_writ

; 175  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00031	48 8b 44 24 58	 mov	 rax, QWORD PTR stream$[rsp]
  00036	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00039	48 89 44 24 30	 mov	 QWORD PTR hFile$[rsp], rax
$LN4@win32_writ:

; 176  : 
; 177  :     if (hFile != NULL)

  0003e	48 83 7c 24 30
	00		 cmp	 QWORD PTR hFile$[rsp], 0
  00044	74 4c		 je	 SHORT $LN3@win32_writ

; 178  :     {
; 179  :         if (!WriteFile(hFile, buf, size, &ret, NULL))

  00046	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0004f	4c 8d 4c 24 38	 lea	 r9, QWORD PTR ret$[rsp]
  00054	44 8b 44 24 68	 mov	 r8d, DWORD PTR size$[rsp]
  00059	48 8b 54 24 60	 mov	 rdx, QWORD PTR buf$[rsp]
  0005e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR hFile$[rsp]
  00063	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WriteFile
  00069	85 c0		 test	 eax, eax
  0006b	75 25		 jne	 SHORT $LN2@win32_writ

; 180  :         {
; 181  :             DWORD dwErr = GetLastError();

  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  00073	89 44 24 3c	 mov	 DWORD PTR dwErr$79926[rsp], eax

; 182  :             if (dwErr == ERROR_HANDLE_EOF)

  00077	83 7c 24 3c 26	 cmp	 DWORD PTR dwErr$79926[rsp], 38 ; 00000026H
  0007c	75 08		 jne	 SHORT $LN1@win32_writ

; 183  :                 dwErr = 0;

  0007e	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR dwErr$79926[rsp], 0
$LN1@win32_writ:

; 184  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  00086	48 8b 4c 24 58	 mov	 rcx, QWORD PTR stream$[rsp]
  0008b	8b 44 24 3c	 mov	 eax, DWORD PTR dwErr$79926[rsp]
  0008f	89 41 08	 mov	 DWORD PTR [rcx+8], eax
$LN2@win32_writ:
$LN3@win32_writ:

; 185  :         }
; 186  :     }
; 187  : 
; 188  :     return ret;

  00092	8b 44 24 38	 mov	 eax, DWORD PTR ret$[rsp]

; 189  : }

  00096	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009a	c3		 ret	 0
win32_write_file_func ENDP
_TEXT	ENDS
PUBLIC	win32_read_file_func
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_read_file_func DD imagerel $LN7
	DD	imagerel $LN7+155
	DD	imagerel $unwind$win32_read_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_read_file_func DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT win32_read_file_func
_TEXT	SEGMENT
hFile$ = 48
ret$ = 56
dwErr$79903 = 60
opaque$ = 80
stream$ = 88
buf$ = 96
size$ = 104
win32_read_file_func PROC				; COMDAT

; 149  : {

$LN7:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 150  :     uLong ret=0;

  00018	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0

; 151  :     HANDLE hFile = NULL;

  00020	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR hFile$[rsp], 0

; 152  :     if (stream!=NULL)

  00029	48 83 7c 24 58
	00		 cmp	 QWORD PTR stream$[rsp], 0
  0002f	74 0d		 je	 SHORT $LN4@win32_read

; 153  :         hFile = ((WIN32FILE_IOWIN*)stream) -> hf;

  00031	48 8b 44 24 58	 mov	 rax, QWORD PTR stream$[rsp]
  00036	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00039	48 89 44 24 30	 mov	 QWORD PTR hFile$[rsp], rax
$LN4@win32_read:

; 154  : 
; 155  :     if (hFile != NULL)

  0003e	48 83 7c 24 30
	00		 cmp	 QWORD PTR hFile$[rsp], 0
  00044	74 4c		 je	 SHORT $LN3@win32_read

; 156  :     {
; 157  :         if (!ReadFile(hFile, buf, size, &ret, NULL))

  00046	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0004f	4c 8d 4c 24 38	 lea	 r9, QWORD PTR ret$[rsp]
  00054	44 8b 44 24 68	 mov	 r8d, DWORD PTR size$[rsp]
  00059	48 8b 54 24 60	 mov	 rdx, QWORD PTR buf$[rsp]
  0005e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR hFile$[rsp]
  00063	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReadFile
  00069	85 c0		 test	 eax, eax
  0006b	75 25		 jne	 SHORT $LN2@win32_read

; 158  :         {
; 159  :             DWORD dwErr = GetLastError();

  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  00073	89 44 24 3c	 mov	 DWORD PTR dwErr$79903[rsp], eax

; 160  :             if (dwErr == ERROR_HANDLE_EOF)

  00077	83 7c 24 3c 26	 cmp	 DWORD PTR dwErr$79903[rsp], 38 ; 00000026H
  0007c	75 08		 jne	 SHORT $LN1@win32_read

; 161  :                 dwErr = 0;

  0007e	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR dwErr$79903[rsp], 0
$LN1@win32_read:

; 162  :             ((WIN32FILE_IOWIN*)stream) -> error=(int)dwErr;

  00086	48 8b 4c 24 58	 mov	 rcx, QWORD PTR stream$[rsp]
  0008b	8b 44 24 3c	 mov	 eax, DWORD PTR dwErr$79903[rsp]
  0008f	89 41 08	 mov	 DWORD PTR [rcx+8], eax
$LN2@win32_read:
$LN3@win32_read:

; 163  :         }
; 164  :     }
; 165  : 
; 166  :     return ret;

  00092	8b 44 24 38	 mov	 eax, DWORD PTR ret$[rsp]

; 167  : }

  00096	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009a	c3		 ret	 0
win32_read_file_func ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_build_iowin DD imagerel win32_build_iowin
	DD	imagerel win32_build_iowin+120
	DD	imagerel $unwind$win32_build_iowin
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_build_iowin DD 030b01H
	DD	07007820bH
	DD	06006H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT win32_build_iowin
_TEXT	SEGMENT
ret$ = 32
w32fiow$79795 = 40
hFile$ = 96
win32_build_iowin PROC					; COMDAT

; 70   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 71   :     voidpf ret=NULL;

  0000b	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR ret$[rsp], 0

; 72   : 
; 73   :     if ((hFile != NULL) && (hFile != INVALID_HANDLE_VALUE))

  00014	48 83 7c 24 60
	00		 cmp	 QWORD PTR hFile$[rsp], 0
  0001a	74 50		 je	 SHORT $LN3@win32_buil
  0001c	48 83 7c 24 60
	ff		 cmp	 QWORD PTR hFile$[rsp], -1
  00022	74 48		 je	 SHORT $LN3@win32_buil

; 74   :     {
; 75   :         WIN32FILE_IOWIN w32fiow;
; 76   :         w32fiow.hf = hFile;

  00024	48 8b 44 24 60	 mov	 rax, QWORD PTR hFile$[rsp]
  00029	48 89 44 24 28	 mov	 QWORD PTR w32fiow$79795[rsp], rax

; 77   :         w32fiow.error = 0;

  0002e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR w32fiow$79795[rsp+8], 0

; 78   :         ret = malloc(sizeof(WIN32FILE_IOWIN));

  00036	b9 10 00 00 00	 mov	 ecx, 16
  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00041	48 89 44 24 20	 mov	 QWORD PTR ret$[rsp], rax

; 79   : 
; 80   :         if (ret==NULL)

  00046	48 83 7c 24 20
	00		 cmp	 QWORD PTR ret$[rsp], 0
  0004c	75 0d		 jne	 SHORT $LN2@win32_buil

; 81   :             CloseHandle(hFile);

  0004e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR hFile$[rsp]
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 82   :         else

  00059	eb 11		 jmp	 SHORT $LN1@win32_buil
$LN2@win32_buil:

; 83   :             *((WIN32FILE_IOWIN*)ret) = w32fiow;

  0005b	48 8d 74 24 28	 lea	 rsi, QWORD PTR w32fiow$79795[rsp]
  00060	48 8b 7c 24 20	 mov	 rdi, QWORD PTR ret$[rsp]
  00065	b9 10 00 00 00	 mov	 ecx, 16
  0006a	f3 a4		 rep movsb
$LN1@win32_buil:
$LN3@win32_buil:

; 84   :     }
; 85   :     return ret;

  0006c	48 8b 44 24 20	 mov	 rax, QWORD PTR ret$[rsp]

; 86   : }

  00071	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00075	5f		 pop	 rdi
  00076	5e		 pop	 rsi
  00077	c3		 ret	 0
win32_build_iowin ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT win32_translate_open_mode
_TEXT	SEGMENT
mode$ = 8
lpdwDesiredAccess$ = 16
lpdwCreationDisposition$ = 24
lpdwShareMode$ = 32
lpdwFlagsAndAttributes$ = 40
win32_translate_open_mode PROC				; COMDAT

; 48   : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 49   :     *lpdwDesiredAccess = *lpdwShareMode = *lpdwFlagsAndAttributes = *lpdwCreationDisposition = 0;

  00013	48 8b 44 24 18	 mov	 rax, QWORD PTR lpdwCreationDisposition$[rsp]
  00018	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  0001e	48 8b 44 24 28	 mov	 rax, QWORD PTR lpdwFlagsAndAttributes$[rsp]
  00023	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00029	48 8b 44 24 20	 mov	 rax, QWORD PTR lpdwShareMode$[rsp]
  0002e	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00034	48 8b 44 24 10	 mov	 rax, QWORD PTR lpdwDesiredAccess$[rsp]
  00039	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 50   : 
; 51   :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  0003f	8b 44 24 08	 mov	 eax, DWORD PTR mode$[rsp]
  00043	83 e0 03	 and	 eax, 3
  00046	83 f8 01	 cmp	 eax, 1
  00049	75 23		 jne	 SHORT $LN5@win32_tran

; 52   :     {
; 53   :         *lpdwDesiredAccess = GENERIC_READ;

  0004b	48 8b 44 24 10	 mov	 rax, QWORD PTR lpdwDesiredAccess$[rsp]
  00050	c7 00 00 00 00
	80		 mov	 DWORD PTR [rax], -2147483648 ; 80000000H

; 54   :         *lpdwCreationDisposition = OPEN_EXISTING;

  00056	48 8b 44 24 18	 mov	 rax, QWORD PTR lpdwCreationDisposition$[rsp]
  0005b	c7 00 03 00 00
	00		 mov	 DWORD PTR [rax], 3

; 55   :         *lpdwShareMode = FILE_SHARE_READ;

  00061	48 8b 44 24 20	 mov	 rax, QWORD PTR lpdwShareMode$[rsp]
  00066	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1
  0006c	eb 44		 jmp	 SHORT $LN4@win32_tran
$LN5@win32_tran:

; 56   :     }
; 57   :     else if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  0006e	8b 44 24 08	 mov	 eax, DWORD PTR mode$[rsp]
  00072	83 e0 04	 and	 eax, 4
  00075	85 c0		 test	 eax, eax
  00077	74 18		 je	 SHORT $LN3@win32_tran

; 58   :     {
; 59   :         *lpdwDesiredAccess = GENERIC_WRITE | GENERIC_READ;

  00079	48 8b 44 24 10	 mov	 rax, QWORD PTR lpdwDesiredAccess$[rsp]
  0007e	c7 00 00 00 00
	c0		 mov	 DWORD PTR [rax], -1073741824 ; c0000000H

; 60   :         *lpdwCreationDisposition = OPEN_EXISTING;

  00084	48 8b 44 24 18	 mov	 rax, QWORD PTR lpdwCreationDisposition$[rsp]
  00089	c7 00 03 00 00
	00		 mov	 DWORD PTR [rax], 3
  0008f	eb 21		 jmp	 SHORT $LN2@win32_tran
$LN3@win32_tran:

; 61   :     }
; 62   :     else if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  00091	8b 44 24 08	 mov	 eax, DWORD PTR mode$[rsp]
  00095	83 e0 08	 and	 eax, 8
  00098	85 c0		 test	 eax, eax
  0009a	74 16		 je	 SHORT $LN1@win32_tran

; 63   :     {
; 64   :         *lpdwDesiredAccess = GENERIC_WRITE | GENERIC_READ;

  0009c	48 8b 44 24 10	 mov	 rax, QWORD PTR lpdwDesiredAccess$[rsp]
  000a1	c7 00 00 00 00
	c0		 mov	 DWORD PTR [rax], -1073741824 ; c0000000H

; 65   :         *lpdwCreationDisposition = CREATE_ALWAYS;

  000a7	48 8b 44 24 18	 mov	 rax, QWORD PTR lpdwCreationDisposition$[rsp]
  000ac	c7 00 02 00 00
	00		 mov	 DWORD PTR [rax], 2
$LN1@win32_tran:
$LN2@win32_tran:
$LN4@win32_tran:

; 66   :     }
; 67   : }

  000b2	f3 c3		 fatret	 0
win32_translate_open_mode ENDP
PUBLIC	win32_open_file_func
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_open_file_func DD imagerel $LN4
	DD	imagerel $LN4+163
	DD	imagerel $unwind$win32_open_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_open_file_func DD 011301H
	DD	0e213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT win32_open_file_func
_TEXT	SEGMENT
dwShareMode$ = 64
hFile$ = 72
dwFlagsAndAttributes$ = 80
dwCreationDisposition$ = 84
dwDesiredAccess$ = 88
mode_fopen$ = 96
opaque$ = 128
filename$ = 136
mode$ = 144
win32_open_file_func PROC				; COMDAT

; 134  : {

$LN4:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 135  :     const char* mode_fopen = NULL;

  00013	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR mode_fopen$[rsp], 0

; 136  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 137  :     HANDLE hFile = NULL;

  0001c	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR hFile$[rsp], 0

; 138  : 
; 139  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00025	48 8d 44 24 50	 lea	 rax, QWORD PTR dwFlagsAndAttributes$[rsp]
  0002a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002f	4c 8d 4c 24 40	 lea	 r9, QWORD PTR dwShareMode$[rsp]
  00034	4c 8d 44 24 54	 lea	 r8, QWORD PTR dwCreationDisposition$[rsp]
  00039	48 8d 54 24 58	 lea	 rdx, QWORD PTR dwDesiredAccess$[rsp]
  0003e	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR mode$[rsp]
  00045	e8 00 00 00 00	 call	 win32_translate_open_mode

; 140  : 
; 141  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  0004a	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR filename$[rsp], 0
  00053	74 3f		 je	 SHORT $LN1@win32_open
  00055	83 7c 24 58 00	 cmp	 DWORD PTR dwDesiredAccess$[rsp], 0
  0005a	74 38		 je	 SHORT $LN1@win32_open

; 142  :         hFile = CreateFile((LPCTSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  0005c	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00065	8b 44 24 50	 mov	 eax, DWORD PTR dwFlagsAndAttributes$[rsp]
  00069	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0006d	8b 44 24 54	 mov	 eax, DWORD PTR dwCreationDisposition$[rsp]
  00071	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00075	45 33 c9	 xor	 r9d, r9d
  00078	44 8b 44 24 40	 mov	 r8d, DWORD PTR dwShareMode$[rsp]
  0007d	8b 54 24 58	 mov	 edx, DWORD PTR dwDesiredAccess$[rsp]
  00081	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  00089	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileA
  0008f	48 89 44 24 48	 mov	 QWORD PTR hFile$[rsp], rax
$LN1@win32_open:

; 143  : 
; 144  :     return win32_build_iowin(hFile);

  00094	48 8b 4c 24 48	 mov	 rcx, QWORD PTR hFile$[rsp]
  00099	e8 00 00 00 00	 call	 win32_build_iowin

; 145  : }

  0009e	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000a2	c3		 ret	 0
win32_open_file_func ENDP
_TEXT	ENDS
PUBLIC	win32_open64_file_funcW
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_open64_file_funcW DD imagerel $LN4
	DD	imagerel $LN4+163
	DD	imagerel $unwind$win32_open64_file_funcW
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_open64_file_funcW DD 011301H
	DD	0e213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT win32_open64_file_funcW
_TEXT	SEGMENT
dwShareMode$ = 64
hFile$ = 72
dwFlagsAndAttributes$ = 80
dwCreationDisposition$ = 84
dwDesiredAccess$ = 88
mode_fopen$ = 96
opaque$ = 128
filename$ = 136
mode$ = 144
win32_open64_file_funcW PROC				; COMDAT

; 119  : {

$LN4:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 120  :     const char* mode_fopen = NULL;

  00013	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR mode_fopen$[rsp], 0

; 121  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 122  :     HANDLE hFile = NULL;

  0001c	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR hFile$[rsp], 0

; 123  : 
; 124  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00025	48 8d 44 24 50	 lea	 rax, QWORD PTR dwFlagsAndAttributes$[rsp]
  0002a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002f	4c 8d 4c 24 40	 lea	 r9, QWORD PTR dwShareMode$[rsp]
  00034	4c 8d 44 24 54	 lea	 r8, QWORD PTR dwCreationDisposition$[rsp]
  00039	48 8d 54 24 58	 lea	 rdx, QWORD PTR dwDesiredAccess$[rsp]
  0003e	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR mode$[rsp]
  00045	e8 00 00 00 00	 call	 win32_translate_open_mode

; 125  : 
; 126  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  0004a	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR filename$[rsp], 0
  00053	74 3f		 je	 SHORT $LN1@win32_open@2
  00055	83 7c 24 58 00	 cmp	 DWORD PTR dwDesiredAccess$[rsp], 0
  0005a	74 38		 je	 SHORT $LN1@win32_open@2

; 127  :         hFile = CreateFileW((LPCWSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  0005c	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00065	8b 44 24 50	 mov	 eax, DWORD PTR dwFlagsAndAttributes$[rsp]
  00069	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0006d	8b 44 24 54	 mov	 eax, DWORD PTR dwCreationDisposition$[rsp]
  00071	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00075	45 33 c9	 xor	 r9d, r9d
  00078	44 8b 44 24 40	 mov	 r8d, DWORD PTR dwShareMode$[rsp]
  0007d	8b 54 24 58	 mov	 edx, DWORD PTR dwDesiredAccess$[rsp]
  00081	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  00089	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileW
  0008f	48 89 44 24 48	 mov	 QWORD PTR hFile$[rsp], rax
$LN1@win32_open@2:

; 128  : 
; 129  :     return win32_build_iowin(hFile);

  00094	48 8b 4c 24 48	 mov	 rcx, QWORD PTR hFile$[rsp]
  00099	e8 00 00 00 00	 call	 win32_build_iowin

; 130  : }

  0009e	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000a2	c3		 ret	 0
win32_open64_file_funcW ENDP
_TEXT	ENDS
PUBLIC	win32_open64_file_funcA
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_open64_file_funcA DD imagerel $LN4
	DD	imagerel $LN4+163
	DD	imagerel $unwind$win32_open64_file_funcA
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_open64_file_funcA DD 011301H
	DD	0e213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT win32_open64_file_funcA
_TEXT	SEGMENT
dwShareMode$ = 64
hFile$ = 72
dwFlagsAndAttributes$ = 80
dwCreationDisposition$ = 84
dwDesiredAccess$ = 88
mode_fopen$ = 96
opaque$ = 128
filename$ = 136
mode$ = 144
win32_open64_file_funcA PROC				; COMDAT

; 104  : {

$LN4:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 105  :     const char* mode_fopen = NULL;

  00013	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR mode_fopen$[rsp], 0

; 106  :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 107  :     HANDLE hFile = NULL;

  0001c	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR hFile$[rsp], 0

; 108  : 
; 109  :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00025	48 8d 44 24 50	 lea	 rax, QWORD PTR dwFlagsAndAttributes$[rsp]
  0002a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002f	4c 8d 4c 24 40	 lea	 r9, QWORD PTR dwShareMode$[rsp]
  00034	4c 8d 44 24 54	 lea	 r8, QWORD PTR dwCreationDisposition$[rsp]
  00039	48 8d 54 24 58	 lea	 rdx, QWORD PTR dwDesiredAccess$[rsp]
  0003e	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR mode$[rsp]
  00045	e8 00 00 00 00	 call	 win32_translate_open_mode

; 110  : 
; 111  :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  0004a	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR filename$[rsp], 0
  00053	74 3f		 je	 SHORT $LN1@win32_open@3
  00055	83 7c 24 58 00	 cmp	 DWORD PTR dwDesiredAccess$[rsp], 0
  0005a	74 38		 je	 SHORT $LN1@win32_open@3

; 112  :         hFile = CreateFileA((LPCSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  0005c	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00065	8b 44 24 50	 mov	 eax, DWORD PTR dwFlagsAndAttributes$[rsp]
  00069	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0006d	8b 44 24 54	 mov	 eax, DWORD PTR dwCreationDisposition$[rsp]
  00071	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00075	45 33 c9	 xor	 r9d, r9d
  00078	44 8b 44 24 40	 mov	 r8d, DWORD PTR dwShareMode$[rsp]
  0007d	8b 54 24 58	 mov	 edx, DWORD PTR dwDesiredAccess$[rsp]
  00081	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  00089	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileA
  0008f	48 89 44 24 48	 mov	 QWORD PTR hFile$[rsp], rax
$LN1@win32_open@3:

; 113  : 
; 114  :     return win32_build_iowin(hFile);

  00094	48 8b 4c 24 48	 mov	 rcx, QWORD PTR hFile$[rsp]
  00099	e8 00 00 00 00	 call	 win32_build_iowin

; 115  : }

  0009e	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000a2	c3		 ret	 0
win32_open64_file_funcA ENDP
_TEXT	ENDS
PUBLIC	win32_open64_file_func
;	COMDAT pdata
pdata	SEGMENT
$pdata$win32_open64_file_func DD imagerel $LN4
	DD	imagerel $LN4+163
	DD	imagerel $unwind$win32_open64_file_func
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$win32_open64_file_func DD 011301H
	DD	0e213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT win32_open64_file_func
_TEXT	SEGMENT
dwShareMode$ = 64
hFile$ = 72
dwFlagsAndAttributes$ = 80
dwCreationDisposition$ = 84
dwDesiredAccess$ = 88
mode_fopen$ = 96
opaque$ = 128
filename$ = 136
mode$ = 144
win32_open64_file_func PROC				; COMDAT

; 89   : {

$LN4:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 90   :     const char* mode_fopen = NULL;

  00013	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR mode_fopen$[rsp], 0

; 91   :     DWORD dwDesiredAccess,dwCreationDisposition,dwShareMode,dwFlagsAndAttributes ;
; 92   :     HANDLE hFile = NULL;

  0001c	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR hFile$[rsp], 0

; 93   : 
; 94   :     win32_translate_open_mode(mode,&dwDesiredAccess,&dwCreationDisposition,&dwShareMode,&dwFlagsAndAttributes);

  00025	48 8d 44 24 50	 lea	 rax, QWORD PTR dwFlagsAndAttributes$[rsp]
  0002a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002f	4c 8d 4c 24 40	 lea	 r9, QWORD PTR dwShareMode$[rsp]
  00034	4c 8d 44 24 54	 lea	 r8, QWORD PTR dwCreationDisposition$[rsp]
  00039	48 8d 54 24 58	 lea	 rdx, QWORD PTR dwDesiredAccess$[rsp]
  0003e	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR mode$[rsp]
  00045	e8 00 00 00 00	 call	 win32_translate_open_mode

; 95   : 
; 96   :     if ((filename!=NULL) && (dwDesiredAccess != 0))

  0004a	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR filename$[rsp], 0
  00053	74 3f		 je	 SHORT $LN1@win32_open@4
  00055	83 7c 24 58 00	 cmp	 DWORD PTR dwDesiredAccess$[rsp], 0
  0005a	74 38		 je	 SHORT $LN1@win32_open@4

; 97   :         hFile = CreateFile((LPCTSTR)filename, dwDesiredAccess, dwShareMode, NULL, dwCreationDisposition, dwFlagsAndAttributes, NULL);

  0005c	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00065	8b 44 24 50	 mov	 eax, DWORD PTR dwFlagsAndAttributes$[rsp]
  00069	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0006d	8b 44 24 54	 mov	 eax, DWORD PTR dwCreationDisposition$[rsp]
  00071	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00075	45 33 c9	 xor	 r9d, r9d
  00078	44 8b 44 24 40	 mov	 r8d, DWORD PTR dwShareMode$[rsp]
  0007d	8b 54 24 58	 mov	 edx, DWORD PTR dwDesiredAccess$[rsp]
  00081	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  00089	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileA
  0008f	48 89 44 24 48	 mov	 QWORD PTR hFile$[rsp], rax
$LN1@win32_open@4:

; 98   : 
; 99   :     return win32_build_iowin(hFile);

  00094	48 8b 4c 24 48	 mov	 rcx, QWORD PTR hFile$[rsp]
  00099	e8 00 00 00 00	 call	 win32_build_iowin

; 100  : }

  0009e	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000a2	c3		 ret	 0
win32_open64_file_func ENDP
PUBLIC	fill_win32_filefunc64W
; Function compile flags: /Odtp
;	COMDAT fill_win32_filefunc64W
_TEXT	SEGMENT
pzlib_filefunc_def$ = 8
fill_win32_filefunc64W PROC				; COMDAT

; 380  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 381  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_funcW;

  00005	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_open64_file_funcW
  00011	48 89 01	 mov	 QWORD PTR [rcx], rax

; 382  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  00014	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_read_file_func
  00020	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 383  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00024	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_write_file_func
  00030	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 384  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  00034	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_tell64_file_func
  00040	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 385  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  00044	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_seek64_file_func
  00050	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 386  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00054	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_close_file_func
  00060	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 387  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  00064	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_error_file_func
  00070	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 388  :     pzlib_filefunc_def->opaque = NULL;

  00074	48 8b 44 24 08	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  00079	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 389  : }

  00081	c3		 ret	 0
fill_win32_filefunc64W ENDP
_TEXT	ENDS
PUBLIC	fill_win32_filefunc64A
; Function compile flags: /Odtp
;	COMDAT fill_win32_filefunc64A
_TEXT	SEGMENT
pzlib_filefunc_def$ = 8
fill_win32_filefunc64A PROC				; COMDAT

; 367  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 368  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_funcA;

  00005	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_open64_file_funcA
  00011	48 89 01	 mov	 QWORD PTR [rcx], rax

; 369  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  00014	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_read_file_func
  00020	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 370  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00024	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_write_file_func
  00030	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 371  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  00034	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_tell64_file_func
  00040	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 372  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  00044	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_seek64_file_func
  00050	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 373  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00054	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_close_file_func
  00060	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 374  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  00064	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_error_file_func
  00070	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 375  :     pzlib_filefunc_def->opaque = NULL;

  00074	48 8b 44 24 08	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  00079	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 376  : }

  00081	c3		 ret	 0
fill_win32_filefunc64A ENDP
_TEXT	ENDS
PUBLIC	fill_win32_filefunc64
; Function compile flags: /Odtp
;	COMDAT fill_win32_filefunc64
_TEXT	SEGMENT
pzlib_filefunc_def$ = 8
fill_win32_filefunc64 PROC				; COMDAT

; 354  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 355  :     pzlib_filefunc_def->zopen64_file = win32_open64_file_func;

  00005	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_open64_file_func
  00011	48 89 01	 mov	 QWORD PTR [rcx], rax

; 356  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  00014	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_read_file_func
  00020	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 357  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00024	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_write_file_func
  00030	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 358  :     pzlib_filefunc_def->ztell64_file = win32_tell64_file_func;

  00034	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_tell64_file_func
  00040	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 359  :     pzlib_filefunc_def->zseek64_file = win32_seek64_file_func;

  00044	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_seek64_file_func
  00050	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 360  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00054	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_close_file_func
  00060	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 361  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  00064	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_error_file_func
  00070	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 362  :     pzlib_filefunc_def->opaque = NULL;

  00074	48 8b 44 24 08	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  00079	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 363  : }

  00081	c3		 ret	 0
fill_win32_filefunc64 ENDP
_TEXT	ENDS
PUBLIC	fill_win32_filefunc
; Function compile flags: /Odtp
;	COMDAT fill_win32_filefunc
_TEXT	SEGMENT
pzlib_filefunc_def$ = 8
fill_win32_filefunc PROC				; COMDAT

; 342  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 343  :     pzlib_filefunc_def->zopen_file = win32_open_file_func;

  00005	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_open_file_func
  00011	48 89 01	 mov	 QWORD PTR [rcx], rax

; 344  :     pzlib_filefunc_def->zread_file = win32_read_file_func;

  00014	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_read_file_func
  00020	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 345  :     pzlib_filefunc_def->zwrite_file = win32_write_file_func;

  00024	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_write_file_func
  00030	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 346  :     pzlib_filefunc_def->ztell_file = win32_tell_file_func;

  00034	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_tell_file_func
  00040	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 347  :     pzlib_filefunc_def->zseek_file = win32_seek_file_func;

  00044	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_seek_file_func
  00050	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 348  :     pzlib_filefunc_def->zclose_file = win32_close_file_func;

  00054	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_close_file_func
  00060	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 349  :     pzlib_filefunc_def->zerror_file = win32_error_file_func;

  00064	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:win32_error_file_func
  00070	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 350  :     pzlib_filefunc_def->opaque = NULL;

  00074	48 8b 44 24 08	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  00079	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 351  : }

  00081	c3		 ret	 0
fill_win32_filefunc ENDP
END
