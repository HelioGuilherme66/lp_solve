; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	_dist_code
PUBLIC	_length_code
static_l_desc DQ FLAT:static_ltree
	DQ	FLAT:extra_lbits
	DD	0101H
	DD	011eH
	DD	0fH
	ORG $+4
static_d_desc DQ FLAT:static_dtree
	DQ	FLAT:extra_dbits
	DD	00H
	DD	01eH
	DD	0fH
	ORG $+4
static_bl_desc DQ 0000000000000000H
	DQ	FLAT:extra_blbits
	DD	00H
	DD	013H
	DD	07H
	ORG $+4
	ORG $+15
extra_lbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	00H
	ORG $+6
extra_dbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	07H
	DD	07H
	DD	08H
	DD	08H
	DD	09H
	DD	09H
	DD	0aH
	DD	0aH
	DD	0bH
	DD	0bH
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0dH
	ORG $+8
extra_blbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	03H
	DD	07H
	ORG $+4
bl_order DB	010H
	DB	011H
	DB	012H
	DB	00H
	DB	08H
	DB	07H
	DB	09H
	DB	06H
	DB	0aH
	DB	05H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	0dH
	DB	02H
	DB	0eH
	DB	01H
	DB	0fH
	ORG $+13
static_ltree DW	0cH
	DW	08H
	DW	08cH
	DW	08H
	DW	04cH
	DW	08H
	DW	0ccH
	DW	08H
	DW	02cH
	DW	08H
	DW	0acH
	DW	08H
	DW	06cH
	DW	08H
	DW	0ecH
	DW	08H
	DW	01cH
	DW	08H
	DW	09cH
	DW	08H
	DW	05cH
	DW	08H
	DW	0dcH
	DW	08H
	DW	03cH
	DW	08H
	DW	0bcH
	DW	08H
	DW	07cH
	DW	08H
	DW	0fcH
	DW	08H
	DW	02H
	DW	08H
	DW	082H
	DW	08H
	DW	042H
	DW	08H
	DW	0c2H
	DW	08H
	DW	022H
	DW	08H
	DW	0a2H
	DW	08H
	DW	062H
	DW	08H
	DW	0e2H
	DW	08H
	DW	012H
	DW	08H
	DW	092H
	DW	08H
	DW	052H
	DW	08H
	DW	0d2H
	DW	08H
	DW	032H
	DW	08H
	DW	0b2H
	DW	08H
	DW	072H
	DW	08H
	DW	0f2H
	DW	08H
	DW	0aH
	DW	08H
	DW	08aH
	DW	08H
	DW	04aH
	DW	08H
	DW	0caH
	DW	08H
	DW	02aH
	DW	08H
	DW	0aaH
	DW	08H
	DW	06aH
	DW	08H
	DW	0eaH
	DW	08H
	DW	01aH
	DW	08H
	DW	09aH
	DW	08H
	DW	05aH
	DW	08H
	DW	0daH
	DW	08H
	DW	03aH
	DW	08H
	DW	0baH
	DW	08H
	DW	07aH
	DW	08H
	DW	0faH
	DW	08H
	DW	06H
	DW	08H
	DW	086H
	DW	08H
	DW	046H
	DW	08H
	DW	0c6H
	DW	08H
	DW	026H
	DW	08H
	DW	0a6H
	DW	08H
	DW	066H
	DW	08H
	DW	0e6H
	DW	08H
	DW	016H
	DW	08H
	DW	096H
	DW	08H
	DW	056H
	DW	08H
	DW	0d6H
	DW	08H
	DW	036H
	DW	08H
	DW	0b6H
	DW	08H
	DW	076H
	DW	08H
	DW	0f6H
	DW	08H
	DW	0eH
	DW	08H
	DW	08eH
	DW	08H
	DW	04eH
	DW	08H
	DW	0ceH
	DW	08H
	DW	02eH
	DW	08H
	DW	0aeH
	DW	08H
	DW	06eH
	DW	08H
	DW	0eeH
	DW	08H
	DW	01eH
	DW	08H
	DW	09eH
	DW	08H
	DW	05eH
	DW	08H
	DW	0deH
	DW	08H
	DW	03eH
	DW	08H
	DW	0beH
	DW	08H
	DW	07eH
	DW	08H
	DW	0feH
	DW	08H
	DW	01H
	DW	08H
	DW	081H
	DW	08H
	DW	041H
	DW	08H
	DW	0c1H
	DW	08H
	DW	021H
	DW	08H
	DW	0a1H
	DW	08H
	DW	061H
	DW	08H
	DW	0e1H
	DW	08H
	DW	011H
	DW	08H
	DW	091H
	DW	08H
	DW	051H
	DW	08H
	DW	0d1H
	DW	08H
	DW	031H
	DW	08H
	DW	0b1H
	DW	08H
	DW	071H
	DW	08H
	DW	0f1H
	DW	08H
	DW	09H
	DW	08H
	DW	089H
	DW	08H
	DW	049H
	DW	08H
	DW	0c9H
	DW	08H
	DW	029H
	DW	08H
	DW	0a9H
	DW	08H
	DW	069H
	DW	08H
	DW	0e9H
	DW	08H
	DW	019H
	DW	08H
	DW	099H
	DW	08H
	DW	059H
	DW	08H
	DW	0d9H
	DW	08H
	DW	039H
	DW	08H
	DW	0b9H
	DW	08H
	DW	079H
	DW	08H
	DW	0f9H
	DW	08H
	DW	05H
	DW	08H
	DW	085H
	DW	08H
	DW	045H
	DW	08H
	DW	0c5H
	DW	08H
	DW	025H
	DW	08H
	DW	0a5H
	DW	08H
	DW	065H
	DW	08H
	DW	0e5H
	DW	08H
	DW	015H
	DW	08H
	DW	095H
	DW	08H
	DW	055H
	DW	08H
	DW	0d5H
	DW	08H
	DW	035H
	DW	08H
	DW	0b5H
	DW	08H
	DW	075H
	DW	08H
	DW	0f5H
	DW	08H
	DW	0dH
	DW	08H
	DW	08dH
	DW	08H
	DW	04dH
	DW	08H
	DW	0cdH
	DW	08H
	DW	02dH
	DW	08H
	DW	0adH
	DW	08H
	DW	06dH
	DW	08H
	DW	0edH
	DW	08H
	DW	01dH
	DW	08H
	DW	09dH
	DW	08H
	DW	05dH
	DW	08H
	DW	0ddH
	DW	08H
	DW	03dH
	DW	08H
	DW	0bdH
	DW	08H
	DW	07dH
	DW	08H
	DW	0fdH
	DW	08H
	DW	013H
	DW	09H
	DW	0113H
	DW	09H
	DW	093H
	DW	09H
	DW	0193H
	DW	09H
	DW	053H
	DW	09H
	DW	0153H
	DW	09H
	DW	0d3H
	DW	09H
	DW	01d3H
	DW	09H
	DW	033H
	DW	09H
	DW	0133H
	DW	09H
	DW	0b3H
	DW	09H
	DW	01b3H
	DW	09H
	DW	073H
	DW	09H
	DW	0173H
	DW	09H
	DW	0f3H
	DW	09H
	DW	01f3H
	DW	09H
	DW	0bH
	DW	09H
	DW	010bH
	DW	09H
	DW	08bH
	DW	09H
	DW	018bH
	DW	09H
	DW	04bH
	DW	09H
	DW	014bH
	DW	09H
	DW	0cbH
	DW	09H
	DW	01cbH
	DW	09H
	DW	02bH
	DW	09H
	DW	012bH
	DW	09H
	DW	0abH
	DW	09H
	DW	01abH
	DW	09H
	DW	06bH
	DW	09H
	DW	016bH
	DW	09H
	DW	0ebH
	DW	09H
	DW	01ebH
	DW	09H
	DW	01bH
	DW	09H
	DW	011bH
	DW	09H
	DW	09bH
	DW	09H
	DW	019bH
	DW	09H
	DW	05bH
	DW	09H
	DW	015bH
	DW	09H
	DW	0dbH
	DW	09H
	DW	01dbH
	DW	09H
	DW	03bH
	DW	09H
	DW	013bH
	DW	09H
	DW	0bbH
	DW	09H
	DW	01bbH
	DW	09H
	DW	07bH
	DW	09H
	DW	017bH
	DW	09H
	DW	0fbH
	DW	09H
	DW	01fbH
	DW	09H
	DW	07H
	DW	09H
	DW	0107H
	DW	09H
	DW	087H
	DW	09H
	DW	0187H
	DW	09H
	DW	047H
	DW	09H
	DW	0147H
	DW	09H
	DW	0c7H
	DW	09H
	DW	01c7H
	DW	09H
	DW	027H
	DW	09H
	DW	0127H
	DW	09H
	DW	0a7H
	DW	09H
	DW	01a7H
	DW	09H
	DW	067H
	DW	09H
	DW	0167H
	DW	09H
	DW	0e7H
	DW	09H
	DW	01e7H
	DW	09H
	DW	017H
	DW	09H
	DW	0117H
	DW	09H
	DW	097H
	DW	09H
	DW	0197H
	DW	09H
	DW	057H
	DW	09H
	DW	0157H
	DW	09H
	DW	0d7H
	DW	09H
	DW	01d7H
	DW	09H
	DW	037H
	DW	09H
	DW	0137H
	DW	09H
	DW	0b7H
	DW	09H
	DW	01b7H
	DW	09H
	DW	077H
	DW	09H
	DW	0177H
	DW	09H
	DW	0f7H
	DW	09H
	DW	01f7H
	DW	09H
	DW	0fH
	DW	09H
	DW	010fH
	DW	09H
	DW	08fH
	DW	09H
	DW	018fH
	DW	09H
	DW	04fH
	DW	09H
	DW	014fH
	DW	09H
	DW	0cfH
	DW	09H
	DW	01cfH
	DW	09H
	DW	02fH
	DW	09H
	DW	012fH
	DW	09H
	DW	0afH
	DW	09H
	DW	01afH
	DW	09H
	DW	06fH
	DW	09H
	DW	016fH
	DW	09H
	DW	0efH
	DW	09H
	DW	01efH
	DW	09H
	DW	01fH
	DW	09H
	DW	011fH
	DW	09H
	DW	09fH
	DW	09H
	DW	019fH
	DW	09H
	DW	05fH
	DW	09H
	DW	015fH
	DW	09H
	DW	0dfH
	DW	09H
	DW	01dfH
	DW	09H
	DW	03fH
	DW	09H
	DW	013fH
	DW	09H
	DW	0bfH
	DW	09H
	DW	01bfH
	DW	09H
	DW	07fH
	DW	09H
	DW	017fH
	DW	09H
	DW	0ffH
	DW	09H
	DW	01ffH
	DW	09H
	DW	00H
	DW	07H
	DW	040H
	DW	07H
	DW	020H
	DW	07H
	DW	060H
	DW	07H
	DW	010H
	DW	07H
	DW	050H
	DW	07H
	DW	030H
	DW	07H
	DW	070H
	DW	07H
	DW	08H
	DW	07H
	DW	048H
	DW	07H
	DW	028H
	DW	07H
	DW	068H
	DW	07H
	DW	018H
	DW	07H
	DW	058H
	DW	07H
	DW	038H
	DW	07H
	DW	078H
	DW	07H
	DW	04H
	DW	07H
	DW	044H
	DW	07H
	DW	024H
	DW	07H
	DW	064H
	DW	07H
	DW	014H
	DW	07H
	DW	054H
	DW	07H
	DW	034H
	DW	07H
	DW	074H
	DW	07H
	DW	03H
	DW	08H
	DW	083H
	DW	08H
	DW	043H
	DW	08H
	DW	0c3H
	DW	08H
	DW	023H
	DW	08H
	DW	0a3H
	DW	08H
	DW	063H
	DW	08H
	DW	0e3H
	DW	08H
static_dtree DW	00H
	DW	05H
	DW	010H
	DW	05H
	DW	08H
	DW	05H
	DW	018H
	DW	05H
	DW	04H
	DW	05H
	DW	014H
	DW	05H
	DW	0cH
	DW	05H
	DW	01cH
	DW	05H
	DW	02H
	DW	05H
	DW	012H
	DW	05H
	DW	0aH
	DW	05H
	DW	01aH
	DW	05H
	DW	06H
	DW	05H
	DW	016H
	DW	05H
	DW	0eH
	DW	05H
	DW	01eH
	DW	05H
	DW	01H
	DW	05H
	DW	011H
	DW	05H
	DW	09H
	DW	05H
	DW	019H
	DW	05H
	DW	05H
	DW	05H
	DW	015H
	DW	05H
	DW	0dH
	DW	05H
	DW	01dH
	DW	05H
	DW	03H
	DW	05H
	DW	013H
	DW	05H
	DW	0bH
	DW	05H
	DW	01bH
	DW	05H
	DW	07H
	DW	05H
	DW	017H
	DW	05H
	ORG $+8
_dist_code DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	00H
	DB	00H
	DB	010H
	DB	011H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
_length_code DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
base_length DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	0aH
	DD	0cH
	DD	0eH
	DD	010H
	DD	014H
	DD	018H
	DD	01cH
	DD	020H
	DD	028H
	DD	030H
	DD	038H
	DD	040H
	DD	050H
	DD	060H
	DD	070H
	DD	080H
	DD	0a0H
	DD	0c0H
	DD	0e0H
	DD	00H
	ORG $+12
base_dist DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	06H
	DD	08H
	DD	0cH
	DD	010H
	DD	018H
	DD	020H
	DD	030H
	DD	040H
	DD	060H
	DD	080H
	DD	0c0H
	DD	0100H
	DD	0180H
	DD	0200H
	DD	0300H
	DD	0400H
	DD	0600H
	DD	0800H
	DD	0c00H
	DD	01000H
	DD	01800H
	DD	02000H
	DD	03000H
	DD	04000H
	DD	06000H
; Function compile flags: /Odtp
; File d:\lp_solve_5.5\xli\xli_zimpl\ziboptvs10\thirdparty\zlib\trees.c
;	COMDAT bi_windup
_TEXT	SEGMENT
s$ = 8
bi_windup PROC						; COMDAT

; 1205 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1206 :     if (s->bi_valid > 8) {

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  0000a	83 b8 14 17 00
	00 08		 cmp	 DWORD PTR [rax+5908], 8
  00011	7e 71		 jle	 SHORT $LN3@bi_windup

; 1207 :         put_short(s, s->bi_buf);

  00013	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00018	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  0001f	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00025	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  0002a	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0002d	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00032	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00036	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00039	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  0003e	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00041	83 c1 01	 add	 ecx, 1
  00044	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00049	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  0004c	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00051	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00058	c1 fa 08	 sar	 edx, 8
  0005b	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00060	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00063	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00068	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0006c	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0006f	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00074	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00077	83 c1 01	 add	 ecx, 1
  0007a	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  0007f	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00082	eb 41		 jmp	 SHORT $LN2@bi_windup
$LN3@bi_windup:

; 1208 :     } else if (s->bi_valid > 0) {

  00084	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00089	83 b8 14 17 00
	00 00		 cmp	 DWORD PTR [rax+5908], 0
  00090	7e 33		 jle	 SHORT $LN1@bi_windup

; 1209 :         put_byte(s, (Byte)s->bi_buf);

  00092	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00097	8b 50 28	 mov	 edx, DWORD PTR [rax+40]
  0009a	48 8b 4c 24 08	 mov	 rcx, QWORD PTR s$[rsp]
  0009f	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  000a3	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000a8	0f b6 80 10 17
	00 00		 movzx	 eax, BYTE PTR [rax+5904]
  000af	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  000b2	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000b7	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000ba	83 c1 01	 add	 ecx, 1
  000bd	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000c2	89 48 28	 mov	 DWORD PTR [rax+40], ecx
$LN1@bi_windup:
$LN2@bi_windup:

; 1210 :     }
; 1211 :     s->bi_buf = 0;

  000c5	33 c9		 xor	 ecx, ecx
  000c7	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000cc	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx

; 1212 :     s->bi_valid = 0;

  000d3	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000d8	c7 80 14 17 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+5908], 0

; 1213 : #ifdef DEBUG
; 1214 :     s->bits_sent = (s->bits_sent+7) & ~7;
; 1215 : #endif
; 1216 : }

  000e2	c3		 ret	 0
bi_windup ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT bi_flush
_TEXT	SEGMENT
s$ = 8
bi_flush PROC						; COMDAT

; 1188 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1189 :     if (s->bi_valid == 16) {

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  0000a	83 b8 14 17 00
	00 10		 cmp	 DWORD PTR [rax+5908], 16
  00011	0f 85 8e 00 00
	00		 jne	 $LN3@bi_flush

; 1190 :         put_short(s, s->bi_buf);

  00017	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  0001c	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00023	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00029	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  0002e	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00031	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00036	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0003a	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0003d	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00042	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00045	83 c1 01	 add	 ecx, 1
  00048	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  0004d	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00050	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00055	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  0005c	c1 fa 08	 sar	 edx, 8
  0005f	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00064	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00067	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  0006c	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00070	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00073	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00078	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0007b	83 c1 01	 add	 ecx, 1
  0007e	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00083	89 48 28	 mov	 DWORD PTR [rax+40], ecx

; 1191 :         s->bi_buf = 0;

  00086	33 c9		 xor	 ecx, ecx
  00088	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  0008d	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx

; 1192 :         s->bi_valid = 0;

  00094	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00099	c7 80 14 17 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+5908], 0
  000a3	eb 76		 jmp	 SHORT $LN2@bi_flush
$LN3@bi_flush:

; 1193 :     } else if (s->bi_valid >= 8) {

  000a5	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000aa	83 b8 14 17 00
	00 08		 cmp	 DWORD PTR [rax+5908], 8
  000b1	7c 68		 jl	 SHORT $LN1@bi_flush

; 1194 :         put_byte(s, (Byte)s->bi_buf);

  000b3	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000b8	8b 50 28	 mov	 edx, DWORD PTR [rax+40]
  000bb	48 8b 4c 24 08	 mov	 rcx, QWORD PTR s$[rsp]
  000c0	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  000c4	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000c9	0f b6 80 10 17
	00 00		 movzx	 eax, BYTE PTR [rax+5904]
  000d0	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  000d3	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000d8	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000db	83 c1 01	 add	 ecx, 1
  000de	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000e3	89 48 28	 mov	 DWORD PTR [rax+40], ecx

; 1195 :         s->bi_buf >>= 8;

  000e6	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000eb	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  000f2	66 c1 e9 08	 shr	 cx, 8
  000f6	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  000fb	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx

; 1196 :         s->bi_valid -= 8;

  00102	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00107	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  0010d	83 e9 08	 sub	 ecx, 8
  00110	48 8b 44 24 08	 mov	 rax, QWORD PTR s$[rsp]
  00115	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN1@bi_flush:
$LN2@bi_flush:

; 1197 :     }
; 1198 : }

  0011b	f3 c3		 fatret	 0
bi_flush ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$bi_reverse DD imagerel bi_reverse
	DD	imagerel bi_reverse+80
	DD	imagerel $unwind$bi_reverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bi_reverse DD 010c01H
	DD	0220cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT bi_reverse
_TEXT	SEGMENT
res$ = 0
code$ = 32
len$ = 40
bi_reverse PROC						; COMDAT

; 1174 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 18	 sub	 rsp, 24

; 1175 :     register unsigned res = 0;

  0000c	c7 04 24 00 00
	00 00		 mov	 DWORD PTR res$[rsp], 0
$LN3@bi_reverse:

; 1176 :     do {
; 1177 :         res |= code & 1;

  00013	8b 4c 24 20	 mov	 ecx, DWORD PTR code$[rsp]
  00017	83 e1 01	 and	 ecx, 1
  0001a	8b 04 24	 mov	 eax, DWORD PTR res$[rsp]
  0001d	0b c1		 or	 eax, ecx
  0001f	89 04 24	 mov	 DWORD PTR res$[rsp], eax

; 1178 :         code >>= 1, res <<= 1;

  00022	8b 44 24 20	 mov	 eax, DWORD PTR code$[rsp]
  00026	d1 e8		 shr	 eax, 1
  00028	89 44 24 20	 mov	 DWORD PTR code$[rsp], eax
  0002c	8b 04 24	 mov	 eax, DWORD PTR res$[rsp]
  0002f	d1 e0		 shl	 eax, 1
  00031	89 04 24	 mov	 DWORD PTR res$[rsp], eax

; 1179 :     } while (--len > 0);

  00034	8b 44 24 28	 mov	 eax, DWORD PTR len$[rsp]
  00038	83 e8 01	 sub	 eax, 1
  0003b	89 44 24 28	 mov	 DWORD PTR len$[rsp], eax
  0003f	83 7c 24 28 00	 cmp	 DWORD PTR len$[rsp], 0
  00044	7f cd		 jg	 SHORT $LN3@bi_reverse

; 1180 :     return res >> 1;

  00046	8b 04 24	 mov	 eax, DWORD PTR res$[rsp]
  00049	d1 e8		 shr	 eax, 1

; 1181 : }

  0004b	48 83 c4 18	 add	 rsp, 24
  0004f	c3		 ret	 0
bi_reverse ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$detect_data_type DD imagerel detect_data_type
	DD	imagerel detect_data_type+208
	DD	imagerel $unwind$detect_data_type
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$detect_data_type DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT detect_data_type
_TEXT	SEGMENT
n$ = 0
black_mask$ = 4
s$ = 32
detect_data_type PROC					; COMDAT

; 1139 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 1140 :     /* black_mask is the bit mask of black-listed bytes
; 1141 :      * set bits 0..6, 14..25, and 28..31
; 1142 :      * 0xf3ffc07f = binary 11110011111111111100000001111111
; 1143 :      */
; 1144 :     unsigned long black_mask = 0xf3ffc07fUL;

  00009	c7 44 24 04 7f
	c0 ff f3	 mov	 DWORD PTR black_mask$[rsp], -201342849 ; f3ffc07fH

; 1145 :     int n;
; 1146 : 
; 1147 :     /* Check for non-textual ("black-listed") bytes. */
; 1148 :     for (n = 0; n <= 31; n++, black_mask >>= 1)

  00011	c7 04 24 00 00
	00 00		 mov	 DWORD PTR n$[rsp], 0
  00018	eb 13		 jmp	 SHORT $LN10@detect_dat
$LN9@detect_dat:
  0001a	8b 04 24	 mov	 eax, DWORD PTR n$[rsp]
  0001d	83 c0 01	 add	 eax, 1
  00020	89 04 24	 mov	 DWORD PTR n$[rsp], eax
  00023	8b 44 24 04	 mov	 eax, DWORD PTR black_mask$[rsp]
  00027	d1 e8		 shr	 eax, 1
  00029	89 44 24 04	 mov	 DWORD PTR black_mask$[rsp], eax
$LN10@detect_dat:
  0002d	83 3c 24 1f	 cmp	 DWORD PTR n$[rsp], 31
  00031	7f 26		 jg	 SHORT $LN8@detect_dat

; 1149 :         if ((black_mask & 1) && (s->dyn_ltree[n].Freq != 0))

  00033	8b 44 24 04	 mov	 eax, DWORD PTR black_mask$[rsp]
  00037	83 e0 01	 and	 eax, 1
  0003a	85 c0		 test	 eax, eax
  0003c	74 19		 je	 SHORT $LN7@detect_dat
  0003e	48 63 0c 24	 movsxd	 rcx, DWORD PTR n$[rsp]
  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00047	0f b7 84 88 bc
	00 00 00	 movzx	 eax, WORD PTR [rax+rcx*4+188]
  0004f	85 c0		 test	 eax, eax
  00051	74 04		 je	 SHORT $LN7@detect_dat

; 1150 :             return Z_BINARY;

  00053	33 c0		 xor	 eax, eax
  00055	eb 74		 jmp	 SHORT $LN11@detect_dat
$LN7@detect_dat:

; 1151 : 
; 1152 :     /* Check for textual ("white-listed") bytes. */
; 1153 :     if (s->dyn_ltree[9].Freq != 0 || s->dyn_ltree[10].Freq != 0

  00057	eb c1		 jmp	 SHORT $LN9@detect_dat
$LN8@detect_dat:

; 1154 :             || s->dyn_ltree[13].Freq != 0)

  00059	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0005e	0f b7 80 e0 00
	00 00		 movzx	 eax, WORD PTR [rax+224]
  00065	85 c0		 test	 eax, eax
  00067	75 20		 jne	 SHORT $LN5@detect_dat
  00069	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0006e	0f b7 80 e4 00
	00 00		 movzx	 eax, WORD PTR [rax+228]
  00075	85 c0		 test	 eax, eax
  00077	75 10		 jne	 SHORT $LN5@detect_dat
  00079	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0007e	0f b7 80 f0 00
	00 00		 movzx	 eax, WORD PTR [rax+240]
  00085	85 c0		 test	 eax, eax
  00087	74 07		 je	 SHORT $LN6@detect_dat
$LN5@detect_dat:

; 1155 :         return Z_TEXT;

  00089	b8 01 00 00 00	 mov	 eax, 1
  0008e	eb 3b		 jmp	 SHORT $LN11@detect_dat
$LN6@detect_dat:

; 1156 :     for (n = 32; n < LITERALS; n++)

  00090	c7 04 24 20 00
	00 00		 mov	 DWORD PTR n$[rsp], 32	; 00000020H
  00097	eb 09		 jmp	 SHORT $LN4@detect_dat
$LN3@detect_dat:
  00099	8b 04 24	 mov	 eax, DWORD PTR n$[rsp]
  0009c	83 c0 01	 add	 eax, 1
  0009f	89 04 24	 mov	 DWORD PTR n$[rsp], eax
$LN4@detect_dat:
  000a2	81 3c 24 00 01
	00 00		 cmp	 DWORD PTR n$[rsp], 256	; 00000100H
  000a9	7d 1e		 jge	 SHORT $LN2@detect_dat

; 1157 :         if (s->dyn_ltree[n].Freq != 0)

  000ab	48 63 0c 24	 movsxd	 rcx, DWORD PTR n$[rsp]
  000af	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000b4	0f b7 84 88 bc
	00 00 00	 movzx	 eax, WORD PTR [rax+rcx*4+188]
  000bc	85 c0		 test	 eax, eax
  000be	74 07		 je	 SHORT $LN1@detect_dat

; 1158 :             return Z_TEXT;

  000c0	b8 01 00 00 00	 mov	 eax, 1
  000c5	eb 04		 jmp	 SHORT $LN11@detect_dat
$LN1@detect_dat:

; 1159 : 
; 1160 :     /* There are no "black-listed" or "white-listed" bytes:
; 1161 :      * this stream either is empty or has tolerated ("gray-listed") bytes only.
; 1162 :      */
; 1163 :     return Z_BINARY;

  000c7	eb d0		 jmp	 SHORT $LN3@detect_dat
$LN2@detect_dat:
  000c9	33 c0		 xor	 eax, eax
$LN11@detect_dat:

; 1164 : }

  000cb	48 83 c4 18	 add	 rsp, 24
  000cf	c3		 ret	 0
detect_data_type ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$compress_block DD imagerel compress_block
	DD	imagerel compress_block+2620
	DD	imagerel $unwind$compress_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compress_block DD 011301H
	DD	0a213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT compress_block
_TEXT	SEGMENT
extra$ = 0
code$ = 4
lx$ = 8
lc$ = 12
dist$ = 16
len$78794 = 20
val$78798 = 24
len$78809 = 28
val$78813 = 32
len$78824 = 36
val$78828 = 40
len$78838 = 44
val$78842 = 48
len$78853 = 52
val$78857 = 56
len$78867 = 60
val$78871 = 64
tv334 = 68
s$ = 96
ltree$ = 104
dtree$ = 112
compress_block PROC					; COMDAT

; 1080 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1081 :     unsigned dist;      /* distance of matched string */
; 1082 :     int lc;             /* match length or unmatched char (if dist == 0) */
; 1083 :     unsigned lx = 0;    /* running index in l_buf */

  00013	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR lx$[rsp], 0

; 1084 :     unsigned code;      /* the code to send */
; 1085 :     int extra;          /* number of extra bits to send */
; 1086 : 
; 1087 :     if (s->last_lit != 0) do {

  0001b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00020	83 b8 f4 16 00
	00 00		 cmp	 DWORD PTR [rax+5876], 0
  00027	0f 84 7a 08 00
	00		 je	 $LN20@compress_b
$LN19@compress_b:

; 1088 :         dist = s->d_buf[lx];

  0002d	8b 4c 24 08	 mov	 ecx, DWORD PTR lx$[rsp]
  00031	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00036	48 8b 80 f8 16
	00 00		 mov	 rax, QWORD PTR [rax+5880]
  0003d	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00041	89 44 24 10	 mov	 DWORD PTR dist$[rsp], eax

; 1089 :         lc = s->l_buf[lx++];

  00045	8b 4c 24 08	 mov	 ecx, DWORD PTR lx$[rsp]
  00049	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0004e	48 8b 80 e8 16
	00 00		 mov	 rax, QWORD PTR [rax+5864]
  00055	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00059	89 44 24 0c	 mov	 DWORD PTR lc$[rsp], eax
  0005d	8b 44 24 08	 mov	 eax, DWORD PTR lx$[rsp]
  00061	83 c0 01	 add	 eax, 1
  00064	89 44 24 08	 mov	 DWORD PTR lx$[rsp], eax

; 1090 :         if (dist == 0) {

  00068	83 7c 24 10 00	 cmp	 DWORD PTR dist$[rsp], 0
  0006d	0f 85 85 01 00
	00		 jne	 $LN16@compress_b

; 1091 :             send_code(s, lc, ltree); /* send a literal byte */

  00073	48 63 4c 24 0c	 movsxd	 rcx, DWORD PTR lc$[rsp]
  00078	48 8b 44 24 68	 mov	 rax, QWORD PTR ltree$[rsp]
  0007d	0f b7 44 88 02	 movzx	 eax, WORD PTR [rax+rcx*4+2]
  00082	89 44 24 14	 mov	 DWORD PTR len$78794[rsp], eax
  00086	b9 10 00 00 00	 mov	 ecx, 16
  0008b	2b 4c 24 14	 sub	 ecx, DWORD PTR len$78794[rsp]
  0008f	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00094	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  0009a	0f 8e 01 01 00
	00		 jle	 $LN15@compress_b
  000a0	48 63 4c 24 0c	 movsxd	 rcx, DWORD PTR lc$[rsp]
  000a5	48 8b 44 24 68	 mov	 rax, QWORD PTR ltree$[rsp]
  000aa	0f b7 04 88	 movzx	 eax, WORD PTR [rax+rcx*4]
  000ae	89 44 24 18	 mov	 DWORD PTR val$78798[rsp], eax
  000b2	0f b7 54 24 18	 movzx	 edx, WORD PTR val$78798[rsp]
  000b7	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000bc	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  000c2	0f b6 c8	 movzx	 ecx, al
  000c5	d3 e2		 shl	 edx, cl
  000c7	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000cc	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  000d3	0b ca		 or	 ecx, edx
  000d5	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000da	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  000e1	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000e6	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  000ed	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  000f3	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000f8	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000fb	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00100	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00104	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00107	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0010c	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0010f	83 c1 01	 add	 ecx, 1
  00112	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00117	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  0011a	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0011f	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00126	c1 fa 08	 sar	 edx, 8
  00129	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0012e	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00131	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00136	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0013a	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0013d	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00142	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00145	83 c1 01	 add	 ecx, 1
  00148	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0014d	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00150	0f b7 54 24 18	 movzx	 edx, WORD PTR val$78798[rsp]
  00155	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0015a	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  00161	b8 10 00 00 00	 mov	 eax, 16
  00166	48 2b c1	 sub	 rax, rcx
  00169	0f b6 c8	 movzx	 ecx, al
  0016c	8b c2		 mov	 eax, edx
  0016e	d3 f8		 sar	 eax, cl
  00170	8b c8		 mov	 ecx, eax
  00172	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00177	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0017e	48 63 4c 24 14	 movsxd	 rcx, DWORD PTR len$78794[rsp]
  00183	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00188	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  0018f	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00194	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00199	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  0019f	eb 52		 jmp	 SHORT $LN14@compress_b
$LN15@compress_b:
  001a1	48 63 4c 24 0c	 movsxd	 rcx, DWORD PTR lc$[rsp]
  001a6	48 8b 44 24 68	 mov	 rax, QWORD PTR ltree$[rsp]
  001ab	0f b7 14 88	 movzx	 edx, WORD PTR [rax+rcx*4]
  001af	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001b4	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  001ba	0f b6 c8	 movzx	 ecx, al
  001bd	d3 e2		 shl	 edx, cl
  001bf	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001c4	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  001cb	0b ca		 or	 ecx, edx
  001cd	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001d2	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  001d9	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001de	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  001e4	03 4c 24 14	 add	 ecx, DWORD PTR len$78794[rsp]
  001e8	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001ed	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN14@compress_b:

; 1092 :             Tracecv(isgraph(lc), (stderr," '%c' ", lc));
; 1093 :         } else {

  001f3	e9 9a 06 00 00	 jmp	 $LN13@compress_b
$LN16@compress_b:

; 1094 :             /* Here, lc is the match length - MIN_MATCH */
; 1095 :             code = _length_code[lc];

  001f8	48 63 4c 24 0c	 movsxd	 rcx, DWORD PTR lc$[rsp]
  001fd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_length_code
  00204	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00208	89 44 24 04	 mov	 DWORD PTR code$[rsp], eax

; 1096 :             send_code(s, code+LITERALS+1, ltree); /* send the length code */

  0020c	8b 44 24 04	 mov	 eax, DWORD PTR code$[rsp]
  00210	05 01 01 00 00	 add	 eax, 257		; 00000101H
  00215	8b c8		 mov	 ecx, eax
  00217	48 8b 44 24 68	 mov	 rax, QWORD PTR ltree$[rsp]
  0021c	0f b7 44 88 02	 movzx	 eax, WORD PTR [rax+rcx*4+2]
  00221	89 44 24 1c	 mov	 DWORD PTR len$78809[rsp], eax
  00225	b9 10 00 00 00	 mov	 ecx, 16
  0022a	2b 4c 24 1c	 sub	 ecx, DWORD PTR len$78809[rsp]
  0022e	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00233	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  00239	0f 8e 07 01 00
	00		 jle	 $LN12@compress_b
  0023f	8b 44 24 04	 mov	 eax, DWORD PTR code$[rsp]
  00243	05 01 01 00 00	 add	 eax, 257		; 00000101H
  00248	8b c8		 mov	 ecx, eax
  0024a	48 8b 44 24 68	 mov	 rax, QWORD PTR ltree$[rsp]
  0024f	0f b7 04 88	 movzx	 eax, WORD PTR [rax+rcx*4]
  00253	89 44 24 20	 mov	 DWORD PTR val$78813[rsp], eax
  00257	0f b7 54 24 20	 movzx	 edx, WORD PTR val$78813[rsp]
  0025c	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00261	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00267	0f b6 c8	 movzx	 ecx, al
  0026a	d3 e2		 shl	 edx, cl
  0026c	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00271	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00278	0b ca		 or	 ecx, edx
  0027a	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0027f	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00286	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0028b	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00292	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00298	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0029d	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  002a0	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002a5	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  002a9	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  002ac	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002b1	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  002b4	83 c1 01	 add	 ecx, 1
  002b7	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002bc	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  002bf	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002c4	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  002cb	c1 fa 08	 sar	 edx, 8
  002ce	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002d3	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  002d6	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002db	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  002df	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  002e2	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002e7	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  002ea	83 c1 01	 add	 ecx, 1
  002ed	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002f2	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  002f5	0f b7 54 24 20	 movzx	 edx, WORD PTR val$78813[rsp]
  002fa	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002ff	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  00306	b8 10 00 00 00	 mov	 eax, 16
  0030b	48 2b c1	 sub	 rax, rcx
  0030e	0f b6 c8	 movzx	 ecx, al
  00311	8b c2		 mov	 eax, edx
  00313	d3 f8		 sar	 eax, cl
  00315	8b c8		 mov	 ecx, eax
  00317	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0031c	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00323	48 63 4c 24 1c	 movsxd	 rcx, DWORD PTR len$78809[rsp]
  00328	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0032d	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  00334	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00339	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0033e	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  00344	eb 58		 jmp	 SHORT $LN11@compress_b
$LN12@compress_b:
  00346	8b 44 24 04	 mov	 eax, DWORD PTR code$[rsp]
  0034a	05 01 01 00 00	 add	 eax, 257		; 00000101H
  0034f	8b c8		 mov	 ecx, eax
  00351	48 8b 44 24 68	 mov	 rax, QWORD PTR ltree$[rsp]
  00356	0f b7 14 88	 movzx	 edx, WORD PTR [rax+rcx*4]
  0035a	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0035f	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00365	0f b6 c8	 movzx	 ecx, al
  00368	d3 e2		 shl	 edx, cl
  0036a	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0036f	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00376	0b ca		 or	 ecx, edx
  00378	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0037d	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00384	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00389	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  0038f	03 4c 24 1c	 add	 ecx, DWORD PTR len$78809[rsp]
  00393	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00398	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN11@compress_b:

; 1097 :             extra = extra_lbits[code];

  0039e	8b 4c 24 04	 mov	 ecx, DWORD PTR code$[rsp]
  003a2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:extra_lbits
  003a9	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  003ac	89 04 24	 mov	 DWORD PTR extra$[rsp], eax

; 1098 :             if (extra != 0) {

  003af	83 3c 24 00	 cmp	 DWORD PTR extra$[rsp], 0
  003b3	0f 84 79 01 00
	00		 je	 $LN10@compress_b

; 1099 :                 lc -= base_length[code];

  003b9	8b 4c 24 04	 mov	 ecx, DWORD PTR code$[rsp]
  003bd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:base_length
  003c4	8b 0c 88	 mov	 ecx, DWORD PTR [rax+rcx*4]
  003c7	8b 44 24 0c	 mov	 eax, DWORD PTR lc$[rsp]
  003cb	2b c1		 sub	 eax, ecx
  003cd	89 44 24 0c	 mov	 DWORD PTR lc$[rsp], eax

; 1100 :                 send_bits(s, lc, extra);       /* send the extra length bits */

  003d1	8b 04 24	 mov	 eax, DWORD PTR extra$[rsp]
  003d4	89 44 24 24	 mov	 DWORD PTR len$78824[rsp], eax
  003d8	b9 10 00 00 00	 mov	 ecx, 16
  003dd	2b 4c 24 24	 sub	 ecx, DWORD PTR len$78824[rsp]
  003e1	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  003e6	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  003ec	0f 8e f7 00 00
	00		 jle	 $LN9@compress_b
  003f2	8b 44 24 0c	 mov	 eax, DWORD PTR lc$[rsp]
  003f6	89 44 24 28	 mov	 DWORD PTR val$78828[rsp], eax
  003fa	0f b7 54 24 28	 movzx	 edx, WORD PTR val$78828[rsp]
  003ff	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00404	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0040a	0f b6 c8	 movzx	 ecx, al
  0040d	d3 e2		 shl	 edx, cl
  0040f	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00414	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  0041b	0b ca		 or	 ecx, edx
  0041d	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00422	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00429	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0042e	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00435	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0043b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00440	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00443	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00448	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0044c	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0044f	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00454	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00457	83 c1 01	 add	 ecx, 1
  0045a	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0045f	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00462	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00467	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  0046e	c1 fa 08	 sar	 edx, 8
  00471	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00476	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00479	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0047e	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00482	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00485	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0048a	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0048d	83 c1 01	 add	 ecx, 1
  00490	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00495	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00498	0f b7 54 24 28	 movzx	 edx, WORD PTR val$78828[rsp]
  0049d	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004a2	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  004a9	b8 10 00 00 00	 mov	 eax, 16
  004ae	48 2b c1	 sub	 rax, rcx
  004b1	0f b6 c8	 movzx	 ecx, al
  004b4	8b c2		 mov	 eax, edx
  004b6	d3 f8		 sar	 eax, cl
  004b8	8b c8		 mov	 ecx, eax
  004ba	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004bf	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  004c6	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR len$78824[rsp]
  004cb	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004d0	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  004d7	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  004dc	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004e1	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  004e7	eb 49		 jmp	 SHORT $LN8@compress_b
$LN9@compress_b:
  004e9	0f b7 54 24 0c	 movzx	 edx, WORD PTR lc$[rsp]
  004ee	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004f3	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  004f9	0f b6 c8	 movzx	 ecx, al
  004fc	d3 e2		 shl	 edx, cl
  004fe	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00503	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  0050a	0b ca		 or	 ecx, edx
  0050c	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00511	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00518	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0051d	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00523	03 4c 24 24	 add	 ecx, DWORD PTR len$78824[rsp]
  00527	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0052c	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN8@compress_b:
$LN10@compress_b:

; 1101 :             }
; 1102 :             dist--; /* dist is now the match distance - 1 */

  00532	8b 44 24 10	 mov	 eax, DWORD PTR dist$[rsp]
  00536	83 e8 01	 sub	 eax, 1
  00539	89 44 24 10	 mov	 DWORD PTR dist$[rsp], eax

; 1103 :             code = d_code(dist);

  0053d	81 7c 24 10 00
	01 00 00	 cmp	 DWORD PTR dist$[rsp], 256 ; 00000100H
  00545	73 15		 jae	 SHORT $LN23@compress_b
  00547	8b 4c 24 10	 mov	 ecx, DWORD PTR dist$[rsp]
  0054b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_dist_code
  00552	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00556	89 44 24 44	 mov	 DWORD PTR tv334[rsp], eax
  0055a	eb 1d		 jmp	 SHORT $LN24@compress_b
$LN23@compress_b:
  0055c	8b 44 24 10	 mov	 eax, DWORD PTR dist$[rsp]
  00560	c1 e8 07	 shr	 eax, 7
  00563	05 00 01 00 00	 add	 eax, 256		; 00000100H
  00568	8b c8		 mov	 ecx, eax
  0056a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_dist_code
  00571	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00575	89 44 24 44	 mov	 DWORD PTR tv334[rsp], eax
$LN24@compress_b:
  00579	8b 44 24 44	 mov	 eax, DWORD PTR tv334[rsp]
  0057d	89 44 24 04	 mov	 DWORD PTR code$[rsp], eax

; 1104 :             Assert (code < D_CODES, "bad d_code");
; 1105 : 
; 1106 :             send_code(s, code, dtree);       /* send the distance code */

  00581	8b 4c 24 04	 mov	 ecx, DWORD PTR code$[rsp]
  00585	48 8b 44 24 70	 mov	 rax, QWORD PTR dtree$[rsp]
  0058a	0f b7 44 88 02	 movzx	 eax, WORD PTR [rax+rcx*4+2]
  0058f	89 44 24 2c	 mov	 DWORD PTR len$78838[rsp], eax
  00593	b9 10 00 00 00	 mov	 ecx, 16
  00598	2b 4c 24 2c	 sub	 ecx, DWORD PTR len$78838[rsp]
  0059c	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005a1	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  005a7	0f 8e 00 01 00
	00		 jle	 $LN7@compress_b
  005ad	8b 4c 24 04	 mov	 ecx, DWORD PTR code$[rsp]
  005b1	48 8b 44 24 70	 mov	 rax, QWORD PTR dtree$[rsp]
  005b6	0f b7 04 88	 movzx	 eax, WORD PTR [rax+rcx*4]
  005ba	89 44 24 30	 mov	 DWORD PTR val$78842[rsp], eax
  005be	0f b7 54 24 30	 movzx	 edx, WORD PTR val$78842[rsp]
  005c3	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005c8	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  005ce	0f b6 c8	 movzx	 ecx, al
  005d1	d3 e2		 shl	 edx, cl
  005d3	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005d8	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  005df	0b ca		 or	 ecx, edx
  005e1	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005e6	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  005ed	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005f2	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  005f9	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  005ff	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00604	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00607	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0060c	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00610	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00613	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00618	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0061b	83 c1 01	 add	 ecx, 1
  0061e	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00623	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00626	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0062b	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00632	c1 fa 08	 sar	 edx, 8
  00635	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0063a	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0063d	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00642	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00646	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00649	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0064e	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00651	83 c1 01	 add	 ecx, 1
  00654	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00659	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  0065c	0f b7 54 24 30	 movzx	 edx, WORD PTR val$78842[rsp]
  00661	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00666	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  0066d	b8 10 00 00 00	 mov	 eax, 16
  00672	48 2b c1	 sub	 rax, rcx
  00675	0f b6 c8	 movzx	 ecx, al
  00678	8b c2		 mov	 eax, edx
  0067a	d3 f8		 sar	 eax, cl
  0067c	8b c8		 mov	 ecx, eax
  0067e	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00683	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0068a	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR len$78838[rsp]
  0068f	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00694	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  0069b	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  006a0	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  006a5	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  006ab	eb 51		 jmp	 SHORT $LN6@compress_b
$LN7@compress_b:
  006ad	8b 4c 24 04	 mov	 ecx, DWORD PTR code$[rsp]
  006b1	48 8b 44 24 70	 mov	 rax, QWORD PTR dtree$[rsp]
  006b6	0f b7 14 88	 movzx	 edx, WORD PTR [rax+rcx*4]
  006ba	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  006bf	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  006c5	0f b6 c8	 movzx	 ecx, al
  006c8	d3 e2		 shl	 edx, cl
  006ca	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  006cf	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  006d6	0b ca		 or	 ecx, edx
  006d8	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  006dd	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  006e4	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  006e9	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  006ef	03 4c 24 2c	 add	 ecx, DWORD PTR len$78838[rsp]
  006f3	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  006f8	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN6@compress_b:

; 1107 :             extra = extra_dbits[code];

  006fe	8b 4c 24 04	 mov	 ecx, DWORD PTR code$[rsp]
  00702	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:extra_dbits
  00709	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  0070c	89 04 24	 mov	 DWORD PTR extra$[rsp], eax

; 1108 :             if (extra != 0) {

  0070f	83 3c 24 00	 cmp	 DWORD PTR extra$[rsp], 0
  00713	0f 84 79 01 00
	00		 je	 $LN5@compress_b

; 1109 :                 dist -= base_dist[code];

  00719	8b 4c 24 04	 mov	 ecx, DWORD PTR code$[rsp]
  0071d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:base_dist
  00724	8b 0c 88	 mov	 ecx, DWORD PTR [rax+rcx*4]
  00727	8b 44 24 10	 mov	 eax, DWORD PTR dist$[rsp]
  0072b	2b c1		 sub	 eax, ecx
  0072d	89 44 24 10	 mov	 DWORD PTR dist$[rsp], eax

; 1110 :                 send_bits(s, dist, extra);   /* send the extra distance bits */

  00731	8b 04 24	 mov	 eax, DWORD PTR extra$[rsp]
  00734	89 44 24 34	 mov	 DWORD PTR len$78853[rsp], eax
  00738	b9 10 00 00 00	 mov	 ecx, 16
  0073d	2b 4c 24 34	 sub	 ecx, DWORD PTR len$78853[rsp]
  00741	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00746	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  0074c	0f 8e f7 00 00
	00		 jle	 $LN4@compress_b
  00752	8b 44 24 10	 mov	 eax, DWORD PTR dist$[rsp]
  00756	89 44 24 38	 mov	 DWORD PTR val$78857[rsp], eax
  0075a	0f b7 54 24 38	 movzx	 edx, WORD PTR val$78857[rsp]
  0075f	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00764	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0076a	0f b6 c8	 movzx	 ecx, al
  0076d	d3 e2		 shl	 edx, cl
  0076f	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00774	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  0077b	0b ca		 or	 ecx, edx
  0077d	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00782	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00789	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0078e	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00795	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0079b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  007a0	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  007a3	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  007a8	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  007ac	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  007af	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  007b4	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  007b7	83 c1 01	 add	 ecx, 1
  007ba	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  007bf	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  007c2	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  007c7	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  007ce	c1 fa 08	 sar	 edx, 8
  007d1	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  007d6	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  007d9	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  007de	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  007e2	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  007e5	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  007ea	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  007ed	83 c1 01	 add	 ecx, 1
  007f0	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  007f5	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  007f8	0f b7 54 24 38	 movzx	 edx, WORD PTR val$78857[rsp]
  007fd	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00802	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  00809	b8 10 00 00 00	 mov	 eax, 16
  0080e	48 2b c1	 sub	 rax, rcx
  00811	0f b6 c8	 movzx	 ecx, al
  00814	8b c2		 mov	 eax, edx
  00816	d3 f8		 sar	 eax, cl
  00818	8b c8		 mov	 ecx, eax
  0081a	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0081f	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00826	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR len$78853[rsp]
  0082b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00830	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  00837	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  0083c	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00841	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  00847	eb 49		 jmp	 SHORT $LN3@compress_b
$LN4@compress_b:
  00849	0f b7 54 24 10	 movzx	 edx, WORD PTR dist$[rsp]
  0084e	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00853	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00859	0f b6 c8	 movzx	 ecx, al
  0085c	d3 e2		 shl	 edx, cl
  0085e	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00863	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  0086a	0b ca		 or	 ecx, edx
  0086c	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00871	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00878	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0087d	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00883	03 4c 24 34	 add	 ecx, DWORD PTR len$78853[rsp]
  00887	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0088c	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN3@compress_b:
$LN5@compress_b:
$LN13@compress_b:

; 1111 :             }
; 1112 :         } /* literal or match pair ? */
; 1113 : 
; 1114 :         /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
; 1115 :         Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
; 1116 :                "pendingBuf overflow");
; 1117 : 
; 1118 :     } while (lx < s->last_lit);

  00892	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00897	8b 80 f4 16 00
	00		 mov	 eax, DWORD PTR [rax+5876]
  0089d	39 44 24 08	 cmp	 DWORD PTR lx$[rsp], eax
  008a1	0f 82 86 f7 ff
	ff		 jb	 $LN19@compress_b
$LN20@compress_b:

; 1119 : 
; 1120 :     send_code(s, END_BLOCK, ltree);

  008a7	48 8b 44 24 68	 mov	 rax, QWORD PTR ltree$[rsp]
  008ac	0f b7 80 02 04
	00 00		 movzx	 eax, WORD PTR [rax+1026]
  008b3	89 44 24 3c	 mov	 DWORD PTR len$78867[rsp], eax
  008b7	b9 10 00 00 00	 mov	 ecx, 16
  008bc	2b 4c 24 3c	 sub	 ecx, DWORD PTR len$78867[rsp]
  008c0	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  008c5	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  008cb	0f 8e ff 00 00
	00		 jle	 $LN2@compress_b
  008d1	48 8b 44 24 68	 mov	 rax, QWORD PTR ltree$[rsp]
  008d6	0f b7 80 00 04
	00 00		 movzx	 eax, WORD PTR [rax+1024]
  008dd	89 44 24 40	 mov	 DWORD PTR val$78871[rsp], eax
  008e1	0f b7 54 24 40	 movzx	 edx, WORD PTR val$78871[rsp]
  008e6	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  008eb	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  008f1	0f b6 c8	 movzx	 ecx, al
  008f4	d3 e2		 shl	 edx, cl
  008f6	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  008fb	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00902	0b ca		 or	 ecx, edx
  00904	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00909	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00910	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00915	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  0091c	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00922	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00927	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0092a	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0092f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00933	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00936	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0093b	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0093e	83 c1 01	 add	 ecx, 1
  00941	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00946	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00949	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0094e	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00955	c1 fa 08	 sar	 edx, 8
  00958	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0095d	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00960	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00965	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00969	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0096c	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00971	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00974	83 c1 01	 add	 ecx, 1
  00977	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0097c	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  0097f	0f b7 54 24 40	 movzx	 edx, WORD PTR val$78871[rsp]
  00984	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00989	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  00990	b8 10 00 00 00	 mov	 eax, 16
  00995	48 2b c1	 sub	 rax, rcx
  00998	0f b6 c8	 movzx	 ecx, al
  0099b	8b c2		 mov	 eax, edx
  0099d	d3 f8		 sar	 eax, cl
  0099f	8b c8		 mov	 ecx, eax
  009a1	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  009a6	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  009ad	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR len$78867[rsp]
  009b2	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  009b7	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  009be	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  009c3	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  009c8	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  009ce	eb 50		 jmp	 SHORT $LN1@compress_b
$LN2@compress_b:
  009d0	48 8b 44 24 68	 mov	 rax, QWORD PTR ltree$[rsp]
  009d5	0f b7 90 00 04
	00 00		 movzx	 edx, WORD PTR [rax+1024]
  009dc	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  009e1	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  009e7	0f b6 c8	 movzx	 ecx, al
  009ea	d3 e2		 shl	 edx, cl
  009ec	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  009f1	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  009f8	0b ca		 or	 ecx, edx
  009fa	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  009ff	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00a06	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00a0b	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00a11	03 4c 24 3c	 add	 ecx, DWORD PTR len$78867[rsp]
  00a15	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00a1a	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN1@compress_b:

; 1121 :     s->last_eob_len = ltree[END_BLOCK].Len;

  00a20	48 8b 44 24 68	 mov	 rax, QWORD PTR ltree$[rsp]
  00a25	0f b7 88 02 04
	00 00		 movzx	 ecx, WORD PTR [rax+1026]
  00a2c	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00a31	89 88 0c 17 00
	00		 mov	 DWORD PTR [rax+5900], ecx

; 1122 : }

  00a37	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00a3b	c3		 ret	 0
compress_block ENDP
_TEXT	ENDS
PUBLIC	_tr_align
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tr_align DD imagerel $LN12
	DD	imagerel $LN12+1516
	DD	imagerel $unwind$_tr_align
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tr_align DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _tr_align
_TEXT	SEGMENT
len$78659 = 32
val$78663 = 36
len$78673 = 40
val$78677 = 44
len$78688 = 48
val$78692 = 52
len$78702 = 56
val$78706 = 60
s$ = 80
_tr_align PROC						; COMDAT

; 898  : {

$LN12:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 899  :     send_bits(s, STATIC_TREES<<1, 3);

  00009	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR len$78659[rsp], 3
  00011	b9 10 00 00 00	 mov	 ecx, 16
  00016	2b 4c 24 20	 sub	 ecx, DWORD PTR len$78659[rsp]
  0001a	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0001f	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  00025	0f 8e f7 00 00
	00		 jle	 $LN9@tr_align
  0002b	c7 44 24 24 02
	00 00 00	 mov	 DWORD PTR val$78663[rsp], 2
  00033	0f b7 54 24 24	 movzx	 edx, WORD PTR val$78663[rsp]
  00038	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0003d	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00043	0f b6 c8	 movzx	 ecx, al
  00046	d3 e2		 shl	 edx, cl
  00048	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0004d	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00054	0b ca		 or	 ecx, edx
  00056	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0005b	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00062	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00067	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  0006e	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00074	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00079	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0007c	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00081	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00085	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00088	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0008d	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00090	83 c1 01	 add	 ecx, 1
  00093	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00098	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  0009b	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000a0	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  000a7	c1 fa 08	 sar	 edx, 8
  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000af	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000b2	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000b7	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000bb	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000c3	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000c6	83 c1 01	 add	 ecx, 1
  000c9	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000ce	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  000d1	0f b7 54 24 24	 movzx	 edx, WORD PTR val$78663[rsp]
  000d6	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000db	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  000e2	b8 10 00 00 00	 mov	 eax, 16
  000e7	48 2b c1	 sub	 rax, rcx
  000ea	0f b6 c8	 movzx	 ecx, al
  000ed	8b c2		 mov	 eax, edx
  000ef	d3 f8		 sar	 eax, cl
  000f1	8b c8		 mov	 ecx, eax
  000f3	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000f8	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  000ff	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR len$78659[rsp]
  00104	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00109	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  00110	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00115	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0011a	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  00120	eb 49		 jmp	 SHORT $LN8@tr_align
$LN9@tr_align:
  00122	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00127	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0012d	ba 02 00 00 00	 mov	 edx, 2
  00132	0f b6 c8	 movzx	 ecx, al
  00135	d3 e2		 shl	 edx, cl
  00137	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0013c	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00143	0b ca		 or	 ecx, edx
  00145	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0014a	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00151	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00156	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  0015c	03 4c 24 20	 add	 ecx, DWORD PTR len$78659[rsp]
  00160	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00165	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN8@tr_align:

; 900  :     send_code(s, END_BLOCK, static_ltree);

  0016b	0f b7 05 02 04
	00 00		 movzx	 eax, WORD PTR static_ltree+1026
  00172	89 44 24 28	 mov	 DWORD PTR len$78673[rsp], eax
  00176	b9 10 00 00 00	 mov	 ecx, 16
  0017b	2b 4c 24 28	 sub	 ecx, DWORD PTR len$78673[rsp]
  0017f	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00184	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  0018a	0f 8e fa 00 00
	00		 jle	 $LN7@tr_align
  00190	0f b7 05 00 04
	00 00		 movzx	 eax, WORD PTR static_ltree+1024
  00197	89 44 24 2c	 mov	 DWORD PTR val$78677[rsp], eax
  0019b	0f b7 54 24 2c	 movzx	 edx, WORD PTR val$78677[rsp]
  001a0	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001a5	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  001ab	0f b6 c8	 movzx	 ecx, al
  001ae	d3 e2		 shl	 edx, cl
  001b0	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001b5	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  001bc	0b ca		 or	 ecx, edx
  001be	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001c3	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  001ca	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001cf	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  001d6	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  001dc	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001e1	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  001e4	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001e9	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  001ed	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  001f0	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001f5	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  001f8	83 c1 01	 add	 ecx, 1
  001fb	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00200	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00203	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00208	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  0020f	c1 fa 08	 sar	 edx, 8
  00212	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00217	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0021a	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0021f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00223	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00226	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0022b	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0022e	83 c1 01	 add	 ecx, 1
  00231	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00236	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00239	0f b7 54 24 2c	 movzx	 edx, WORD PTR val$78677[rsp]
  0023e	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00243	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  0024a	b8 10 00 00 00	 mov	 eax, 16
  0024f	48 2b c1	 sub	 rax, rcx
  00252	0f b6 c8	 movzx	 ecx, al
  00255	8b c2		 mov	 eax, edx
  00257	d3 f8		 sar	 eax, cl
  00259	8b c8		 mov	 ecx, eax
  0025b	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00260	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00267	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR len$78673[rsp]
  0026c	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00271	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  00278	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  0027d	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00282	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  00288	eb 4b		 jmp	 SHORT $LN6@tr_align
$LN7@tr_align:
  0028a	0f b7 15 00 04
	00 00		 movzx	 edx, WORD PTR static_ltree+1024
  00291	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00296	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0029c	0f b6 c8	 movzx	 ecx, al
  0029f	d3 e2		 shl	 edx, cl
  002a1	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  002a6	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  002ad	0b ca		 or	 ecx, edx
  002af	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  002b4	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  002bb	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  002c0	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  002c6	03 4c 24 28	 add	 ecx, DWORD PTR len$78673[rsp]
  002ca	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  002cf	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN6@tr_align:

; 901  : #ifdef DEBUG
; 902  :     s->compressed_len += 10L; /* 3 for block type, 7 for EOB */
; 903  : #endif
; 904  :     bi_flush(s);

  002d5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  002da	e8 00 00 00 00	 call	 bi_flush

; 905  :     /* Of the 10 bits for the empty block, we have already sent
; 906  :      * (10 - bi_valid) bits. The lookahead for the last real code (before
; 907  :      * the EOB of the previous block) was thus at least one plus the length
; 908  :      * of the EOB plus what we have just sent of the empty static block.
; 909  :      */
; 910  :     if (1 + s->last_eob_len + 10 - s->bi_valid < 9) {

  002df	4c 8b 5c 24 50	 mov	 r11, QWORD PTR s$[rsp]
  002e4	41 8b 83 0c 17
	00 00		 mov	 eax, DWORD PTR [r11+5900]
  002eb	83 c0 0b	 add	 eax, 11
  002ee	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  002f3	2b 81 14 17 00
	00		 sub	 eax, DWORD PTR [rcx+5908]
  002f9	83 f8 09	 cmp	 eax, 9
  002fc	0f 8d d6 02 00
	00		 jge	 $LN5@tr_align

; 911  :         send_bits(s, STATIC_TREES<<1, 3);

  00302	c7 44 24 30 03
	00 00 00	 mov	 DWORD PTR len$78688[rsp], 3
  0030a	b9 10 00 00 00	 mov	 ecx, 16
  0030f	2b 4c 24 30	 sub	 ecx, DWORD PTR len$78688[rsp]
  00313	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00318	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  0031e	0f 8e f7 00 00
	00		 jle	 $LN4@tr_align
  00324	c7 44 24 34 02
	00 00 00	 mov	 DWORD PTR val$78692[rsp], 2
  0032c	0f b7 54 24 34	 movzx	 edx, WORD PTR val$78692[rsp]
  00331	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00336	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0033c	0f b6 c8	 movzx	 ecx, al
  0033f	d3 e2		 shl	 edx, cl
  00341	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00346	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  0034d	0b ca		 or	 ecx, edx
  0034f	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00354	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0035b	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00360	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00367	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0036d	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00372	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00375	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0037a	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0037e	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00381	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00386	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00389	83 c1 01	 add	 ecx, 1
  0038c	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00391	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00394	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00399	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  003a0	c1 fa 08	 sar	 edx, 8
  003a3	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003a8	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  003ab	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003b0	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  003b4	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  003b7	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003bc	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  003bf	83 c1 01	 add	 ecx, 1
  003c2	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003c7	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  003ca	0f b7 54 24 34	 movzx	 edx, WORD PTR val$78692[rsp]
  003cf	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003d4	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  003db	b8 10 00 00 00	 mov	 eax, 16
  003e0	48 2b c1	 sub	 rax, rcx
  003e3	0f b6 c8	 movzx	 ecx, al
  003e6	8b c2		 mov	 eax, edx
  003e8	d3 f8		 sar	 eax, cl
  003ea	8b c8		 mov	 ecx, eax
  003ec	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003f1	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  003f8	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len$78688[rsp]
  003fd	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00402	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  00409	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  0040e	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00413	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  00419	eb 49		 jmp	 SHORT $LN3@tr_align
$LN4@tr_align:
  0041b	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00420	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00426	ba 02 00 00 00	 mov	 edx, 2
  0042b	0f b6 c8	 movzx	 ecx, al
  0042e	d3 e2		 shl	 edx, cl
  00430	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00435	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  0043c	0b ca		 or	 ecx, edx
  0043e	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00443	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0044a	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0044f	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00455	03 4c 24 30	 add	 ecx, DWORD PTR len$78688[rsp]
  00459	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0045e	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN3@tr_align:

; 912  :         send_code(s, END_BLOCK, static_ltree);

  00464	0f b7 05 02 04
	00 00		 movzx	 eax, WORD PTR static_ltree+1026
  0046b	89 44 24 38	 mov	 DWORD PTR len$78702[rsp], eax
  0046f	b9 10 00 00 00	 mov	 ecx, 16
  00474	2b 4c 24 38	 sub	 ecx, DWORD PTR len$78702[rsp]
  00478	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0047d	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  00483	0f 8e fa 00 00
	00		 jle	 $LN2@tr_align
  00489	0f b7 05 00 04
	00 00		 movzx	 eax, WORD PTR static_ltree+1024
  00490	89 44 24 3c	 mov	 DWORD PTR val$78706[rsp], eax
  00494	0f b7 54 24 3c	 movzx	 edx, WORD PTR val$78706[rsp]
  00499	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0049e	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  004a4	0f b6 c8	 movzx	 ecx, al
  004a7	d3 e2		 shl	 edx, cl
  004a9	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  004ae	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  004b5	0b ca		 or	 ecx, edx
  004b7	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  004bc	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  004c3	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  004c8	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  004cf	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  004d5	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  004da	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  004dd	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  004e2	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  004e6	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  004e9	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  004ee	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  004f1	83 c1 01	 add	 ecx, 1
  004f4	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  004f9	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  004fc	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00501	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00508	c1 fa 08	 sar	 edx, 8
  0050b	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00510	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00513	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00518	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0051c	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0051f	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00524	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00527	83 c1 01	 add	 ecx, 1
  0052a	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0052f	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00532	0f b7 54 24 3c	 movzx	 edx, WORD PTR val$78706[rsp]
  00537	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0053c	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  00543	b8 10 00 00 00	 mov	 eax, 16
  00548	48 2b c1	 sub	 rax, rcx
  0054b	0f b6 c8	 movzx	 ecx, al
  0054e	8b c2		 mov	 eax, edx
  00550	d3 f8		 sar	 eax, cl
  00552	8b c8		 mov	 ecx, eax
  00554	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00559	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00560	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR len$78702[rsp]
  00565	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0056a	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  00571	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00576	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0057b	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  00581	eb 4b		 jmp	 SHORT $LN1@tr_align
$LN2@tr_align:
  00583	0f b7 15 00 04
	00 00		 movzx	 edx, WORD PTR static_ltree+1024
  0058a	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0058f	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00595	0f b6 c8	 movzx	 ecx, al
  00598	d3 e2		 shl	 edx, cl
  0059a	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0059f	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  005a6	0b ca		 or	 ecx, edx
  005a8	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  005ad	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  005b4	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  005b9	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  005bf	03 4c 24 38	 add	 ecx, DWORD PTR len$78702[rsp]
  005c3	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  005c8	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN1@tr_align:

; 913  : #ifdef DEBUG
; 914  :         s->compressed_len += 10L;
; 915  : #endif
; 916  :         bi_flush(s);

  005ce	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  005d3	e8 00 00 00 00	 call	 bi_flush
$LN5@tr_align:

; 917  :     }
; 918  :     s->last_eob_len = 7;

  005d8	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  005dd	c7 80 0c 17 00
	00 07 00 00 00	 mov	 DWORD PTR [rax+5900], 7

; 919  : }

  005e7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  005eb	c3		 ret	 0
_tr_align ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$send_tree DD imagerel send_tree
	DD	imagerel send_tree+3377
	DD	imagerel $unwind$send_tree
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$send_tree DD 011301H
	DD	0c213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT send_tree
_TEXT	SEGMENT
count$ = 0
n$ = 4
curlen$ = 8
nextlen$ = 12
prevlen$ = 16
min_count$ = 20
max_count$ = 24
len$78434 = 28
val$78438 = 32
len$78451 = 36
val$78455 = 40
len$78465 = 44
val$78469 = 48
len$78479 = 52
val$78483 = 56
len$78495 = 60
val$78499 = 64
len$78509 = 68
val$78513 = 72
len$78524 = 76
val$78528 = 80
len$78538 = 84
val$78542 = 88
s$ = 112
tree$ = 120
max_code$ = 128
send_tree PROC						; COMDAT

; 760  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 761  :     int n;                     /* iterates over all tree elements */
; 762  :     int prevlen = -1;          /* last emitted length */

  00013	c7 44 24 10 ff
	ff ff ff	 mov	 DWORD PTR prevlen$[rsp], -1

; 763  :     int curlen;                /* length of current code */
; 764  :     int nextlen = tree[0].Len; /* length of next code */

  0001b	48 8b 44 24 78	 mov	 rax, QWORD PTR tree$[rsp]
  00020	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  00024	89 44 24 0c	 mov	 DWORD PTR nextlen$[rsp], eax

; 765  :     int count = 0;             /* repeat count of the current code */

  00028	c7 04 24 00 00
	00 00		 mov	 DWORD PTR count$[rsp], 0

; 766  :     int max_count = 7;         /* max repeat count */

  0002f	c7 44 24 18 07
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 7

; 767  :     int min_count = 4;         /* min repeat count */

  00037	c7 44 24 14 04
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 4

; 768  : 
; 769  :     /* tree[max_code+1].Len = -1; */  /* guard already set */
; 770  :     if (nextlen == 0) max_count = 138, min_count = 3;

  0003f	83 7c 24 0c 00	 cmp	 DWORD PTR nextlen$[rsp], 0
  00044	75 10		 jne	 SHORT $LN36@send_tree
  00046	c7 44 24 18 8a
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 138 ; 0000008aH
  0004e	c7 44 24 14 03
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 3
$LN36@send_tree:

; 771  : 
; 772  :     for (n = 0; n <= max_code; n++) {

  00056	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  0005e	eb 0b		 jmp	 SHORT $LN35@send_tree
$LN34@send_tree:
  00060	8b 44 24 04	 mov	 eax, DWORD PTR n$[rsp]
  00064	83 c0 01	 add	 eax, 1
  00067	89 44 24 04	 mov	 DWORD PTR n$[rsp], eax
$LN35@send_tree:
  0006b	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR max_code$[rsp]
  00072	39 44 24 04	 cmp	 DWORD PTR n$[rsp], eax
  00076	0f 8f b0 0c 00
	00		 jg	 $LN33@send_tree

; 773  :         curlen = nextlen; nextlen = tree[n+1].Len;

  0007c	8b 44 24 0c	 mov	 eax, DWORD PTR nextlen$[rsp]
  00080	89 44 24 08	 mov	 DWORD PTR curlen$[rsp], eax
  00084	8b 44 24 04	 mov	 eax, DWORD PTR n$[rsp]
  00088	83 c0 01	 add	 eax, 1
  0008b	48 63 c8	 movsxd	 rcx, eax
  0008e	48 8b 44 24 78	 mov	 rax, QWORD PTR tree$[rsp]
  00093	0f b7 44 88 02	 movzx	 eax, WORD PTR [rax+rcx*4+2]
  00098	89 44 24 0c	 mov	 DWORD PTR nextlen$[rsp], eax

; 774  :         if (++count < max_count && curlen == nextlen) {

  0009c	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  0009f	83 c0 01	 add	 eax, 1
  000a2	89 04 24	 mov	 DWORD PTR count$[rsp], eax
  000a5	8b 44 24 18	 mov	 eax, DWORD PTR max_count$[rsp]
  000a9	39 04 24	 cmp	 DWORD PTR count$[rsp], eax
  000ac	7d 11		 jge	 SHORT $LN32@send_tree
  000ae	8b 44 24 0c	 mov	 eax, DWORD PTR nextlen$[rsp]
  000b2	39 44 24 08	 cmp	 DWORD PTR curlen$[rsp], eax
  000b6	75 07		 jne	 SHORT $LN32@send_tree
  000b8	eb a6		 jmp	 SHORT $LN34@send_tree

; 775  :             continue;

  000ba	e9 14 0c 00 00	 jmp	 $LN31@send_tree
$LN32@send_tree:

; 776  :         } else if (count < min_count) {

  000bf	8b 44 24 14	 mov	 eax, DWORD PTR min_count$[rsp]
  000c3	39 04 24	 cmp	 DWORD PTR count$[rsp], eax
  000c6	0f 8d a3 01 00
	00		 jge	 $LN30@send_tree
$LN29@send_tree:

; 777  :             do { send_code(s, curlen, s->bl_tree); } while (--count != 0);

  000cc	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR curlen$[rsp]
  000d1	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  000d6	0f b7 84 88 a6
	0a 00 00	 movzx	 eax, WORD PTR [rax+rcx*4+2726]
  000de	89 44 24 1c	 mov	 DWORD PTR len$78434[rsp], eax
  000e2	b9 10 00 00 00	 mov	 ecx, 16
  000e7	2b 4c 24 1c	 sub	 ecx, DWORD PTR len$78434[rsp]
  000eb	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  000f0	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  000f6	0f 8e 05 01 00
	00		 jle	 $LN26@send_tree
  000fc	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR curlen$[rsp]
  00101	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00106	0f b7 84 88 a4
	0a 00 00	 movzx	 eax, WORD PTR [rax+rcx*4+2724]
  0010e	89 44 24 20	 mov	 DWORD PTR val$78438[rsp], eax
  00112	0f b7 54 24 20	 movzx	 edx, WORD PTR val$78438[rsp]
  00117	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0011c	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00122	0f b6 c8	 movzx	 ecx, al
  00125	d3 e2		 shl	 edx, cl
  00127	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0012c	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00133	0b ca		 or	 ecx, edx
  00135	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0013a	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00141	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00146	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  0014d	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00153	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00158	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0015b	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00160	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00164	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00167	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0016c	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0016f	83 c1 01	 add	 ecx, 1
  00172	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00177	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  0017a	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0017f	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00186	c1 fa 08	 sar	 edx, 8
  00189	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0018e	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00191	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00196	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0019a	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0019d	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  001a2	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  001a5	83 c1 01	 add	 ecx, 1
  001a8	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  001ad	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  001b0	0f b7 54 24 20	 movzx	 edx, WORD PTR val$78438[rsp]
  001b5	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  001ba	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  001c1	b8 10 00 00 00	 mov	 eax, 16
  001c6	48 2b c1	 sub	 rax, rcx
  001c9	0f b6 c8	 movzx	 ecx, al
  001cc	8b c2		 mov	 eax, edx
  001ce	d3 f8		 sar	 eax, cl
  001d0	8b c8		 mov	 ecx, eax
  001d2	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  001d7	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  001de	48 63 4c 24 1c	 movsxd	 rcx, DWORD PTR len$78434[rsp]
  001e3	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  001e8	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  001ef	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  001f4	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  001f9	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  001ff	eb 56		 jmp	 SHORT $LN25@send_tree
$LN26@send_tree:
  00201	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR curlen$[rsp]
  00206	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0020b	0f b7 94 88 a4
	0a 00 00	 movzx	 edx, WORD PTR [rax+rcx*4+2724]
  00213	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00218	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0021e	0f b6 c8	 movzx	 ecx, al
  00221	d3 e2		 shl	 edx, cl
  00223	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00228	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  0022f	0b ca		 or	 ecx, edx
  00231	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00236	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0023d	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00242	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00248	03 4c 24 1c	 add	 ecx, DWORD PTR len$78434[rsp]
  0024c	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00251	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN25@send_tree:
  00257	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  0025a	83 e8 01	 sub	 eax, 1
  0025d	89 04 24	 mov	 DWORD PTR count$[rsp], eax
  00260	83 3c 24 00	 cmp	 DWORD PTR count$[rsp], 0
  00264	0f 85 62 fe ff
	ff		 jne	 $LN29@send_tree

; 778  : 
; 779  :         } else if (curlen != 0) {

  0026a	e9 64 0a 00 00	 jmp	 $LN24@send_tree
$LN30@send_tree:
  0026f	83 7c 24 08 00	 cmp	 DWORD PTR curlen$[rsp], 0
  00274	0f 84 88 04 00
	00		 je	 $LN23@send_tree

; 780  :             if (curlen != prevlen) {

  0027a	8b 44 24 10	 mov	 eax, DWORD PTR prevlen$[rsp]
  0027e	39 44 24 08	 cmp	 DWORD PTR curlen$[rsp], eax
  00282	0f 84 94 01 00
	00		 je	 $LN22@send_tree

; 781  :                 send_code(s, curlen, s->bl_tree); count--;

  00288	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR curlen$[rsp]
  0028d	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00292	0f b7 84 88 a6
	0a 00 00	 movzx	 eax, WORD PTR [rax+rcx*4+2726]
  0029a	89 44 24 24	 mov	 DWORD PTR len$78451[rsp], eax
  0029e	b9 10 00 00 00	 mov	 ecx, 16
  002a3	2b 4c 24 24	 sub	 ecx, DWORD PTR len$78451[rsp]
  002a7	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  002ac	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  002b2	0f 8e 05 01 00
	00		 jle	 $LN21@send_tree
  002b8	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR curlen$[rsp]
  002bd	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  002c2	0f b7 84 88 a4
	0a 00 00	 movzx	 eax, WORD PTR [rax+rcx*4+2724]
  002ca	89 44 24 28	 mov	 DWORD PTR val$78455[rsp], eax
  002ce	0f b7 54 24 28	 movzx	 edx, WORD PTR val$78455[rsp]
  002d3	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  002d8	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  002de	0f b6 c8	 movzx	 ecx, al
  002e1	d3 e2		 shl	 edx, cl
  002e3	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  002e8	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  002ef	0b ca		 or	 ecx, edx
  002f1	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  002f6	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  002fd	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00302	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00309	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0030f	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00314	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00317	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0031c	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00320	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00323	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00328	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0032b	83 c1 01	 add	 ecx, 1
  0032e	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00333	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00336	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0033b	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00342	c1 fa 08	 sar	 edx, 8
  00345	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0034a	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0034d	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00352	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00356	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00359	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0035e	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00361	83 c1 01	 add	 ecx, 1
  00364	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00369	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  0036c	0f b7 54 24 28	 movzx	 edx, WORD PTR val$78455[rsp]
  00371	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00376	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  0037d	b8 10 00 00 00	 mov	 eax, 16
  00382	48 2b c1	 sub	 rax, rcx
  00385	0f b6 c8	 movzx	 ecx, al
  00388	8b c2		 mov	 eax, edx
  0038a	d3 f8		 sar	 eax, cl
  0038c	8b c8		 mov	 ecx, eax
  0038e	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00393	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0039a	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR len$78451[rsp]
  0039f	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  003a4	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  003ab	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  003b0	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  003b5	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  003bb	eb 56		 jmp	 SHORT $LN20@send_tree
$LN21@send_tree:
  003bd	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR curlen$[rsp]
  003c2	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  003c7	0f b7 94 88 a4
	0a 00 00	 movzx	 edx, WORD PTR [rax+rcx*4+2724]
  003cf	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  003d4	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  003da	0f b6 c8	 movzx	 ecx, al
  003dd	d3 e2		 shl	 edx, cl
  003df	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  003e4	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  003eb	0b ca		 or	 ecx, edx
  003ed	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  003f2	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  003f9	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  003fe	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00404	03 4c 24 24	 add	 ecx, DWORD PTR len$78451[rsp]
  00408	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0040d	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN20@send_tree:
  00413	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  00416	83 e8 01	 sub	 eax, 1
  00419	89 04 24	 mov	 DWORD PTR count$[rsp], eax
$LN22@send_tree:

; 782  :             }
; 783  :             Assert(count >= 3 && count <= 6, " 3_6?");
; 784  :             send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);

  0041c	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00421	0f b7 80 e6 0a
	00 00		 movzx	 eax, WORD PTR [rax+2790]
  00428	89 44 24 2c	 mov	 DWORD PTR len$78465[rsp], eax
  0042c	b9 10 00 00 00	 mov	 ecx, 16
  00431	2b 4c 24 2c	 sub	 ecx, DWORD PTR len$78465[rsp]
  00435	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0043a	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  00440	0f 8e ff 00 00
	00		 jle	 $LN19@send_tree
  00446	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0044b	0f b7 80 e4 0a
	00 00		 movzx	 eax, WORD PTR [rax+2788]
  00452	89 44 24 30	 mov	 DWORD PTR val$78469[rsp], eax
  00456	0f b7 54 24 30	 movzx	 edx, WORD PTR val$78469[rsp]
  0045b	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00460	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00466	0f b6 c8	 movzx	 ecx, al
  00469	d3 e2		 shl	 edx, cl
  0046b	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00470	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00477	0b ca		 or	 ecx, edx
  00479	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0047e	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00485	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0048a	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00491	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00497	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0049c	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0049f	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  004a4	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  004a8	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  004ab	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  004b0	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  004b3	83 c1 01	 add	 ecx, 1
  004b6	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  004bb	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  004be	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  004c3	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  004ca	c1 fa 08	 sar	 edx, 8
  004cd	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  004d2	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  004d5	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  004da	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  004de	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  004e1	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  004e6	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  004e9	83 c1 01	 add	 ecx, 1
  004ec	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  004f1	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  004f4	0f b7 54 24 30	 movzx	 edx, WORD PTR val$78469[rsp]
  004f9	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  004fe	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  00505	b8 10 00 00 00	 mov	 eax, 16
  0050a	48 2b c1	 sub	 rax, rcx
  0050d	0f b6 c8	 movzx	 ecx, al
  00510	8b c2		 mov	 eax, edx
  00512	d3 f8		 sar	 eax, cl
  00514	8b c8		 mov	 ecx, eax
  00516	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0051b	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00522	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR len$78465[rsp]
  00527	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0052c	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  00533	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00538	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0053d	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  00543	eb 50		 jmp	 SHORT $LN18@send_tree
$LN19@send_tree:
  00545	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0054a	0f b7 90 e4 0a
	00 00		 movzx	 edx, WORD PTR [rax+2788]
  00551	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00556	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0055c	0f b6 c8	 movzx	 ecx, al
  0055f	d3 e2		 shl	 edx, cl
  00561	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00566	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  0056d	0b ca		 or	 ecx, edx
  0056f	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00574	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0057b	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00580	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00586	03 4c 24 2c	 add	 ecx, DWORD PTR len$78465[rsp]
  0058a	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0058f	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN18@send_tree:
  00595	c7 44 24 34 02
	00 00 00	 mov	 DWORD PTR len$78479[rsp], 2
  0059d	b9 10 00 00 00	 mov	 ecx, 16
  005a2	2b 4c 24 34	 sub	 ecx, DWORD PTR len$78479[rsp]
  005a6	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  005ab	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  005b1	0f 8e f9 00 00
	00		 jle	 $LN17@send_tree
  005b7	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  005ba	83 e8 03	 sub	 eax, 3
  005bd	89 44 24 38	 mov	 DWORD PTR val$78483[rsp], eax
  005c1	0f b7 54 24 38	 movzx	 edx, WORD PTR val$78483[rsp]
  005c6	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  005cb	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  005d1	0f b6 c8	 movzx	 ecx, al
  005d4	d3 e2		 shl	 edx, cl
  005d6	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  005db	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  005e2	0b ca		 or	 ecx, edx
  005e4	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  005e9	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  005f0	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  005f5	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  005fc	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00602	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00607	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0060a	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0060f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00613	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00616	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0061b	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0061e	83 c1 01	 add	 ecx, 1
  00621	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00626	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00629	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0062e	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00635	c1 fa 08	 sar	 edx, 8
  00638	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0063d	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00640	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00645	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00649	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0064c	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00651	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00654	83 c1 01	 add	 ecx, 1
  00657	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0065c	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  0065f	0f b7 54 24 38	 movzx	 edx, WORD PTR val$78483[rsp]
  00664	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00669	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  00670	b8 10 00 00 00	 mov	 eax, 16
  00675	48 2b c1	 sub	 rax, rcx
  00678	0f b6 c8	 movzx	 ecx, al
  0067b	8b c2		 mov	 eax, edx
  0067d	d3 f8		 sar	 eax, cl
  0067f	8b c8		 mov	 ecx, eax
  00681	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00686	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0068d	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR len$78479[rsp]
  00692	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00697	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  0069e	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  006a3	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  006a8	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  006ae	eb 4d		 jmp	 SHORT $LN16@send_tree
$LN17@send_tree:
  006b0	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  006b3	83 e8 03	 sub	 eax, 3
  006b6	0f b7 d0	 movzx	 edx, ax
  006b9	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  006be	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  006c4	0f b6 c8	 movzx	 ecx, al
  006c7	d3 e2		 shl	 edx, cl
  006c9	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  006ce	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  006d5	0b ca		 or	 ecx, edx
  006d7	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  006dc	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  006e3	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  006e8	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  006ee	03 4c 24 34	 add	 ecx, DWORD PTR len$78479[rsp]
  006f2	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  006f7	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN16@send_tree:
  006fd	e9 d1 05 00 00	 jmp	 $LN15@send_tree
$LN23@send_tree:

; 785  : 
; 786  :         } else if (count <= 10) {

  00702	83 3c 24 0a	 cmp	 DWORD PTR count$[rsp], 10
  00706	0f 8f e6 02 00
	00		 jg	 $LN14@send_tree

; 787  :             send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);

  0070c	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00711	0f b7 80 ea 0a
	00 00		 movzx	 eax, WORD PTR [rax+2794]
  00718	89 44 24 3c	 mov	 DWORD PTR len$78495[rsp], eax
  0071c	b9 10 00 00 00	 mov	 ecx, 16
  00721	2b 4c 24 3c	 sub	 ecx, DWORD PTR len$78495[rsp]
  00725	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0072a	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  00730	0f 8e ff 00 00
	00		 jle	 $LN13@send_tree
  00736	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0073b	0f b7 80 e8 0a
	00 00		 movzx	 eax, WORD PTR [rax+2792]
  00742	89 44 24 40	 mov	 DWORD PTR val$78499[rsp], eax
  00746	0f b7 54 24 40	 movzx	 edx, WORD PTR val$78499[rsp]
  0074b	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00750	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00756	0f b6 c8	 movzx	 ecx, al
  00759	d3 e2		 shl	 edx, cl
  0075b	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00760	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00767	0b ca		 or	 ecx, edx
  00769	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0076e	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00775	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0077a	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00781	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00787	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0078c	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0078f	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00794	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00798	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0079b	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  007a0	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  007a3	83 c1 01	 add	 ecx, 1
  007a6	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  007ab	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  007ae	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  007b3	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  007ba	c1 fa 08	 sar	 edx, 8
  007bd	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  007c2	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  007c5	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  007ca	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  007ce	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  007d1	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  007d6	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  007d9	83 c1 01	 add	 ecx, 1
  007dc	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  007e1	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  007e4	0f b7 54 24 40	 movzx	 edx, WORD PTR val$78499[rsp]
  007e9	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  007ee	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  007f5	b8 10 00 00 00	 mov	 eax, 16
  007fa	48 2b c1	 sub	 rax, rcx
  007fd	0f b6 c8	 movzx	 ecx, al
  00800	8b c2		 mov	 eax, edx
  00802	d3 f8		 sar	 eax, cl
  00804	8b c8		 mov	 ecx, eax
  00806	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0080b	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00812	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR len$78495[rsp]
  00817	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0081c	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  00823	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00828	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0082d	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  00833	eb 50		 jmp	 SHORT $LN12@send_tree
$LN13@send_tree:
  00835	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0083a	0f b7 90 e8 0a
	00 00		 movzx	 edx, WORD PTR [rax+2792]
  00841	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00846	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0084c	0f b6 c8	 movzx	 ecx, al
  0084f	d3 e2		 shl	 edx, cl
  00851	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00856	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  0085d	0b ca		 or	 ecx, edx
  0085f	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00864	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0086b	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00870	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00876	03 4c 24 3c	 add	 ecx, DWORD PTR len$78495[rsp]
  0087a	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0087f	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN12@send_tree:
  00885	c7 44 24 44 03
	00 00 00	 mov	 DWORD PTR len$78509[rsp], 3
  0088d	b9 10 00 00 00	 mov	 ecx, 16
  00892	2b 4c 24 44	 sub	 ecx, DWORD PTR len$78509[rsp]
  00896	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0089b	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  008a1	0f 8e f9 00 00
	00		 jle	 $LN11@send_tree
  008a7	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  008aa	83 e8 03	 sub	 eax, 3
  008ad	89 44 24 48	 mov	 DWORD PTR val$78513[rsp], eax
  008b1	0f b7 54 24 48	 movzx	 edx, WORD PTR val$78513[rsp]
  008b6	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  008bb	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  008c1	0f b6 c8	 movzx	 ecx, al
  008c4	d3 e2		 shl	 edx, cl
  008c6	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  008cb	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  008d2	0b ca		 or	 ecx, edx
  008d4	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  008d9	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  008e0	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  008e5	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  008ec	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  008f2	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  008f7	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  008fa	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  008ff	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00903	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00906	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0090b	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0090e	83 c1 01	 add	 ecx, 1
  00911	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00916	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00919	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0091e	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00925	c1 fa 08	 sar	 edx, 8
  00928	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0092d	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00930	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00935	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00939	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0093c	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00941	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00944	83 c1 01	 add	 ecx, 1
  00947	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0094c	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  0094f	0f b7 54 24 48	 movzx	 edx, WORD PTR val$78513[rsp]
  00954	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00959	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  00960	b8 10 00 00 00	 mov	 eax, 16
  00965	48 2b c1	 sub	 rax, rcx
  00968	0f b6 c8	 movzx	 ecx, al
  0096b	8b c2		 mov	 eax, edx
  0096d	d3 f8		 sar	 eax, cl
  0096f	8b c8		 mov	 ecx, eax
  00971	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00976	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0097d	48 63 4c 24 44	 movsxd	 rcx, DWORD PTR len$78509[rsp]
  00982	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00987	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  0098e	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00993	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00998	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  0099e	eb 4d		 jmp	 SHORT $LN10@send_tree
$LN11@send_tree:
  009a0	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  009a3	83 e8 03	 sub	 eax, 3
  009a6	0f b7 d0	 movzx	 edx, ax
  009a9	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  009ae	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  009b4	0f b6 c8	 movzx	 ecx, al
  009b7	d3 e2		 shl	 edx, cl
  009b9	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  009be	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  009c5	0b ca		 or	 ecx, edx
  009c7	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  009cc	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  009d3	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  009d8	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  009de	03 4c 24 44	 add	 ecx, DWORD PTR len$78509[rsp]
  009e2	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  009e7	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN10@send_tree:

; 788  : 
; 789  :         } else {

  009ed	e9 e1 02 00 00	 jmp	 $LN9@send_tree
$LN14@send_tree:

; 790  :             send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);

  009f2	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  009f7	0f b7 80 ee 0a
	00 00		 movzx	 eax, WORD PTR [rax+2798]
  009fe	89 44 24 4c	 mov	 DWORD PTR len$78524[rsp], eax
  00a02	b9 10 00 00 00	 mov	 ecx, 16
  00a07	2b 4c 24 4c	 sub	 ecx, DWORD PTR len$78524[rsp]
  00a0b	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a10	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  00a16	0f 8e ff 00 00
	00		 jle	 $LN8@send_tree
  00a1c	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a21	0f b7 80 ec 0a
	00 00		 movzx	 eax, WORD PTR [rax+2796]
  00a28	89 44 24 50	 mov	 DWORD PTR val$78528[rsp], eax
  00a2c	0f b7 54 24 50	 movzx	 edx, WORD PTR val$78528[rsp]
  00a31	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a36	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00a3c	0f b6 c8	 movzx	 ecx, al
  00a3f	d3 e2		 shl	 edx, cl
  00a41	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a46	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00a4d	0b ca		 or	 ecx, edx
  00a4f	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a54	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00a5b	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a60	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00a67	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00a6d	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a72	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00a75	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a7a	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00a7e	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00a81	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a86	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00a89	83 c1 01	 add	 ecx, 1
  00a8c	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a91	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00a94	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00a99	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00aa0	c1 fa 08	 sar	 edx, 8
  00aa3	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00aa8	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00aab	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00ab0	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00ab4	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00ab7	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00abc	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00abf	83 c1 01	 add	 ecx, 1
  00ac2	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00ac7	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00aca	0f b7 54 24 50	 movzx	 edx, WORD PTR val$78528[rsp]
  00acf	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00ad4	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  00adb	b8 10 00 00 00	 mov	 eax, 16
  00ae0	48 2b c1	 sub	 rax, rcx
  00ae3	0f b6 c8	 movzx	 ecx, al
  00ae6	8b c2		 mov	 eax, edx
  00ae8	d3 f8		 sar	 eax, cl
  00aea	8b c8		 mov	 ecx, eax
  00aec	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00af1	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00af8	48 63 4c 24 4c	 movsxd	 rcx, DWORD PTR len$78524[rsp]
  00afd	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00b02	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  00b09	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00b0e	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00b13	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  00b19	eb 50		 jmp	 SHORT $LN7@send_tree
$LN8@send_tree:
  00b1b	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00b20	0f b7 90 ec 0a
	00 00		 movzx	 edx, WORD PTR [rax+2796]
  00b27	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00b2c	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00b32	0f b6 c8	 movzx	 ecx, al
  00b35	d3 e2		 shl	 edx, cl
  00b37	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00b3c	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00b43	0b ca		 or	 ecx, edx
  00b45	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00b4a	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00b51	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00b56	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00b5c	03 4c 24 4c	 add	 ecx, DWORD PTR len$78524[rsp]
  00b60	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00b65	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN7@send_tree:
  00b6b	c7 44 24 54 07
	00 00 00	 mov	 DWORD PTR len$78538[rsp], 7
  00b73	b9 10 00 00 00	 mov	 ecx, 16
  00b78	2b 4c 24 54	 sub	 ecx, DWORD PTR len$78538[rsp]
  00b7c	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00b81	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  00b87	0f 8e f9 00 00
	00		 jle	 $LN6@send_tree
  00b8d	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  00b90	83 e8 0b	 sub	 eax, 11
  00b93	89 44 24 58	 mov	 DWORD PTR val$78542[rsp], eax
  00b97	0f b7 54 24 58	 movzx	 edx, WORD PTR val$78542[rsp]
  00b9c	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00ba1	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00ba7	0f b6 c8	 movzx	 ecx, al
  00baa	d3 e2		 shl	 edx, cl
  00bac	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00bb1	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00bb8	0b ca		 or	 ecx, edx
  00bba	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00bbf	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00bc6	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00bcb	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00bd2	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00bd8	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00bdd	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00be0	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00be5	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00be9	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00bec	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00bf1	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00bf4	83 c1 01	 add	 ecx, 1
  00bf7	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00bfc	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00bff	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00c04	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00c0b	c1 fa 08	 sar	 edx, 8
  00c0e	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00c13	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00c16	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00c1b	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00c1f	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00c22	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00c27	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00c2a	83 c1 01	 add	 ecx, 1
  00c2d	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00c32	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00c35	0f b7 54 24 58	 movzx	 edx, WORD PTR val$78542[rsp]
  00c3a	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00c3f	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  00c46	b8 10 00 00 00	 mov	 eax, 16
  00c4b	48 2b c1	 sub	 rax, rcx
  00c4e	0f b6 c8	 movzx	 ecx, al
  00c51	8b c2		 mov	 eax, edx
  00c53	d3 f8		 sar	 eax, cl
  00c55	8b c8		 mov	 ecx, eax
  00c57	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00c5c	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00c63	48 63 4c 24 54	 movsxd	 rcx, DWORD PTR len$78538[rsp]
  00c68	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00c6d	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  00c74	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00c79	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00c7e	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  00c84	eb 4d		 jmp	 SHORT $LN5@send_tree
$LN6@send_tree:
  00c86	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  00c89	83 e8 0b	 sub	 eax, 11
  00c8c	0f b7 d0	 movzx	 edx, ax
  00c8f	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00c94	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00c9a	0f b6 c8	 movzx	 ecx, al
  00c9d	d3 e2		 shl	 edx, cl
  00c9f	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00ca4	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00cab	0b ca		 or	 ecx, edx
  00cad	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00cb2	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00cb9	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00cbe	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00cc4	03 4c 24 54	 add	 ecx, DWORD PTR len$78538[rsp]
  00cc8	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00ccd	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN5@send_tree:
$LN9@send_tree:
$LN15@send_tree:
$LN24@send_tree:
$LN31@send_tree:

; 791  :         }
; 792  :         count = 0; prevlen = curlen;

  00cd3	c7 04 24 00 00
	00 00		 mov	 DWORD PTR count$[rsp], 0
  00cda	8b 44 24 08	 mov	 eax, DWORD PTR curlen$[rsp]
  00cde	89 44 24 10	 mov	 DWORD PTR prevlen$[rsp], eax

; 793  :         if (nextlen == 0) {

  00ce2	83 7c 24 0c 00	 cmp	 DWORD PTR nextlen$[rsp], 0
  00ce7	75 12		 jne	 SHORT $LN4@send_tree

; 794  :             max_count = 138, min_count = 3;

  00ce9	c7 44 24 18 8a
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 138 ; 0000008aH
  00cf1	c7 44 24 14 03
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 3
  00cf9	eb 2c		 jmp	 SHORT $LN3@send_tree
$LN4@send_tree:

; 795  :         } else if (curlen == nextlen) {

  00cfb	8b 44 24 0c	 mov	 eax, DWORD PTR nextlen$[rsp]
  00cff	39 44 24 08	 cmp	 DWORD PTR curlen$[rsp], eax
  00d03	75 12		 jne	 SHORT $LN2@send_tree

; 796  :             max_count = 6, min_count = 3;

  00d05	c7 44 24 18 06
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 6
  00d0d	c7 44 24 14 03
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 3

; 797  :         } else {

  00d15	eb 10		 jmp	 SHORT $LN1@send_tree
$LN2@send_tree:

; 798  :             max_count = 7, min_count = 4;

  00d17	c7 44 24 18 07
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 7
  00d1f	c7 44 24 14 04
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 4
$LN1@send_tree:
$LN3@send_tree:

; 799  :         }
; 800  :     }

  00d27	e9 34 f3 ff ff	 jmp	 $LN34@send_tree
$LN33@send_tree:

; 801  : }

  00d2c	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00d30	c3		 ret	 0
send_tree ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$scan_tree DD imagerel scan_tree
	DD	imagerel scan_tree+511
	DD	imagerel $unwind$scan_tree
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$scan_tree DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT scan_tree
_TEXT	SEGMENT
count$ = 0
n$ = 4
curlen$ = 8
nextlen$ = 12
prevlen$ = 16
min_count$ = 20
max_count$ = 24
s$ = 48
tree$ = 56
max_code$ = 64
scan_tree PROC						; COMDAT

; 715  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 716  :     int n;                     /* iterates over all tree elements */
; 717  :     int prevlen = -1;          /* last emitted length */

  00013	c7 44 24 10 ff
	ff ff ff	 mov	 DWORD PTR prevlen$[rsp], -1

; 718  :     int curlen;                /* length of current code */
; 719  :     int nextlen = tree[0].Len; /* length of next code */

  0001b	48 8b 44 24 38	 mov	 rax, QWORD PTR tree$[rsp]
  00020	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  00024	89 44 24 0c	 mov	 DWORD PTR nextlen$[rsp], eax

; 720  :     int count = 0;             /* repeat count of the current code */

  00028	c7 04 24 00 00
	00 00		 mov	 DWORD PTR count$[rsp], 0

; 721  :     int max_count = 7;         /* max repeat count */

  0002f	c7 44 24 18 07
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 7

; 722  :     int min_count = 4;         /* min repeat count */

  00037	c7 44 24 14 04
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 4

; 723  : 
; 724  :     if (nextlen == 0) max_count = 138, min_count = 3;

  0003f	83 7c 24 0c 00	 cmp	 DWORD PTR nextlen$[rsp], 0
  00044	75 10		 jne	 SHORT $LN17@scan_tree
  00046	c7 44 24 18 8a
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 138 ; 0000008aH
  0004e	c7 44 24 14 03
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 3
$LN17@scan_tree:

; 725  :     tree[max_code+1].Len = (ush)0xffff; /* guard */

  00056	8b 44 24 40	 mov	 eax, DWORD PTR max_code$[rsp]
  0005a	83 c0 01	 add	 eax, 1
  0005d	48 63 d0	 movsxd	 rdx, eax
  00060	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00065	48 8b 44 24 38	 mov	 rax, QWORD PTR tree$[rsp]
  0006a	66 89 4c 90 02	 mov	 WORD PTR [rax+rdx*4+2], cx

; 726  : 
; 727  :     for (n = 0; n <= max_code; n++) {

  0006f	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  00077	eb 0b		 jmp	 SHORT $LN16@scan_tree
$LN15@scan_tree:
  00079	8b 44 24 04	 mov	 eax, DWORD PTR n$[rsp]
  0007d	83 c0 01	 add	 eax, 1
  00080	89 44 24 04	 mov	 DWORD PTR n$[rsp], eax
$LN16@scan_tree:
  00084	8b 44 24 40	 mov	 eax, DWORD PTR max_code$[rsp]
  00088	39 44 24 04	 cmp	 DWORD PTR n$[rsp], eax
  0008c	0f 8f 68 01 00
	00		 jg	 $LN14@scan_tree

; 728  :         curlen = nextlen; nextlen = tree[n+1].Len;

  00092	8b 44 24 0c	 mov	 eax, DWORD PTR nextlen$[rsp]
  00096	89 44 24 08	 mov	 DWORD PTR curlen$[rsp], eax
  0009a	8b 44 24 04	 mov	 eax, DWORD PTR n$[rsp]
  0009e	83 c0 01	 add	 eax, 1
  000a1	48 63 c8	 movsxd	 rcx, eax
  000a4	48 8b 44 24 38	 mov	 rax, QWORD PTR tree$[rsp]
  000a9	0f b7 44 88 02	 movzx	 eax, WORD PTR [rax+rcx*4+2]
  000ae	89 44 24 0c	 mov	 DWORD PTR nextlen$[rsp], eax

; 729  :         if (++count < max_count && curlen == nextlen) {

  000b2	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  000b5	83 c0 01	 add	 eax, 1
  000b8	89 04 24	 mov	 DWORD PTR count$[rsp], eax
  000bb	8b 44 24 18	 mov	 eax, DWORD PTR max_count$[rsp]
  000bf	39 04 24	 cmp	 DWORD PTR count$[rsp], eax
  000c2	7d 11		 jge	 SHORT $LN13@scan_tree
  000c4	8b 44 24 0c	 mov	 eax, DWORD PTR nextlen$[rsp]
  000c8	39 44 24 08	 cmp	 DWORD PTR curlen$[rsp], eax
  000cc	75 07		 jne	 SHORT $LN13@scan_tree
  000ce	eb a9		 jmp	 SHORT $LN15@scan_tree

; 730  :             continue;

  000d0	e9 cc 00 00 00	 jmp	 $LN12@scan_tree
$LN13@scan_tree:

; 731  :         } else if (count < min_count) {

  000d5	8b 44 24 14	 mov	 eax, DWORD PTR min_count$[rsp]
  000d9	39 04 24	 cmp	 DWORD PTR count$[rsp], eax
  000dc	7d 2c		 jge	 SHORT $LN11@scan_tree

; 732  :             s->bl_tree[curlen].Freq += count;

  000de	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR curlen$[rsp]
  000e3	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000e8	0f b7 94 88 a4
	0a 00 00	 movzx	 edx, WORD PTR [rax+rcx*4+2724]
  000f0	03 14 24	 add	 edx, DWORD PTR count$[rsp]
  000f3	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR curlen$[rsp]
  000f8	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000fd	66 89 94 88 a4
	0a 00 00	 mov	 WORD PTR [rax+rcx*4+2724], dx
  00105	e9 97 00 00 00	 jmp	 $LN10@scan_tree
$LN11@scan_tree:

; 733  :         } else if (curlen != 0) {

  0010a	83 7c 24 08 00	 cmp	 DWORD PTR curlen$[rsp], 0
  0010f	74 50		 je	 SHORT $LN9@scan_tree

; 734  :             if (curlen != prevlen) s->bl_tree[curlen].Freq++;

  00111	8b 44 24 10	 mov	 eax, DWORD PTR prevlen$[rsp]
  00115	39 44 24 08	 cmp	 DWORD PTR curlen$[rsp], eax
  00119	74 28		 je	 SHORT $LN8@scan_tree
  0011b	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR curlen$[rsp]
  00120	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00125	0f b7 94 88 a4
	0a 00 00	 movzx	 edx, WORD PTR [rax+rcx*4+2724]
  0012d	66 83 c2 01	 add	 dx, 1
  00131	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR curlen$[rsp]
  00136	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0013b	66 89 94 88 a4
	0a 00 00	 mov	 WORD PTR [rax+rcx*4+2724], dx
$LN8@scan_tree:

; 735  :             s->bl_tree[REP_3_6].Freq++;

  00143	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00148	0f b7 88 e4 0a
	00 00		 movzx	 ecx, WORD PTR [rax+2788]
  0014f	66 83 c1 01	 add	 cx, 1
  00153	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00158	66 89 88 e4 0a
	00 00		 mov	 WORD PTR [rax+2788], cx
  0015f	eb 40		 jmp	 SHORT $LN7@scan_tree
$LN9@scan_tree:

; 736  :         } else if (count <= 10) {

  00161	83 3c 24 0a	 cmp	 DWORD PTR count$[rsp], 10
  00165	7f 1e		 jg	 SHORT $LN6@scan_tree

; 737  :             s->bl_tree[REPZ_3_10].Freq++;

  00167	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0016c	0f b7 88 e8 0a
	00 00		 movzx	 ecx, WORD PTR [rax+2792]
  00173	66 83 c1 01	 add	 cx, 1
  00177	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0017c	66 89 88 e8 0a
	00 00		 mov	 WORD PTR [rax+2792], cx

; 738  :         } else {

  00183	eb 1c		 jmp	 SHORT $LN5@scan_tree
$LN6@scan_tree:

; 739  :             s->bl_tree[REPZ_11_138].Freq++;

  00185	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0018a	0f b7 88 ec 0a
	00 00		 movzx	 ecx, WORD PTR [rax+2796]
  00191	66 83 c1 01	 add	 cx, 1
  00195	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0019a	66 89 88 ec 0a
	00 00		 mov	 WORD PTR [rax+2796], cx
$LN5@scan_tree:
$LN7@scan_tree:
$LN10@scan_tree:
$LN12@scan_tree:

; 740  :         }
; 741  :         count = 0; prevlen = curlen;

  001a1	c7 04 24 00 00
	00 00		 mov	 DWORD PTR count$[rsp], 0
  001a8	8b 44 24 08	 mov	 eax, DWORD PTR curlen$[rsp]
  001ac	89 44 24 10	 mov	 DWORD PTR prevlen$[rsp], eax

; 742  :         if (nextlen == 0) {

  001b0	83 7c 24 0c 00	 cmp	 DWORD PTR nextlen$[rsp], 0
  001b5	75 12		 jne	 SHORT $LN4@scan_tree

; 743  :             max_count = 138, min_count = 3;

  001b7	c7 44 24 18 8a
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 138 ; 0000008aH
  001bf	c7 44 24 14 03
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 3
  001c7	eb 2c		 jmp	 SHORT $LN3@scan_tree
$LN4@scan_tree:

; 744  :         } else if (curlen == nextlen) {

  001c9	8b 44 24 0c	 mov	 eax, DWORD PTR nextlen$[rsp]
  001cd	39 44 24 08	 cmp	 DWORD PTR curlen$[rsp], eax
  001d1	75 12		 jne	 SHORT $LN2@scan_tree

; 745  :             max_count = 6, min_count = 3;

  001d3	c7 44 24 18 06
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 6
  001db	c7 44 24 14 03
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 3

; 746  :         } else {

  001e3	eb 10		 jmp	 SHORT $LN1@scan_tree
$LN2@scan_tree:

; 747  :             max_count = 7, min_count = 4;

  001e5	c7 44 24 18 07
	00 00 00	 mov	 DWORD PTR max_count$[rsp], 7
  001ed	c7 44 24 14 04
	00 00 00	 mov	 DWORD PTR min_count$[rsp], 4
$LN1@scan_tree:
$LN3@scan_tree:

; 748  :         }
; 749  :     }

  001f5	e9 7f fe ff ff	 jmp	 $LN15@scan_tree
$LN14@scan_tree:

; 750  : }

  001fa	48 83 c4 28	 add	 rsp, 40			; 00000028H
  001fe	c3		 ret	 0
scan_tree ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_codes DD imagerel gen_codes
	DD	imagerel gen_codes+245
	DD	imagerel $unwind$gen_codes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_codes DD 021301H
	DD	0300fb213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT gen_codes
_TEXT	SEGMENT
n$ = 32
code$ = 36
bits$ = 40
next_code$ = 48
len$78350 = 80
tv134 = 84
tree$ = 112
max_code$ = 120
bl_count$ = 128
gen_codes PROC						; COMDAT

; 585  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	53		 push	 rbx
  0000f	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 586  :     ush next_code[MAX_BITS+1]; /* next code value for each bit length */
; 587  :     ush code = 0;              /* running code value */

  00013	33 c0		 xor	 eax, eax
  00015	66 89 44 24 24	 mov	 WORD PTR code$[rsp], ax

; 588  :     int bits;                  /* bit index */
; 589  :     int n;                     /* code index */
; 590  : 
; 591  :     /* The distribution counts are first used to generate the code values
; 592  :      * without bit reversal.
; 593  :      */
; 594  :     for (bits = 1; bits <= MAX_BITS; bits++) {

  0001a	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR bits$[rsp], 1
  00022	eb 0b		 jmp	 SHORT $LN7@gen_codes
$LN6@gen_codes:
  00024	8b 44 24 28	 mov	 eax, DWORD PTR bits$[rsp]
  00028	83 c0 01	 add	 eax, 1
  0002b	89 44 24 28	 mov	 DWORD PTR bits$[rsp], eax
$LN7@gen_codes:
  0002f	83 7c 24 28 0f	 cmp	 DWORD PTR bits$[rsp], 15
  00034	7f 37		 jg	 SHORT $LN5@gen_codes

; 595  :         next_code[bits] = code = (code + bl_count[bits-1]) << 1;

  00036	0f b7 54 24 24	 movzx	 edx, WORD PTR code$[rsp]
  0003b	8b 44 24 28	 mov	 eax, DWORD PTR bits$[rsp]
  0003f	83 e8 01	 sub	 eax, 1
  00042	48 63 c8	 movsxd	 rcx, eax
  00045	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR bl_count$[rsp]
  0004d	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  00051	8b c2		 mov	 eax, edx
  00053	03 c1		 add	 eax, ecx
  00055	d1 e0		 shl	 eax, 1
  00057	66 89 44 24 24	 mov	 WORD PTR code$[rsp], ax
  0005c	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR bits$[rsp]
  00061	0f b7 44 24 24	 movzx	 eax, WORD PTR code$[rsp]
  00066	66 89 44 4c 30	 mov	 WORD PTR next_code$[rsp+rcx*2], ax

; 596  :     }

  0006b	eb b7		 jmp	 SHORT $LN6@gen_codes
$LN5@gen_codes:

; 597  :     /* Check that the bit counts in bl_count are consistent. The last code
; 598  :      * must be all ones.
; 599  :      */
; 600  :     Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
; 601  :             "inconsistent bit counts");
; 602  :     Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
; 603  : 
; 604  :     for (n = 0;  n <= max_code; n++) {

  0006d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  00075	eb 0b		 jmp	 SHORT $LN4@gen_codes
$LN3@gen_codes:
  00077	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  0007b	83 c0 01	 add	 eax, 1
  0007e	89 44 24 20	 mov	 DWORD PTR n$[rsp], eax
$LN4@gen_codes:
  00082	8b 44 24 78	 mov	 eax, DWORD PTR max_code$[rsp]
  00086	39 44 24 20	 cmp	 DWORD PTR n$[rsp], eax
  0008a	7f 63		 jg	 SHORT $LN2@gen_codes

; 605  :         int len = tree[n].Len;

  0008c	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR n$[rsp]
  00091	48 8b 44 24 70	 mov	 rax, QWORD PTR tree$[rsp]
  00096	0f b7 44 88 02	 movzx	 eax, WORD PTR [rax+rcx*4+2]
  0009b	89 44 24 50	 mov	 DWORD PTR len$78350[rsp], eax

; 606  :         if (len == 0) continue;

  0009f	83 7c 24 50 00	 cmp	 DWORD PTR len$78350[rsp], 0
  000a4	75 02		 jne	 SHORT $LN1@gen_codes
  000a6	eb cf		 jmp	 SHORT $LN3@gen_codes
$LN1@gen_codes:

; 607  :         /* Now reverse the bits */
; 608  :         tree[n].Code = bi_reverse(next_code[len]++, len);

  000a8	48 63 44 24 50	 movsxd	 rax, DWORD PTR len$78350[rsp]
  000ad	0f b7 44 44 30	 movzx	 eax, WORD PTR next_code$[rsp+rax*2]
  000b2	89 44 24 54	 mov	 DWORD PTR tv134[rsp], eax
  000b6	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR len$78350[rsp]
  000bb	48 63 44 24 50	 movsxd	 rax, DWORD PTR len$78350[rsp]
  000c0	0f b7 44 44 30	 movzx	 eax, WORD PTR next_code$[rsp+rax*2]
  000c5	66 83 c0 01	 add	 ax, 1
  000c9	66 89 44 4c 30	 mov	 WORD PTR next_code$[rsp+rcx*2], ax
  000ce	48 63 5c 24 20	 movsxd	 rbx, DWORD PTR n$[rsp]
  000d3	8b 54 24 50	 mov	 edx, DWORD PTR len$78350[rsp]
  000d7	8b 4c 24 54	 mov	 ecx, DWORD PTR tv134[rsp]
  000db	e8 00 00 00 00	 call	 bi_reverse
  000e0	44 8b d8	 mov	 r11d, eax
  000e3	48 8b 44 24 70	 mov	 rax, QWORD PTR tree$[rsp]
  000e8	66 44 89 1c 98	 mov	 WORD PTR [rax+rbx*4], r11w

; 609  : 
; 610  :         Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
; 611  :              n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
; 612  :     }

  000ed	eb 88		 jmp	 SHORT $LN3@gen_codes
$LN2@gen_codes:

; 613  : }

  000ef	48 83 c4 60	 add	 rsp, 96			; 00000060H
  000f3	5b		 pop	 rbx
  000f4	c3		 ret	 0
gen_codes ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_bitlen DD imagerel gen_bitlen
	DD	imagerel gen_bitlen+1010
	DD	imagerel $unwind$gen_bitlen
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_bitlen DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT gen_bitlen
_TEXT	SEGMENT
h$ = 0
n$ = 4
extra$ = 8
overflow$ = 16
base$ = 20
f$ = 24
max_length$ = 28
bits$ = 32
xbits$ = 36
tree$ = 40
max_code$ = 48
m$ = 52
stree$ = 56
s$ = 80
desc$ = 88
gen_bitlen PROC						; COMDAT

; 497  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 498  :     ct_data *tree        = desc->dyn_tree;

  0000e	48 8b 44 24 58	 mov	 rax, QWORD PTR desc$[rsp]
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	48 89 44 24 28	 mov	 QWORD PTR tree$[rsp], rax

; 499  :     int max_code         = desc->max_code;

  0001b	48 8b 44 24 58	 mov	 rax, QWORD PTR desc$[rsp]
  00020	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00023	89 44 24 30	 mov	 DWORD PTR max_code$[rsp], eax

; 500  :     const ct_data *stree = desc->stat_desc->static_tree;

  00027	48 8b 44 24 58	 mov	 rax, QWORD PTR desc$[rsp]
  0002c	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00030	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00033	48 89 44 24 38	 mov	 QWORD PTR stree$[rsp], rax

; 501  :     const intf *extra    = desc->stat_desc->extra_bits;

  00038	48 8b 44 24 58	 mov	 rax, QWORD PTR desc$[rsp]
  0003d	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00041	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00045	48 89 44 24 08	 mov	 QWORD PTR extra$[rsp], rax

; 502  :     int base             = desc->stat_desc->extra_base;

  0004a	48 8b 44 24 58	 mov	 rax, QWORD PTR desc$[rsp]
  0004f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00053	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00056	89 44 24 14	 mov	 DWORD PTR base$[rsp], eax

; 503  :     int max_length       = desc->stat_desc->max_length;

  0005a	48 8b 44 24 58	 mov	 rax, QWORD PTR desc$[rsp]
  0005f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00063	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00066	89 44 24 1c	 mov	 DWORD PTR max_length$[rsp], eax

; 504  :     int h;              /* heap index */
; 505  :     int n, m;           /* iterate over the tree elements */
; 506  :     int bits;           /* bit length */
; 507  :     int xbits;          /* extra bits */
; 508  :     ush f;              /* frequency */
; 509  :     int overflow = 0;   /* number of elements with bit length too large */

  0006a	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR overflow$[rsp], 0

; 510  : 
; 511  :     for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;

  00072	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR bits$[rsp], 0
  0007a	eb 0b		 jmp	 SHORT $LN23@gen_bitlen
$LN22@gen_bitlen:
  0007c	8b 44 24 20	 mov	 eax, DWORD PTR bits$[rsp]
  00080	83 c0 01	 add	 eax, 1
  00083	89 44 24 20	 mov	 DWORD PTR bits$[rsp], eax
$LN23@gen_bitlen:
  00087	83 7c 24 20 0f	 cmp	 DWORD PTR bits$[rsp], 15
  0008c	7f 16		 jg	 SHORT $LN21@gen_bitlen
  0008e	48 63 54 24 20	 movsxd	 rdx, DWORD PTR bits$[rsp]
  00093	33 c9		 xor	 ecx, ecx
  00095	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0009a	66 89 8c 50 88
	0b 00 00	 mov	 WORD PTR [rax+rdx*2+2952], cx
  000a2	eb d8		 jmp	 SHORT $LN22@gen_bitlen
$LN21@gen_bitlen:

; 512  : 
; 513  :     /* In a first pass, compute the optimal bit lengths (which may
; 514  :      * overflow in the case of the bit length tree).
; 515  :      */
; 516  :     tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

  000a4	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000a9	48 63 88 a0 14
	00 00		 movsxd	 rcx, DWORD PTR [rax+5280]
  000b0	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000b5	48 63 94 88 a8
	0b 00 00	 movsxd	 rdx, DWORD PTR [rax+rcx*4+2984]
  000bd	33 c9		 xor	 ecx, ecx
  000bf	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  000c4	66 89 4c 90 02	 mov	 WORD PTR [rax+rdx*4+2], cx

; 517  : 
; 518  :     for (h = s->heap_max+1; h < HEAP_SIZE; h++) {

  000c9	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000ce	8b 80 a0 14 00
	00		 mov	 eax, DWORD PTR [rax+5280]
  000d4	83 c0 01	 add	 eax, 1
  000d7	89 04 24	 mov	 DWORD PTR h$[rsp], eax
  000da	eb 09		 jmp	 SHORT $LN20@gen_bitlen
$LN19@gen_bitlen:
  000dc	8b 04 24	 mov	 eax, DWORD PTR h$[rsp]
  000df	83 c0 01	 add	 eax, 1
  000e2	89 04 24	 mov	 DWORD PTR h$[rsp], eax
$LN20@gen_bitlen:
  000e5	81 3c 24 3d 02
	00 00		 cmp	 DWORD PTR h$[rsp], 573	; 0000023dH
  000ec	0f 8d 44 01 00
	00		 jge	 $LN18@gen_bitlen

; 519  :         n = s->heap[h];

  000f2	48 63 0c 24	 movsxd	 rcx, DWORD PTR h$[rsp]
  000f6	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000fb	8b 84 88 a8 0b
	00 00		 mov	 eax, DWORD PTR [rax+rcx*4+2984]
  00102	89 44 24 04	 mov	 DWORD PTR n$[rsp], eax

; 520  :         bits = tree[tree[n].Dad].Len + 1;

  00106	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR n$[rsp]
  0010b	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  00110	0f b7 4c 88 02	 movzx	 ecx, WORD PTR [rax+rcx*4+2]
  00115	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  0011a	0f b7 44 88 02	 movzx	 eax, WORD PTR [rax+rcx*4+2]
  0011f	83 c0 01	 add	 eax, 1
  00122	89 44 24 20	 mov	 DWORD PTR bits$[rsp], eax

; 521  :         if (bits > max_length) bits = max_length, overflow++;

  00126	8b 44 24 1c	 mov	 eax, DWORD PTR max_length$[rsp]
  0012a	39 44 24 20	 cmp	 DWORD PTR bits$[rsp], eax
  0012e	7e 13		 jle	 SHORT $LN17@gen_bitlen
  00130	8b 44 24 1c	 mov	 eax, DWORD PTR max_length$[rsp]
  00134	89 44 24 20	 mov	 DWORD PTR bits$[rsp], eax
  00138	8b 44 24 10	 mov	 eax, DWORD PTR overflow$[rsp]
  0013c	83 c0 01	 add	 eax, 1
  0013f	89 44 24 10	 mov	 DWORD PTR overflow$[rsp], eax
$LN17@gen_bitlen:

; 522  :         tree[n].Len = (ush)bits;

  00143	48 63 54 24 04	 movsxd	 rdx, DWORD PTR n$[rsp]
  00148	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  0014d	0f b7 44 24 20	 movzx	 eax, WORD PTR bits$[rsp]
  00152	66 89 44 91 02	 mov	 WORD PTR [rcx+rdx*4+2], ax

; 523  :         /* We overwrite tree[n].Dad which is no longer needed */
; 524  : 
; 525  :         if (n > max_code) continue; /* not a leaf node */

  00157	8b 44 24 30	 mov	 eax, DWORD PTR max_code$[rsp]
  0015b	39 44 24 04	 cmp	 DWORD PTR n$[rsp], eax
  0015f	7e 05		 jle	 SHORT $LN16@gen_bitlen
  00161	e9 76 ff ff ff	 jmp	 $LN19@gen_bitlen
$LN16@gen_bitlen:

; 526  : 
; 527  :         s->bl_count[bits]++;

  00166	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR bits$[rsp]
  0016b	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00170	0f b7 94 48 88
	0b 00 00	 movzx	 edx, WORD PTR [rax+rcx*2+2952]
  00178	66 83 c2 01	 add	 dx, 1
  0017c	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR bits$[rsp]
  00181	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00186	66 89 94 48 88
	0b 00 00	 mov	 WORD PTR [rax+rcx*2+2952], dx

; 528  :         xbits = 0;

  0018e	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR xbits$[rsp], 0

; 529  :         if (n >= base) xbits = extra[n-base];

  00196	8b 44 24 14	 mov	 eax, DWORD PTR base$[rsp]
  0019a	39 44 24 04	 cmp	 DWORD PTR n$[rsp], eax
  0019e	7c 19		 jl	 SHORT $LN15@gen_bitlen
  001a0	8b 4c 24 14	 mov	 ecx, DWORD PTR base$[rsp]
  001a4	8b 44 24 04	 mov	 eax, DWORD PTR n$[rsp]
  001a8	2b c1		 sub	 eax, ecx
  001aa	48 63 c8	 movsxd	 rcx, eax
  001ad	48 8b 44 24 08	 mov	 rax, QWORD PTR extra$[rsp]
  001b2	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  001b5	89 44 24 24	 mov	 DWORD PTR xbits$[rsp], eax
$LN15@gen_bitlen:

; 530  :         f = tree[n].Freq;

  001b9	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR n$[rsp]
  001be	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  001c3	0f b7 04 88	 movzx	 eax, WORD PTR [rax+rcx*4]
  001c7	66 89 44 24 18	 mov	 WORD PTR f$[rsp], ax

; 531  :         s->opt_len += (ulg)f * (bits + xbits);

  001cc	0f b7 54 24 18	 movzx	 edx, WORD PTR f$[rsp]
  001d1	8b 4c 24 24	 mov	 ecx, DWORD PTR xbits$[rsp]
  001d5	8b 44 24 20	 mov	 eax, DWORD PTR bits$[rsp]
  001d9	03 c1		 add	 eax, ecx
  001db	8b ca		 mov	 ecx, edx
  001dd	0f af c8	 imul	 ecx, eax
  001e0	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001e5	03 88 00 17 00
	00		 add	 ecx, DWORD PTR [rax+5888]
  001eb	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001f0	89 88 00 17 00
	00		 mov	 DWORD PTR [rax+5888], ecx

; 532  :         if (stree) s->static_len += (ulg)f * (stree[n].Len + xbits);

  001f6	48 83 7c 24 38
	00		 cmp	 QWORD PTR stree$[rsp], 0
  001fc	74 33		 je	 SHORT $LN14@gen_bitlen
  001fe	0f b7 54 24 18	 movzx	 edx, WORD PTR f$[rsp]
  00203	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR n$[rsp]
  00208	48 8b 44 24 38	 mov	 rax, QWORD PTR stree$[rsp]
  0020d	0f b7 44 88 02	 movzx	 eax, WORD PTR [rax+rcx*4+2]
  00212	03 44 24 24	 add	 eax, DWORD PTR xbits$[rsp]
  00216	8b ca		 mov	 ecx, edx
  00218	0f af c8	 imul	 ecx, eax
  0021b	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00220	03 88 04 17 00
	00		 add	 ecx, DWORD PTR [rax+5892]
  00226	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0022b	89 88 04 17 00
	00		 mov	 DWORD PTR [rax+5892], ecx
$LN14@gen_bitlen:

; 533  :     }

  00231	e9 a6 fe ff ff	 jmp	 $LN19@gen_bitlen
$LN18@gen_bitlen:

; 534  :     if (overflow == 0) return;

  00236	83 7c 24 10 00	 cmp	 DWORD PTR overflow$[rsp], 0
  0023b	75 05		 jne	 SHORT $LN13@gen_bitlen
  0023d	e9 ab 01 00 00	 jmp	 $LN24@gen_bitlen
$LN13@gen_bitlen:
$LN12@gen_bitlen:

; 535  : 
; 536  :     Trace((stderr,"\nbit length overflow\n"));
; 537  :     /* This happens for example on obj2 and pic of the Calgary corpus */
; 538  : 
; 539  :     /* Find the first bit length which could increase: */
; 540  :     do {
; 541  :         bits = max_length-1;

  00242	8b 44 24 1c	 mov	 eax, DWORD PTR max_length$[rsp]
  00246	83 e8 01	 sub	 eax, 1
  00249	89 44 24 20	 mov	 DWORD PTR bits$[rsp], eax
$LN9@gen_bitlen:

; 542  :         while (s->bl_count[bits] == 0) bits--;

  0024d	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR bits$[rsp]
  00252	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00257	0f b7 84 48 88
	0b 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+2952]
  0025f	85 c0		 test	 eax, eax
  00261	75 0d		 jne	 SHORT $LN8@gen_bitlen
  00263	8b 44 24 20	 mov	 eax, DWORD PTR bits$[rsp]
  00267	83 e8 01	 sub	 eax, 1
  0026a	89 44 24 20	 mov	 DWORD PTR bits$[rsp], eax
  0026e	eb dd		 jmp	 SHORT $LN9@gen_bitlen
$LN8@gen_bitlen:

; 543  :         s->bl_count[bits]--;      /* move one leaf down the tree */

  00270	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR bits$[rsp]
  00275	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0027a	0f b7 94 48 88
	0b 00 00	 movzx	 edx, WORD PTR [rax+rcx*2+2952]
  00282	66 83 ea 01	 sub	 dx, 1
  00286	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR bits$[rsp]
  0028b	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00290	66 89 94 48 88
	0b 00 00	 mov	 WORD PTR [rax+rcx*2+2952], dx

; 544  :         s->bl_count[bits+1] += 2; /* move one overflow item as its brother */

  00298	8b 44 24 20	 mov	 eax, DWORD PTR bits$[rsp]
  0029c	83 c0 01	 add	 eax, 1
  0029f	48 63 c8	 movsxd	 rcx, eax
  002a2	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  002a7	0f b7 94 48 88
	0b 00 00	 movzx	 edx, WORD PTR [rax+rcx*2+2952]
  002af	83 c2 02	 add	 edx, 2
  002b2	8b 44 24 20	 mov	 eax, DWORD PTR bits$[rsp]
  002b6	83 c0 01	 add	 eax, 1
  002b9	48 63 c8	 movsxd	 rcx, eax
  002bc	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  002c1	66 89 94 48 88
	0b 00 00	 mov	 WORD PTR [rax+rcx*2+2952], dx

; 545  :         s->bl_count[max_length]--;

  002c9	48 63 4c 24 1c	 movsxd	 rcx, DWORD PTR max_length$[rsp]
  002ce	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  002d3	0f b7 94 48 88
	0b 00 00	 movzx	 edx, WORD PTR [rax+rcx*2+2952]
  002db	66 83 ea 01	 sub	 dx, 1
  002df	48 63 4c 24 1c	 movsxd	 rcx, DWORD PTR max_length$[rsp]
  002e4	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  002e9	66 89 94 48 88
	0b 00 00	 mov	 WORD PTR [rax+rcx*2+2952], dx

; 546  :         /* The brother of the overflow item also moves one step up,
; 547  :          * but this does not affect bl_count[max_length]
; 548  :          */
; 549  :         overflow -= 2;

  002f1	8b 44 24 10	 mov	 eax, DWORD PTR overflow$[rsp]
  002f5	83 e8 02	 sub	 eax, 2
  002f8	89 44 24 10	 mov	 DWORD PTR overflow$[rsp], eax

; 550  :     } while (overflow > 0);

  002fc	83 7c 24 10 00	 cmp	 DWORD PTR overflow$[rsp], 0
  00301	0f 8f 3b ff ff
	ff		 jg	 $LN12@gen_bitlen

; 551  : 
; 552  :     /* Now recompute all bit lengths, scanning in increasing frequency.
; 553  :      * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
; 554  :      * lengths instead of fixing only the wrong ones. This idea is taken
; 555  :      * from 'ar' written by Haruhiko Okumura.)
; 556  :      */
; 557  :     for (bits = max_length; bits != 0; bits--) {

  00307	8b 44 24 1c	 mov	 eax, DWORD PTR max_length$[rsp]
  0030b	89 44 24 20	 mov	 DWORD PTR bits$[rsp], eax
  0030f	eb 0b		 jmp	 SHORT $LN7@gen_bitlen
$LN6@gen_bitlen:
  00311	8b 44 24 20	 mov	 eax, DWORD PTR bits$[rsp]
  00315	83 e8 01	 sub	 eax, 1
  00318	89 44 24 20	 mov	 DWORD PTR bits$[rsp], eax
$LN7@gen_bitlen:
  0031c	83 7c 24 20 00	 cmp	 DWORD PTR bits$[rsp], 0
  00321	0f 84 c6 00 00
	00		 je	 $LN5@gen_bitlen

; 558  :         n = s->bl_count[bits];

  00327	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR bits$[rsp]
  0032c	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00331	0f b7 84 48 88
	0b 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+2952]
  00339	89 44 24 04	 mov	 DWORD PTR n$[rsp], eax
$LN26@gen_bitlen:
$LN4@gen_bitlen:

; 559  :         while (n != 0) {

  0033d	83 7c 24 04 00	 cmp	 DWORD PTR n$[rsp], 0
  00342	0f 84 a0 00 00
	00		 je	 $LN3@gen_bitlen

; 560  :             m = s->heap[--h];

  00348	8b 04 24	 mov	 eax, DWORD PTR h$[rsp]
  0034b	83 e8 01	 sub	 eax, 1
  0034e	89 04 24	 mov	 DWORD PTR h$[rsp], eax
  00351	48 63 0c 24	 movsxd	 rcx, DWORD PTR h$[rsp]
  00355	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0035a	8b 84 88 a8 0b
	00 00		 mov	 eax, DWORD PTR [rax+rcx*4+2984]
  00361	89 44 24 34	 mov	 DWORD PTR m$[rsp], eax

; 561  :             if (m > max_code) continue;

  00365	8b 44 24 30	 mov	 eax, DWORD PTR max_code$[rsp]
  00369	39 44 24 34	 cmp	 DWORD PTR m$[rsp], eax
  0036d	7e 02		 jle	 SHORT $LN2@gen_bitlen
  0036f	eb cc		 jmp	 SHORT $LN4@gen_bitlen
$LN2@gen_bitlen:

; 562  :             if ((unsigned) tree[m].Len != (unsigned) bits) {

  00371	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR m$[rsp]
  00376	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  0037b	0f b7 44 88 02	 movzx	 eax, WORD PTR [rax+rcx*4+2]
  00380	3b 44 24 20	 cmp	 eax, DWORD PTR bits$[rsp]
  00384	74 52		 je	 SHORT $LN1@gen_bitlen

; 563  :                 Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
; 564  :                 s->opt_len += ((long)bits - (long)tree[m].Len)
; 565  :                               *(long)tree[m].Freq;

  00386	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR m$[rsp]
  0038b	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  00390	0f b7 44 88 02	 movzx	 eax, WORD PTR [rax+rcx*4+2]
  00395	8b 54 24 20	 mov	 edx, DWORD PTR bits$[rsp]
  00399	2b d0		 sub	 edx, eax
  0039b	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR m$[rsp]
  003a0	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  003a5	0f b7 04 88	 movzx	 eax, WORD PTR [rax+rcx*4]
  003a9	8b ca		 mov	 ecx, edx
  003ab	0f af c8	 imul	 ecx, eax
  003ae	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003b3	03 88 00 17 00
	00		 add	 ecx, DWORD PTR [rax+5888]
  003b9	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003be	89 88 00 17 00
	00		 mov	 DWORD PTR [rax+5888], ecx

; 566  :                 tree[m].Len = (ush)bits;

  003c4	48 63 54 24 34	 movsxd	 rdx, DWORD PTR m$[rsp]
  003c9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  003ce	0f b7 44 24 20	 movzx	 eax, WORD PTR bits$[rsp]
  003d3	66 89 44 91 02	 mov	 WORD PTR [rcx+rdx*4+2], ax
$LN1@gen_bitlen:

; 567  :             }
; 568  :             n--;

  003d8	8b 44 24 04	 mov	 eax, DWORD PTR n$[rsp]
  003dc	83 e8 01	 sub	 eax, 1
  003df	89 44 24 04	 mov	 DWORD PTR n$[rsp], eax

; 569  :         }

  003e3	e9 55 ff ff ff	 jmp	 $LN26@gen_bitlen
$LN3@gen_bitlen:

; 570  :     }

  003e8	e9 24 ff ff ff	 jmp	 $LN6@gen_bitlen
$LN5@gen_bitlen:
$LN24@gen_bitlen:

; 571  : }

  003ed	48 83 c4 48	 add	 rsp, 72			; 00000048H
  003f1	c3		 ret	 0
gen_bitlen ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$pqdownheap DD imagerel pqdownheap
	DD	imagerel pqdownheap+528
	DD	imagerel $unwind$pqdownheap
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pqdownheap DD 011301H
	DD	02213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT pqdownheap
_TEXT	SEGMENT
v$ = 0
j$ = 4
s$ = 32
tree$ = 40
k$ = 48
pqdownheap PROC						; COMDAT

; 463  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 18	 sub	 rsp, 24

; 464  :     int v = s->heap[k];

  00013	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR k$[rsp]
  00018	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0001d	8b 84 88 a8 0b
	00 00		 mov	 eax, DWORD PTR [rax+rcx*4+2984]
  00024	89 04 24	 mov	 DWORD PTR v$[rsp], eax

; 465  :     int j = k << 1;  /* left son of k */

  00027	8b 44 24 30	 mov	 eax, DWORD PTR k$[rsp]
  0002b	d1 e0		 shl	 eax, 1
  0002d	89 44 24 04	 mov	 DWORD PTR j$[rsp], eax
$LN6@pqdownheap:

; 466  :     while (j <= s->heap_len) {

  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00036	8b 80 9c 14 00
	00		 mov	 eax, DWORD PTR [rax+5276]
  0003c	39 44 24 04	 cmp	 DWORD PTR j$[rsp], eax
  00040	0f 8f b1 01 00
	00		 jg	 $LN5@pqdownheap

; 467  :         /* Set j to the smallest of the two sons: */
; 468  :         if (j < s->heap_len &&
; 469  :             smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {

  00046	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0004b	8b 80 9c 14 00
	00		 mov	 eax, DWORD PTR [rax+5276]
  00051	39 44 24 04	 cmp	 DWORD PTR j$[rsp], eax
  00055	0f 8d d4 00 00
	00		 jge	 $LN4@pqdownheap
  0005b	8b 44 24 04	 mov	 eax, DWORD PTR j$[rsp]
  0005f	83 c0 01	 add	 eax, 1
  00062	48 63 c8	 movsxd	 rcx, eax
  00065	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0006a	48 63 8c 88 a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [rax+rcx*4+2984]
  00072	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  00077	0f b7 14 88	 movzx	 edx, WORD PTR [rax+rcx*4]
  0007b	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR j$[rsp]
  00080	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00085	48 63 8c 88 a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [rax+rcx*4+2984]
  0008d	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  00092	0f b7 04 88	 movzx	 eax, WORD PTR [rax+rcx*4]
  00096	3b d0		 cmp	 edx, eax
  00098	0f 8c 86 00 00
	00		 jl	 $LN3@pqdownheap
  0009e	8b 44 24 04	 mov	 eax, DWORD PTR j$[rsp]
  000a2	83 c0 01	 add	 eax, 1
  000a5	48 63 c8	 movsxd	 rcx, eax
  000a8	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000ad	48 63 8c 88 a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [rax+rcx*4+2984]
  000b5	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  000ba	0f b7 14 88	 movzx	 edx, WORD PTR [rax+rcx*4]
  000be	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR j$[rsp]
  000c3	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000c8	48 63 8c 88 a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [rax+rcx*4+2984]
  000d0	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  000d5	0f b7 04 88	 movzx	 eax, WORD PTR [rax+rcx*4]
  000d9	3b d0		 cmp	 edx, eax
  000db	75 52		 jne	 SHORT $LN4@pqdownheap
  000dd	8b 44 24 04	 mov	 eax, DWORD PTR j$[rsp]
  000e1	83 c0 01	 add	 eax, 1
  000e4	48 63 c8	 movsxd	 rcx, eax
  000e7	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000ec	48 63 8c 88 a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [rax+rcx*4+2984]
  000f4	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000f9	0f b6 94 08 a4
	14 00 00	 movzx	 edx, BYTE PTR [rax+rcx+5284]
  00101	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR j$[rsp]
  00106	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0010b	48 63 8c 88 a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [rax+rcx*4+2984]
  00113	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00118	0f b6 84 08 a4
	14 00 00	 movzx	 eax, BYTE PTR [rax+rcx+5284]
  00120	3b d0		 cmp	 edx, eax
  00122	7f 0b		 jg	 SHORT $LN4@pqdownheap
$LN3@pqdownheap:

; 470  :             j++;

  00124	8b 44 24 04	 mov	 eax, DWORD PTR j$[rsp]
  00128	83 c0 01	 add	 eax, 1
  0012b	89 44 24 04	 mov	 DWORD PTR j$[rsp], eax
$LN4@pqdownheap:

; 471  :         }
; 472  :         /* Exit if v is smaller than both sons */
; 473  :         if (smaller(tree, v, s->heap[j], s->depth)) break;

  0012f	48 63 0c 24	 movsxd	 rcx, DWORD PTR v$[rsp]
  00133	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  00138	0f b7 14 88	 movzx	 edx, WORD PTR [rax+rcx*4]
  0013c	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR j$[rsp]
  00141	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00146	48 63 8c 88 a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [rax+rcx*4+2984]
  0014e	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  00153	0f b7 04 88	 movzx	 eax, WORD PTR [rax+rcx*4]
  00157	3b d0		 cmp	 edx, eax
  00159	7c 60		 jl	 SHORT $LN1@pqdownheap
  0015b	48 63 0c 24	 movsxd	 rcx, DWORD PTR v$[rsp]
  0015f	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  00164	0f b7 14 88	 movzx	 edx, WORD PTR [rax+rcx*4]
  00168	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR j$[rsp]
  0016d	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00172	48 63 8c 88 a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [rax+rcx*4+2984]
  0017a	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  0017f	0f b7 04 88	 movzx	 eax, WORD PTR [rax+rcx*4]
  00183	3b d0		 cmp	 edx, eax
  00185	75 36		 jne	 SHORT $LN2@pqdownheap
  00187	48 63 0c 24	 movsxd	 rcx, DWORD PTR v$[rsp]
  0018b	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00190	0f b6 94 08 a4
	14 00 00	 movzx	 edx, BYTE PTR [rax+rcx+5284]
  00198	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR j$[rsp]
  0019d	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  001a2	48 63 8c 88 a8
	0b 00 00	 movsxd	 rcx, DWORD PTR [rax+rcx*4+2984]
  001aa	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  001af	0f b6 84 08 a4
	14 00 00	 movzx	 eax, BYTE PTR [rax+rcx+5284]
  001b7	3b d0		 cmp	 edx, eax
  001b9	7f 02		 jg	 SHORT $LN2@pqdownheap
$LN1@pqdownheap:
  001bb	eb 3a		 jmp	 SHORT $LN5@pqdownheap
$LN2@pqdownheap:

; 474  : 
; 475  :         /* Exchange v with the smallest son */
; 476  :         s->heap[k] = s->heap[j];  k = j;

  001bd	4c 63 44 24 04	 movsxd	 r8, DWORD PTR j$[rsp]
  001c2	48 63 54 24 30	 movsxd	 rdx, DWORD PTR k$[rsp]
  001c7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  001cc	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  001d1	42 8b 84 80 a8
	0b 00 00	 mov	 eax, DWORD PTR [rax+r8*4+2984]
  001d9	89 84 91 a8 0b
	00 00		 mov	 DWORD PTR [rcx+rdx*4+2984], eax
  001e0	8b 44 24 04	 mov	 eax, DWORD PTR j$[rsp]
  001e4	89 44 24 30	 mov	 DWORD PTR k$[rsp], eax

; 477  : 
; 478  :         /* And continue down the tree, setting j to the left son of k */
; 479  :         j <<= 1;

  001e8	8b 44 24 04	 mov	 eax, DWORD PTR j$[rsp]
  001ec	d1 e0		 shl	 eax, 1
  001ee	89 44 24 04	 mov	 DWORD PTR j$[rsp], eax

; 480  :     }

  001f2	e9 3a fe ff ff	 jmp	 $LN6@pqdownheap
$LN5@pqdownheap:

; 481  :     s->heap[k] = v;

  001f7	48 63 54 24 30	 movsxd	 rdx, DWORD PTR k$[rsp]
  001fc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00201	8b 04 24	 mov	 eax, DWORD PTR v$[rsp]
  00204	89 84 91 a8 0b
	00 00		 mov	 DWORD PTR [rcx+rdx*4+2984], eax

; 482  : }

  0020b	48 83 c4 18	 add	 rsp, 24
  0020f	c3		 ret	 0
pqdownheap ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$init_block DD imagerel init_block
	DD	imagerel init_block+229
	DD	imagerel $unwind$init_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$init_block DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT init_block
_TEXT	SEGMENT
n$ = 0
s$ = 32
init_block PROC						; COMDAT

; 417  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 418  :     int n; /* iterates over tree elements */
; 419  : 
; 420  :     /* Initialize the trees. */
; 421  :     for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;

  00009	c7 04 24 00 00
	00 00		 mov	 DWORD PTR n$[rsp], 0
  00010	eb 09		 jmp	 SHORT $LN9@init_block
$LN8@init_block:
  00012	8b 04 24	 mov	 eax, DWORD PTR n$[rsp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 04 24	 mov	 DWORD PTR n$[rsp], eax
$LN9@init_block:
  0001b	81 3c 24 1e 01
	00 00		 cmp	 DWORD PTR n$[rsp], 286	; 0000011eH
  00022	7d 15		 jge	 SHORT $LN7@init_block
  00024	48 63 14 24	 movsxd	 rdx, DWORD PTR n$[rsp]
  00028	33 c9		 xor	 ecx, ecx
  0002a	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0002f	66 89 8c 90 bc
	00 00 00	 mov	 WORD PTR [rax+rdx*4+188], cx
  00037	eb d9		 jmp	 SHORT $LN8@init_block
$LN7@init_block:

; 422  :     for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;

  00039	c7 04 24 00 00
	00 00		 mov	 DWORD PTR n$[rsp], 0
  00040	eb 09		 jmp	 SHORT $LN6@init_block
$LN5@init_block:
  00042	8b 04 24	 mov	 eax, DWORD PTR n$[rsp]
  00045	83 c0 01	 add	 eax, 1
  00048	89 04 24	 mov	 DWORD PTR n$[rsp], eax
$LN6@init_block:
  0004b	83 3c 24 1e	 cmp	 DWORD PTR n$[rsp], 30
  0004f	7d 15		 jge	 SHORT $LN4@init_block
  00051	48 63 14 24	 movsxd	 rdx, DWORD PTR n$[rsp]
  00055	33 c9		 xor	 ecx, ecx
  00057	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0005c	66 89 8c 90 b0
	09 00 00	 mov	 WORD PTR [rax+rdx*4+2480], cx
  00064	eb dc		 jmp	 SHORT $LN5@init_block
$LN4@init_block:

; 423  :     for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;

  00066	c7 04 24 00 00
	00 00		 mov	 DWORD PTR n$[rsp], 0
  0006d	eb 09		 jmp	 SHORT $LN3@init_block
$LN2@init_block:
  0006f	8b 04 24	 mov	 eax, DWORD PTR n$[rsp]
  00072	83 c0 01	 add	 eax, 1
  00075	89 04 24	 mov	 DWORD PTR n$[rsp], eax
$LN3@init_block:
  00078	83 3c 24 13	 cmp	 DWORD PTR n$[rsp], 19
  0007c	7d 15		 jge	 SHORT $LN1@init_block
  0007e	48 63 14 24	 movsxd	 rdx, DWORD PTR n$[rsp]
  00082	33 c9		 xor	 ecx, ecx
  00084	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00089	66 89 8c 90 a4
	0a 00 00	 mov	 WORD PTR [rax+rdx*4+2724], cx
  00091	eb dc		 jmp	 SHORT $LN2@init_block
$LN1@init_block:

; 424  : 
; 425  :     s->dyn_ltree[END_BLOCK].Freq = 1;

  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0009d	66 89 88 bc 04
	00 00		 mov	 WORD PTR [rax+1212], cx

; 426  :     s->opt_len = s->static_len = 0L;

  000a4	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000a9	c7 80 04 17 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+5892], 0
  000b3	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000b8	c7 80 00 17 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+5888], 0

; 427  :     s->last_lit = s->matches = 0;

  000c2	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000c7	c7 80 08 17 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+5896], 0
  000d1	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000d6	c7 80 f4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+5876], 0

; 428  : }

  000e0	48 83 c4 18	 add	 rsp, 24
  000e4	c3		 ret	 0
init_block ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT tr_static_init
_TEXT	SEGMENT
tr_static_init PROC					; COMDAT

; 241  : #if defined(GEN_TREES_H) || !defined(STDC)
; 242  :     static int static_init_done = 0;
; 243  :     int n;        /* iterates over tree elements */
; 244  :     int bits;     /* bit counter */
; 245  :     int length;   /* length value */
; 246  :     int code;     /* code value */
; 247  :     int dist;     /* distance index */
; 248  :     ush bl_count[MAX_BITS+1];
; 249  :     /* number of codes at each bit length for an optimal tree */
; 250  : 
; 251  :     if (static_init_done) return;
; 252  : 
; 253  :     /* For some embedded targets, global variables are not initialized: */
; 254  : #ifdef NO_INIT_GLOBAL_POINTERS
; 255  :     static_l_desc.static_tree = static_ltree;
; 256  :     static_l_desc.extra_bits = extra_lbits;
; 257  :     static_d_desc.static_tree = static_dtree;
; 258  :     static_d_desc.extra_bits = extra_dbits;
; 259  :     static_bl_desc.extra_bits = extra_blbits;
; 260  : #endif
; 261  : 
; 262  :     /* Initialize the mapping length (0..255) -> length code (0..28) */
; 263  :     length = 0;
; 264  :     for (code = 0; code < LENGTH_CODES-1; code++) {
; 265  :         base_length[code] = length;
; 266  :         for (n = 0; n < (1<<extra_lbits[code]); n++) {
; 267  :             _length_code[length++] = (uch)code;
; 268  :         }
; 269  :     }
; 270  :     Assert (length == 256, "tr_static_init: length != 256");
; 271  :     /* Note that the length 255 (match length 258) can be represented
; 272  :      * in two different ways: code 284 + 5 bits or code 285, so we
; 273  :      * overwrite length_code[255] to use the best encoding:
; 274  :      */
; 275  :     _length_code[length-1] = (uch)code;
; 276  : 
; 277  :     /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
; 278  :     dist = 0;
; 279  :     for (code = 0 ; code < 16; code++) {
; 280  :         base_dist[code] = dist;
; 281  :         for (n = 0; n < (1<<extra_dbits[code]); n++) {
; 282  :             _dist_code[dist++] = (uch)code;
; 283  :         }
; 284  :     }
; 285  :     Assert (dist == 256, "tr_static_init: dist != 256");
; 286  :     dist >>= 7; /* from now on, all distances are divided by 128 */
; 287  :     for ( ; code < D_CODES; code++) {
; 288  :         base_dist[code] = dist << 7;
; 289  :         for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
; 290  :             _dist_code[256 + dist++] = (uch)code;
; 291  :         }
; 292  :     }
; 293  :     Assert (dist == 256, "tr_static_init: 256+dist != 512");
; 294  : 
; 295  :     /* Construct the codes of the static literal tree */
; 296  :     for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
; 297  :     n = 0;
; 298  :     while (n <= 143) static_ltree[n++].Len = 8, bl_count[8]++;
; 299  :     while (n <= 255) static_ltree[n++].Len = 9, bl_count[9]++;
; 300  :     while (n <= 279) static_ltree[n++].Len = 7, bl_count[7]++;
; 301  :     while (n <= 287) static_ltree[n++].Len = 8, bl_count[8]++;
; 302  :     /* Codes 286 and 287 do not exist, but we must include them in the
; 303  :      * tree construction to get a canonical Huffman tree (longest code
; 304  :      * all ones)
; 305  :      */
; 306  :     gen_codes((ct_data *)static_ltree, L_CODES+1, bl_count);
; 307  : 
; 308  :     /* The static distance tree is trivial: */
; 309  :     for (n = 0; n < D_CODES; n++) {
; 310  :         static_dtree[n].Len = 5;
; 311  :         static_dtree[n].Code = bi_reverse((unsigned)n, 5);
; 312  :     }
; 313  :     static_init_done = 1;
; 314  : 
; 315  : #  ifdef GEN_TREES_H
; 316  :     gen_trees_header();
; 317  : #  endif
; 318  : #endif /* defined(GEN_TREES_H) || !defined(STDC) */
; 319  : }

  00000	c3		 ret	 0
tr_static_init ENDP
;	COMDAT pdata
pdata	SEGMENT
$pdata$copy_block DD imagerel copy_block
	DD	imagerel copy_block+350
	DD	imagerel $unwind$copy_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$copy_block DD 011801H
	DD	04218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT copy_block
_TEXT	SEGMENT
s$ = 48
buf$ = 56
len$ = 64
header$ = 72
copy_block PROC						; COMDAT

; 1227 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1228 :     bi_windup(s);        /* align on byte boundary */

  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  0001d	e8 00 00 00 00	 call	 bi_windup

; 1229 :     s->last_eob_len = 8; /* enough lookahead for inflate */

  00022	4c 8b 5c 24 30	 mov	 r11, QWORD PTR s$[rsp]
  00027	41 c7 83 0c 17
	00 00 08 00 00
	00		 mov	 DWORD PTR [r11+5900], 8

; 1230 : 
; 1231 :     if (header) {

  00032	83 7c 24 48 00	 cmp	 DWORD PTR header$[rsp], 0
  00037	0f 84 ca 00 00
	00		 je	 $LN3@copy_block

; 1232 :         put_short(s, (ush)len);

  0003d	0f b7 54 24 40	 movzx	 edx, WORD PTR len$[rsp]
  00042	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00048	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0004d	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00050	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00055	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00059	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0005c	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00061	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00064	83 c1 01	 add	 ecx, 1
  00067	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0006c	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  0006f	0f b7 54 24 40	 movzx	 edx, WORD PTR len$[rsp]
  00074	c1 fa 08	 sar	 edx, 8
  00077	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0007c	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0007f	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00084	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00088	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0008b	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00090	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00093	83 c1 01	 add	 ecx, 1
  00096	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0009b	89 48 28	 mov	 DWORD PTR [rax+40], ecx

; 1233 :         put_short(s, (ush)~len);

  0009e	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  000a2	f7 d0		 not	 eax
  000a4	0f b7 d0	 movzx	 edx, ax
  000a7	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  000ad	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000b2	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000b5	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000ba	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000be	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  000c1	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000c6	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000c9	83 c1 01	 add	 ecx, 1
  000cc	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000d1	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  000d4	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  000d8	f7 d0		 not	 eax
  000da	0f b7 d0	 movzx	 edx, ax
  000dd	c1 fa 08	 sar	 edx, 8
  000e0	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000e5	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000e8	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000ed	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000f1	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  000f4	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000f9	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000fc	83 c1 01	 add	 ecx, 1
  000ff	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00104	89 48 28	 mov	 DWORD PTR [rax+40], ecx
$LN3@copy_block:
$LN2@copy_block:

; 1234 : #ifdef DEBUG
; 1235 :         s->bits_sent += 2*16;
; 1236 : #endif
; 1237 :     }
; 1238 : #ifdef DEBUG
; 1239 :     s->bits_sent += (ulg)len<<3;
; 1240 : #endif
; 1241 :     while (len--) {

  00107	8b 4c 24 40	 mov	 ecx, DWORD PTR len$[rsp]
  0010b	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  0010f	83 e8 01	 sub	 eax, 1
  00112	89 44 24 40	 mov	 DWORD PTR len$[rsp], eax
  00116	85 c9		 test	 ecx, ecx
  00118	74 3f		 je	 SHORT $LN1@copy_block

; 1242 :         put_byte(s, *buf++);

  0011a	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0011f	8b 50 28	 mov	 edx, DWORD PTR [rax+40]
  00122	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00127	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0012b	48 8b 44 24 38	 mov	 rax, QWORD PTR buf$[rsp]
  00130	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00133	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00136	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0013b	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0013e	83 c1 01	 add	 ecx, 1
  00141	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00146	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00149	48 8b 44 24 38	 mov	 rax, QWORD PTR buf$[rsp]
  0014e	48 83 c0 01	 add	 rax, 1
  00152	48 89 44 24 38	 mov	 QWORD PTR buf$[rsp], rax

; 1243 :     }

  00157	eb ae		 jmp	 SHORT $LN2@copy_block
$LN1@copy_block:

; 1244 : }

  00159	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0015d	c3		 ret	 0
copy_block ENDP
_TEXT	ENDS
PUBLIC	_tr_stored_block
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tr_stored_block DD imagerel $LN5
	DD	imagerel $LN5+409
	DD	imagerel $unwind$_tr_stored_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tr_stored_block DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _tr_stored_block
_TEXT	SEGMENT
len$78641 = 32
val$78645 = 36
s$ = 64
buf$ = 72
stored_len$ = 80
last$ = 88
_tr_stored_block PROC					; COMDAT

; 876  : {

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 877  :     send_bits(s, (STORED_BLOCK<<1)+last, 3);    /* send block type */

  00018	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR len$78641[rsp], 3
  00020	b9 10 00 00 00	 mov	 ecx, 16
  00025	2b 4c 24 20	 sub	 ecx, DWORD PTR len$78641[rsp]
  00029	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  0002e	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  00034	0f 8e f7 00 00
	00		 jle	 $LN2@tr_stored_
  0003a	8b 44 24 58	 mov	 eax, DWORD PTR last$[rsp]
  0003e	89 44 24 24	 mov	 DWORD PTR val$78645[rsp], eax
  00042	0f b7 54 24 24	 movzx	 edx, WORD PTR val$78645[rsp]
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  0004c	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00052	0f b6 c8	 movzx	 ecx, al
  00055	d3 e2		 shl	 edx, cl
  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  0005c	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00063	0b ca		 or	 ecx, edx
  00065	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  0006a	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00071	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00076	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  0007d	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00083	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00088	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0008b	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00090	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00094	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00097	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  0009c	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0009f	83 c1 01	 add	 ecx, 1
  000a2	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  000a7	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  000aa	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  000af	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  000b6	c1 fa 08	 sar	 edx, 8
  000b9	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  000be	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000c1	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  000c6	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000ca	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  000cd	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  000d2	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000d5	83 c1 01	 add	 ecx, 1
  000d8	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  000dd	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  000e0	0f b7 54 24 24	 movzx	 edx, WORD PTR val$78645[rsp]
  000e5	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  000ea	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  000f1	b8 10 00 00 00	 mov	 eax, 16
  000f6	48 2b c1	 sub	 rax, rcx
  000f9	0f b6 c8	 movzx	 ecx, al
  000fc	8b c2		 mov	 eax, edx
  000fe	d3 f8		 sar	 eax, cl
  00100	8b c8		 mov	 ecx, eax
  00102	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00107	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0010e	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR len$78641[rsp]
  00113	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00118	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  0011f	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00124	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00129	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  0012f	eb 49		 jmp	 SHORT $LN1@tr_stored_
$LN2@tr_stored_:
  00131	0f b7 54 24 58	 movzx	 edx, WORD PTR last$[rsp]
  00136	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  0013b	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00141	0f b6 c8	 movzx	 ecx, al
  00144	d3 e2		 shl	 edx, cl
  00146	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  0014b	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00152	0b ca		 or	 ecx, edx
  00154	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00159	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00160	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00165	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  0016b	03 4c 24 20	 add	 ecx, DWORD PTR len$78641[rsp]
  0016f	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00174	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN1@tr_stored_:

; 878  : #ifdef DEBUG
; 879  :     s->compressed_len = (s->compressed_len + 3 + 7) & (ulg)~7L;
; 880  :     s->compressed_len += (stored_len + 4) << 3;
; 881  : #endif
; 882  :     copy_block(s, buf, (unsigned)stored_len, 1); /* with header */

  0017a	41 b9 01 00 00
	00		 mov	 r9d, 1
  00180	44 8b 44 24 50	 mov	 r8d, DWORD PTR stored_len$[rsp]
  00185	48 8b 54 24 48	 mov	 rdx, QWORD PTR buf$[rsp]
  0018a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  0018f	e8 00 00 00 00	 call	 copy_block

; 883  : }

  00194	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00198	c3		 ret	 0
_tr_stored_block ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$send_all_trees DD imagerel send_all_trees
	DD	imagerel send_all_trees+1623
	DD	imagerel $unwind$send_all_trees
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$send_all_trees DD 011701H
	DD	0a217H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT send_all_trees
_TEXT	SEGMENT
rank$ = 32
len$78574 = 36
val$78578 = 40
len$78588 = 44
val$78592 = 48
len$78602 = 52
val$78606 = 56
len$78619 = 60
val$78623 = 64
s$ = 96
lcodes$ = 104
dcodes$ = 112
blcodes$ = 120
send_all_trees PROC					; COMDAT

; 845  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 846  :     int rank;                    /* index in bl_order */
; 847  : 
; 848  :     Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
; 849  :     Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
; 850  :             "too many codes");
; 851  :     Tracev((stderr, "\nbl counts: "));
; 852  :     send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */

  00017	c7 44 24 24 05
	00 00 00	 mov	 DWORD PTR len$78574[rsp], 5
  0001f	b9 10 00 00 00	 mov	 ecx, 16
  00024	2b 4c 24 24	 sub	 ecx, DWORD PTR len$78574[rsp]
  00028	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0002d	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  00033	0f 8e fc 00 00
	00		 jle	 $LN11@send_all_t
  00039	8b 44 24 68	 mov	 eax, DWORD PTR lcodes$[rsp]
  0003d	2d 01 01 00 00	 sub	 eax, 257		; 00000101H
  00042	89 44 24 28	 mov	 DWORD PTR val$78578[rsp], eax
  00046	0f b7 54 24 28	 movzx	 edx, WORD PTR val$78578[rsp]
  0004b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00050	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00056	0f b6 c8	 movzx	 ecx, al
  00059	d3 e2		 shl	 edx, cl
  0005b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00060	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00067	0b ca		 or	 ecx, edx
  00069	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0006e	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00075	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0007a	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00081	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00087	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0008c	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0008f	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00094	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00098	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0009b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000a0	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000a3	83 c1 01	 add	 ecx, 1
  000a6	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000ab	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  000ae	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000b3	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  000ba	c1 fa 08	 sar	 edx, 8
  000bd	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000c2	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000c5	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000ca	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000ce	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  000d1	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000d6	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  000d9	83 c1 01	 add	 ecx, 1
  000dc	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000e1	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  000e4	0f b7 54 24 28	 movzx	 edx, WORD PTR val$78578[rsp]
  000e9	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000ee	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  000f5	b8 10 00 00 00	 mov	 eax, 16
  000fa	48 2b c1	 sub	 rax, rcx
  000fd	0f b6 c8	 movzx	 ecx, al
  00100	8b c2		 mov	 eax, edx
  00102	d3 f8		 sar	 eax, cl
  00104	8b c8		 mov	 ecx, eax
  00106	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0010b	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00112	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR len$78574[rsp]
  00117	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0011c	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  00123	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00128	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0012d	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  00133	eb 50		 jmp	 SHORT $LN10@send_all_t
$LN11@send_all_t:
  00135	8b 44 24 68	 mov	 eax, DWORD PTR lcodes$[rsp]
  00139	2d 01 01 00 00	 sub	 eax, 257		; 00000101H
  0013e	0f b7 d0	 movzx	 edx, ax
  00141	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00146	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0014c	0f b6 c8	 movzx	 ecx, al
  0014f	d3 e2		 shl	 edx, cl
  00151	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00156	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  0015d	0b ca		 or	 ecx, edx
  0015f	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00164	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0016b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00170	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00176	03 4c 24 24	 add	 ecx, DWORD PTR len$78574[rsp]
  0017a	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0017f	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN10@send_all_t:

; 853  :     send_bits(s, dcodes-1,   5);

  00185	c7 44 24 2c 05
	00 00 00	 mov	 DWORD PTR len$78588[rsp], 5
  0018d	b9 10 00 00 00	 mov	 ecx, 16
  00192	2b 4c 24 2c	 sub	 ecx, DWORD PTR len$78588[rsp]
  00196	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0019b	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  001a1	0f 8e fa 00 00
	00		 jle	 $LN9@send_all_t
  001a7	8b 44 24 70	 mov	 eax, DWORD PTR dcodes$[rsp]
  001ab	83 e8 01	 sub	 eax, 1
  001ae	89 44 24 30	 mov	 DWORD PTR val$78592[rsp], eax
  001b2	0f b7 54 24 30	 movzx	 edx, WORD PTR val$78592[rsp]
  001b7	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001bc	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  001c2	0f b6 c8	 movzx	 ecx, al
  001c5	d3 e2		 shl	 edx, cl
  001c7	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001cc	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  001d3	0b ca		 or	 ecx, edx
  001d5	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001da	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  001e1	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001e6	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  001ed	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  001f3	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001f8	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  001fb	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00200	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00204	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00207	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0020c	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0020f	83 c1 01	 add	 ecx, 1
  00212	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00217	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  0021a	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0021f	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00226	c1 fa 08	 sar	 edx, 8
  00229	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0022e	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00231	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00236	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0023a	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0023d	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00242	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00245	83 c1 01	 add	 ecx, 1
  00248	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0024d	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00250	0f b7 54 24 30	 movzx	 edx, WORD PTR val$78592[rsp]
  00255	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0025a	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  00261	b8 10 00 00 00	 mov	 eax, 16
  00266	48 2b c1	 sub	 rax, rcx
  00269	0f b6 c8	 movzx	 ecx, al
  0026c	8b c2		 mov	 eax, edx
  0026e	d3 f8		 sar	 eax, cl
  00270	8b c8		 mov	 ecx, eax
  00272	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00277	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0027e	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR len$78588[rsp]
  00283	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00288	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  0028f	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00294	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00299	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  0029f	eb 4e		 jmp	 SHORT $LN8@send_all_t
$LN9@send_all_t:
  002a1	8b 44 24 70	 mov	 eax, DWORD PTR dcodes$[rsp]
  002a5	83 e8 01	 sub	 eax, 1
  002a8	0f b7 d0	 movzx	 edx, ax
  002ab	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002b0	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  002b6	0f b6 c8	 movzx	 ecx, al
  002b9	d3 e2		 shl	 edx, cl
  002bb	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002c0	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  002c7	0b ca		 or	 ecx, edx
  002c9	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002ce	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  002d5	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002da	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  002e0	03 4c 24 2c	 add	 ecx, DWORD PTR len$78588[rsp]
  002e4	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002e9	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN8@send_all_t:

; 854  :     send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */

  002ef	c7 44 24 34 04
	00 00 00	 mov	 DWORD PTR len$78602[rsp], 4
  002f7	b9 10 00 00 00	 mov	 ecx, 16
  002fc	2b 4c 24 34	 sub	 ecx, DWORD PTR len$78602[rsp]
  00300	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00305	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  0030b	0f 8e fa 00 00
	00		 jle	 $LN7@send_all_t
  00311	8b 44 24 78	 mov	 eax, DWORD PTR blcodes$[rsp]
  00315	83 e8 04	 sub	 eax, 4
  00318	89 44 24 38	 mov	 DWORD PTR val$78606[rsp], eax
  0031c	0f b7 54 24 38	 movzx	 edx, WORD PTR val$78606[rsp]
  00321	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00326	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  0032c	0f b6 c8	 movzx	 ecx, al
  0032f	d3 e2		 shl	 edx, cl
  00331	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00336	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  0033d	0b ca		 or	 ecx, edx
  0033f	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00344	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0034b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00350	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00357	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0035d	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00362	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00365	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0036a	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0036e	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00371	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00376	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00379	83 c1 01	 add	 ecx, 1
  0037c	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00381	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00384	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00389	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00390	c1 fa 08	 sar	 edx, 8
  00393	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00398	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0039b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  003a0	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  003a4	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  003a7	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  003ac	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  003af	83 c1 01	 add	 ecx, 1
  003b2	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  003b7	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  003ba	0f b7 54 24 38	 movzx	 edx, WORD PTR val$78606[rsp]
  003bf	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  003c4	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  003cb	b8 10 00 00 00	 mov	 eax, 16
  003d0	48 2b c1	 sub	 rax, rcx
  003d3	0f b6 c8	 movzx	 ecx, al
  003d6	8b c2		 mov	 eax, edx
  003d8	d3 f8		 sar	 eax, cl
  003da	8b c8		 mov	 ecx, eax
  003dc	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  003e1	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  003e8	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR len$78602[rsp]
  003ed	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  003f2	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  003f9	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  003fe	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00403	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  00409	eb 4e		 jmp	 SHORT $LN6@send_all_t
$LN7@send_all_t:
  0040b	8b 44 24 78	 mov	 eax, DWORD PTR blcodes$[rsp]
  0040f	83 e8 04	 sub	 eax, 4
  00412	0f b7 d0	 movzx	 edx, ax
  00415	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0041a	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00420	0f b6 c8	 movzx	 ecx, al
  00423	d3 e2		 shl	 edx, cl
  00425	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0042a	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00431	0b ca		 or	 ecx, edx
  00433	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00438	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0043f	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00444	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  0044a	03 4c 24 34	 add	 ecx, DWORD PTR len$78602[rsp]
  0044e	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00453	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN6@send_all_t:

; 855  :     for (rank = 0; rank < blcodes; rank++) {

  00459	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR rank$[rsp], 0
  00461	eb 0b		 jmp	 SHORT $LN5@send_all_t
$LN4@send_all_t:
  00463	8b 44 24 20	 mov	 eax, DWORD PTR rank$[rsp]
  00467	83 c0 01	 add	 eax, 1
  0046a	89 44 24 20	 mov	 DWORD PTR rank$[rsp], eax
$LN5@send_all_t:
  0046e	8b 44 24 78	 mov	 eax, DWORD PTR blcodes$[rsp]
  00472	39 44 24 20	 cmp	 DWORD PTR rank$[rsp], eax
  00476	0f 8d 98 01 00
	00		 jge	 $LN3@send_all_t

; 856  :         Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
; 857  :         send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);

  0047c	c7 44 24 3c 03
	00 00 00	 mov	 DWORD PTR len$78619[rsp], 3
  00484	b9 10 00 00 00	 mov	 ecx, 16
  00489	2b 4c 24 3c	 sub	 ecx, DWORD PTR len$78619[rsp]
  0048d	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00492	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  00498	0f 8e 10 01 00
	00		 jle	 $LN2@send_all_t
  0049e	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR rank$[rsp]
  004a3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:bl_order
  004aa	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  004ae	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004b3	0f b7 84 88 a6
	0a 00 00	 movzx	 eax, WORD PTR [rax+rcx*4+2726]
  004bb	89 44 24 40	 mov	 DWORD PTR val$78623[rsp], eax
  004bf	0f b7 54 24 40	 movzx	 edx, WORD PTR val$78623[rsp]
  004c4	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004c9	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  004cf	0f b6 c8	 movzx	 ecx, al
  004d2	d3 e2		 shl	 edx, cl
  004d4	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004d9	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  004e0	0b ca		 or	 ecx, edx
  004e2	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004e7	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  004ee	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004f3	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  004fa	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00500	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00505	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00508	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0050d	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00511	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00514	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00519	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0051c	83 c1 01	 add	 ecx, 1
  0051f	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00524	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00527	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0052c	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00533	c1 fa 08	 sar	 edx, 8
  00536	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0053b	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0053e	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00543	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00547	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0054a	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0054f	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00552	83 c1 01	 add	 ecx, 1
  00555	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0055a	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  0055d	0f b7 54 24 40	 movzx	 edx, WORD PTR val$78623[rsp]
  00562	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00567	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  0056e	b8 10 00 00 00	 mov	 eax, 16
  00573	48 2b c1	 sub	 rax, rcx
  00576	0f b6 c8	 movzx	 ecx, al
  00579	8b c2		 mov	 eax, edx
  0057b	d3 f8		 sar	 eax, cl
  0057d	8b c8		 mov	 ecx, eax
  0057f	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00584	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0058b	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR len$78619[rsp]
  00590	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00595	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  0059c	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  005a1	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005a6	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  005ac	eb 61		 jmp	 SHORT $LN1@send_all_t
$LN2@send_all_t:
  005ae	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR rank$[rsp]
  005b3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:bl_order
  005ba	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  005be	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005c3	0f b7 94 88 a6
	0a 00 00	 movzx	 edx, WORD PTR [rax+rcx*4+2726]
  005cb	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005d0	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  005d6	0f b6 c8	 movzx	 ecx, al
  005d9	d3 e2		 shl	 edx, cl
  005db	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005e0	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  005e7	0b ca		 or	 ecx, edx
  005e9	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005ee	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  005f5	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005fa	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00600	03 4c 24 3c	 add	 ecx, DWORD PTR len$78619[rsp]
  00604	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00609	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN1@send_all_t:

; 858  :     }

  0060f	e9 4f fe ff ff	 jmp	 $LN4@send_all_t
$LN3@send_all_t:

; 859  :     Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
; 860  : 
; 861  :     send_tree(s, (ct_data *)s->dyn_ltree, lcodes-1); /* literal tree */

  00614	44 8b 44 24 68	 mov	 r8d, DWORD PTR lcodes$[rsp]
  00619	41 83 e8 01	 sub	 r8d, 1
  0061d	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  00622	48 81 c2 bc 00
	00 00		 add	 rdx, 188		; 000000bcH
  00629	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0062e	e8 00 00 00 00	 call	 send_tree

; 862  :     Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
; 863  : 
; 864  :     send_tree(s, (ct_data *)s->dyn_dtree, dcodes-1); /* distance tree */

  00633	44 8b 44 24 70	 mov	 r8d, DWORD PTR dcodes$[rsp]
  00638	41 83 e8 01	 sub	 r8d, 1
  0063c	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  00641	48 81 c2 b0 09
	00 00		 add	 rdx, 2480		; 000009b0H
  00648	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0064d	e8 00 00 00 00	 call	 send_tree

; 865  :     Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
; 866  : }

  00652	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00656	c3		 ret	 0
send_all_trees ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$build_tree DD imagerel build_tree
	DD	imagerel build_tree+1143
	DD	imagerel $unwind$build_tree
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$build_tree DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT build_tree
_TEXT	SEGMENT
elems$ = 32
n$ = 36
tree$ = 40
max_code$ = 48
node$ = 52
m$ = 56
stree$ = 64
tv136 = 72
tv230 = 76
s$ = 96
desc$ = 104
build_tree PROC						; COMDAT

; 626  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 627  :     ct_data *tree         = desc->dyn_tree;

  0000e	48 8b 44 24 68	 mov	 rax, QWORD PTR desc$[rsp]
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	48 89 44 24 28	 mov	 QWORD PTR tree$[rsp], rax

; 628  :     const ct_data *stree  = desc->stat_desc->static_tree;

  0001b	48 8b 44 24 68	 mov	 rax, QWORD PTR desc$[rsp]
  00020	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00024	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00027	48 89 44 24 40	 mov	 QWORD PTR stree$[rsp], rax

; 629  :     int elems             = desc->stat_desc->elems;

  0002c	48 8b 44 24 68	 mov	 rax, QWORD PTR desc$[rsp]
  00031	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00035	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00038	89 44 24 20	 mov	 DWORD PTR elems$[rsp], eax

; 630  :     int n, m;          /* iterate over heap elements */
; 631  :     int max_code = -1; /* largest code with non zero frequency */

  0003c	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR max_code$[rsp], -1

; 632  :     int node;          /* new node being created */
; 633  : 
; 634  :     /* Construct the initial heap, with least frequent element in
; 635  :      * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
; 636  :      * heap[0] is not used.
; 637  :      */
; 638  :     s->heap_len = 0, s->heap_max = HEAP_SIZE;

  00044	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00049	c7 80 9c 14 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+5276], 0
  00053	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00058	c7 80 a0 14 00
	00 3d 02 00 00	 mov	 DWORD PTR [rax+5280], 573 ; 0000023dH

; 639  : 
; 640  :     for (n = 0; n < elems; n++) {

  00062	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  0006a	eb 0b		 jmp	 SHORT $LN14@build_tree
$LN13@build_tree:
  0006c	8b 44 24 24	 mov	 eax, DWORD PTR n$[rsp]
  00070	83 c0 01	 add	 eax, 1
  00073	89 44 24 24	 mov	 DWORD PTR n$[rsp], eax
$LN14@build_tree:
  00077	8b 44 24 20	 mov	 eax, DWORD PTR elems$[rsp]
  0007b	39 44 24 24	 cmp	 DWORD PTR n$[rsp], eax
  0007f	7d 79		 jge	 SHORT $LN12@build_tree

; 641  :         if (tree[n].Freq != 0) {

  00081	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR n$[rsp]
  00086	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  0008b	0f b7 04 88	 movzx	 eax, WORD PTR [rax+rcx*4]
  0008f	85 c0		 test	 eax, eax
  00091	74 51		 je	 SHORT $LN11@build_tree

; 642  :             s->heap[++(s->heap_len)] = max_code = n;

  00093	8b 44 24 24	 mov	 eax, DWORD PTR n$[rsp]
  00097	89 44 24 30	 mov	 DWORD PTR max_code$[rsp], eax
  0009b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000a0	8b 88 9c 14 00
	00		 mov	 ecx, DWORD PTR [rax+5276]
  000a6	83 c1 01	 add	 ecx, 1
  000a9	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000ae	89 88 9c 14 00
	00		 mov	 DWORD PTR [rax+5276], ecx
  000b4	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000b9	48 63 90 9c 14
	00 00		 movsxd	 rdx, DWORD PTR [rax+5276]
  000c0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  000c5	8b 44 24 30	 mov	 eax, DWORD PTR max_code$[rsp]
  000c9	89 84 91 a8 0b
	00 00		 mov	 DWORD PTR [rcx+rdx*4+2984], eax

; 643  :             s->depth[n] = 0;

  000d0	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR n$[rsp]
  000d5	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000da	c6 84 08 a4 14
	00 00 00	 mov	 BYTE PTR [rax+rcx+5284], 0

; 644  :         } else {

  000e2	eb 11		 jmp	 SHORT $LN10@build_tree
$LN11@build_tree:

; 645  :             tree[n].Len = 0;

  000e4	48 63 54 24 24	 movsxd	 rdx, DWORD PTR n$[rsp]
  000e9	33 c9		 xor	 ecx, ecx
  000eb	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  000f0	66 89 4c 90 02	 mov	 WORD PTR [rax+rdx*4+2], cx
$LN10@build_tree:

; 646  :         }
; 647  :     }

  000f5	e9 72 ff ff ff	 jmp	 $LN13@build_tree
$LN12@build_tree:
$LN9@build_tree:

; 648  : 
; 649  :     /* The pkzip format requires that at least one distance code exists,
; 650  :      * and that at least one bit should be sent even if there is only one
; 651  :      * possible code. So to avoid special checks later on we force at least
; 652  :      * two codes of non zero frequency.
; 653  :      */
; 654  :     while (s->heap_len < 2) {

  000fa	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000ff	83 b8 9c 14 00
	00 02		 cmp	 DWORD PTR [rax+5276], 2
  00106	0f 8d d3 00 00
	00		 jge	 $LN8@build_tree

; 655  :         node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);

  0010c	83 7c 24 30 02	 cmp	 DWORD PTR max_code$[rsp], 2
  00111	7d 15		 jge	 SHORT $LN17@build_tree
  00113	8b 44 24 30	 mov	 eax, DWORD PTR max_code$[rsp]
  00117	83 c0 01	 add	 eax, 1
  0011a	89 44 24 30	 mov	 DWORD PTR max_code$[rsp], eax
  0011e	8b 44 24 30	 mov	 eax, DWORD PTR max_code$[rsp]
  00122	89 44 24 48	 mov	 DWORD PTR tv136[rsp], eax
  00126	eb 08		 jmp	 SHORT $LN18@build_tree
$LN17@build_tree:
  00128	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv136[rsp], 0
$LN18@build_tree:
  00130	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00135	8b 88 9c 14 00
	00		 mov	 ecx, DWORD PTR [rax+5276]
  0013b	83 c1 01	 add	 ecx, 1
  0013e	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00143	89 88 9c 14 00
	00		 mov	 DWORD PTR [rax+5276], ecx
  00149	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0014e	48 63 90 9c 14
	00 00		 movsxd	 rdx, DWORD PTR [rax+5276]
  00155	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0015a	8b 44 24 48	 mov	 eax, DWORD PTR tv136[rsp]
  0015e	89 84 91 a8 0b
	00 00		 mov	 DWORD PTR [rcx+rdx*4+2984], eax
  00165	8b 44 24 48	 mov	 eax, DWORD PTR tv136[rsp]
  00169	89 44 24 34	 mov	 DWORD PTR node$[rsp], eax

; 656  :         tree[node].Freq = 1;

  0016d	48 63 54 24 34	 movsxd	 rdx, DWORD PTR node$[rsp]
  00172	b9 01 00 00 00	 mov	 ecx, 1
  00177	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  0017c	66 89 0c 90	 mov	 WORD PTR [rax+rdx*4], cx

; 657  :         s->depth[node] = 0;

  00180	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR node$[rsp]
  00185	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0018a	c6 84 08 a4 14
	00 00 00	 mov	 BYTE PTR [rax+rcx+5284], 0

; 658  :         s->opt_len--; if (stree) s->static_len -= stree[node].Len;

  00192	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00197	8b 88 00 17 00
	00		 mov	 ecx, DWORD PTR [rax+5888]
  0019d	83 e9 01	 sub	 ecx, 1
  001a0	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001a5	89 88 00 17 00
	00		 mov	 DWORD PTR [rax+5888], ecx
  001ab	48 83 7c 24 40
	00		 cmp	 QWORD PTR stree$[rsp], 0
  001b1	74 27		 je	 SHORT $LN7@build_tree
  001b3	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR node$[rsp]
  001b8	48 8b 44 24 40	 mov	 rax, QWORD PTR stree$[rsp]
  001bd	0f b7 54 88 02	 movzx	 edx, WORD PTR [rax+rcx*4+2]
  001c2	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001c7	8b 88 04 17 00
	00		 mov	 ecx, DWORD PTR [rax+5892]
  001cd	2b ca		 sub	 ecx, edx
  001cf	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001d4	89 88 04 17 00
	00		 mov	 DWORD PTR [rax+5892], ecx
$LN7@build_tree:

; 659  :         /* node is 0 or 1 so it does not have extra bits */
; 660  :     }

  001da	e9 1b ff ff ff	 jmp	 $LN9@build_tree
$LN8@build_tree:

; 661  :     desc->max_code = max_code;

  001df	48 8b 4c 24 68	 mov	 rcx, QWORD PTR desc$[rsp]
  001e4	8b 44 24 30	 mov	 eax, DWORD PTR max_code$[rsp]
  001e8	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 662  : 
; 663  :     /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
; 664  :      * establish sub-heaps of increasing lengths:
; 665  :      */
; 666  :     for (n = s->heap_len/2; n >= 1; n--) pqdownheap(s, tree, n);

  001eb	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001f0	8b 80 9c 14 00
	00		 mov	 eax, DWORD PTR [rax+5276]
  001f6	99		 cdq
  001f7	2b c2		 sub	 eax, edx
  001f9	d1 f8		 sar	 eax, 1
  001fb	89 44 24 24	 mov	 DWORD PTR n$[rsp], eax
  001ff	eb 0b		 jmp	 SHORT $LN6@build_tree
$LN5@build_tree:
  00201	8b 44 24 24	 mov	 eax, DWORD PTR n$[rsp]
  00205	83 e8 01	 sub	 eax, 1
  00208	89 44 24 24	 mov	 DWORD PTR n$[rsp], eax
$LN6@build_tree:
  0020c	83 7c 24 24 01	 cmp	 DWORD PTR n$[rsp], 1
  00211	7c 16		 jl	 SHORT $LN4@build_tree
  00213	44 8b 44 24 24	 mov	 r8d, DWORD PTR n$[rsp]
  00218	48 8b 54 24 28	 mov	 rdx, QWORD PTR tree$[rsp]
  0021d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00222	e8 00 00 00 00	 call	 pqdownheap
  00227	eb d8		 jmp	 SHORT $LN5@build_tree
$LN4@build_tree:

; 667  : 
; 668  :     /* Construct the Huffman tree by repeatedly combining the least two
; 669  :      * frequent nodes.
; 670  :      */
; 671  :     node = elems;              /* next internal node of the tree */

  00229	8b 44 24 20	 mov	 eax, DWORD PTR elems$[rsp]
  0022d	89 44 24 34	 mov	 DWORD PTR node$[rsp], eax
$LN3@build_tree:

; 672  :     do {
; 673  :         pqremove(s, tree, n);  /* n = node of least frequency */

  00231	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00236	8b 80 ac 0b 00
	00		 mov	 eax, DWORD PTR [rax+2988]
  0023c	89 44 24 24	 mov	 DWORD PTR n$[rsp], eax
  00240	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00245	48 63 90 9c 14
	00 00		 movsxd	 rdx, DWORD PTR [rax+5276]
  0024c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00251	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00256	8b 84 90 a8 0b
	00 00		 mov	 eax, DWORD PTR [rax+rdx*4+2984]
  0025d	89 81 ac 0b 00
	00		 mov	 DWORD PTR [rcx+2988], eax
  00263	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00268	8b 88 9c 14 00
	00		 mov	 ecx, DWORD PTR [rax+5276]
  0026e	83 e9 01	 sub	 ecx, 1
  00271	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00276	89 88 9c 14 00
	00		 mov	 DWORD PTR [rax+5276], ecx
  0027c	41 b8 01 00 00
	00		 mov	 r8d, 1
  00282	48 8b 54 24 28	 mov	 rdx, QWORD PTR tree$[rsp]
  00287	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0028c	e8 00 00 00 00	 call	 pqdownheap

; 674  :         m = s->heap[SMALLEST]; /* m = node of next least frequency */

  00291	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00296	8b 80 ac 0b 00
	00		 mov	 eax, DWORD PTR [rax+2988]
  0029c	89 44 24 38	 mov	 DWORD PTR m$[rsp], eax

; 675  : 
; 676  :         s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */

  002a0	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002a5	8b 88 a0 14 00
	00		 mov	 ecx, DWORD PTR [rax+5280]
  002ab	83 e9 01	 sub	 ecx, 1
  002ae	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002b3	89 88 a0 14 00
	00		 mov	 DWORD PTR [rax+5280], ecx
  002b9	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002be	48 63 90 a0 14
	00 00		 movsxd	 rdx, DWORD PTR [rax+5280]
  002c5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  002ca	8b 44 24 24	 mov	 eax, DWORD PTR n$[rsp]
  002ce	89 84 91 a8 0b
	00 00		 mov	 DWORD PTR [rcx+rdx*4+2984], eax

; 677  :         s->heap[--(s->heap_max)] = m;

  002d5	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002da	8b 88 a0 14 00
	00		 mov	 ecx, DWORD PTR [rax+5280]
  002e0	83 e9 01	 sub	 ecx, 1
  002e3	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002e8	89 88 a0 14 00
	00		 mov	 DWORD PTR [rax+5280], ecx
  002ee	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002f3	48 63 90 a0 14
	00 00		 movsxd	 rdx, DWORD PTR [rax+5280]
  002fa	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  002ff	8b 44 24 38	 mov	 eax, DWORD PTR m$[rsp]
  00303	89 84 91 a8 0b
	00 00		 mov	 DWORD PTR [rcx+rdx*4+2984], eax

; 678  : 
; 679  :         /* Create a new node father of n and m */
; 680  :         tree[node].Freq = tree[n].Freq + tree[m].Freq;

  0030a	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR n$[rsp]
  0030f	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  00314	0f b7 14 88	 movzx	 edx, WORD PTR [rax+rcx*4]
  00318	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR m$[rsp]
  0031d	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  00322	0f b7 04 88	 movzx	 eax, WORD PTR [rax+rcx*4]
  00326	03 d0		 add	 edx, eax
  00328	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR node$[rsp]
  0032d	48 8b 44 24 28	 mov	 rax, QWORD PTR tree$[rsp]
  00332	66 89 14 88	 mov	 WORD PTR [rax+rcx*4], dx

; 681  :         s->depth[node] = (uch)((s->depth[n] >= s->depth[m] ?
; 682  :                                 s->depth[n] : s->depth[m]) + 1);

  00336	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR n$[rsp]
  0033b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00340	0f b6 94 08 a4
	14 00 00	 movzx	 edx, BYTE PTR [rax+rcx+5284]
  00348	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR m$[rsp]
  0034d	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00352	0f b6 84 08 a4
	14 00 00	 movzx	 eax, BYTE PTR [rax+rcx+5284]
  0035a	3b d0		 cmp	 edx, eax
  0035c	7c 18		 jl	 SHORT $LN19@build_tree
  0035e	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR n$[rsp]
  00363	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00368	0f b6 84 08 a4
	14 00 00	 movzx	 eax, BYTE PTR [rax+rcx+5284]
  00370	89 44 24 4c	 mov	 DWORD PTR tv230[rsp], eax
  00374	eb 16		 jmp	 SHORT $LN20@build_tree
$LN19@build_tree:
  00376	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR m$[rsp]
  0037b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00380	0f b6 84 08 a4
	14 00 00	 movzx	 eax, BYTE PTR [rax+rcx+5284]
  00388	89 44 24 4c	 mov	 DWORD PTR tv230[rsp], eax
$LN20@build_tree:
  0038c	8b 54 24 4c	 mov	 edx, DWORD PTR tv230[rsp]
  00390	83 c2 01	 add	 edx, 1
  00393	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR node$[rsp]
  00398	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0039d	88 94 08 a4 14
	00 00		 mov	 BYTE PTR [rax+rcx+5284], dl

; 683  :         tree[n].Dad = tree[m].Dad = (ush)node;

  003a4	48 63 54 24 38	 movsxd	 rdx, DWORD PTR m$[rsp]
  003a9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  003ae	0f b7 44 24 34	 movzx	 eax, WORD PTR node$[rsp]
  003b3	66 89 44 91 02	 mov	 WORD PTR [rcx+rdx*4+2], ax
  003b8	48 63 54 24 24	 movsxd	 rdx, DWORD PTR n$[rsp]
  003bd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  003c2	0f b7 44 24 34	 movzx	 eax, WORD PTR node$[rsp]
  003c7	66 89 44 91 02	 mov	 WORD PTR [rcx+rdx*4+2], ax

; 684  : #ifdef DUMP_BL_TREE
; 685  :         if (tree == s->bl_tree) {
; 686  :             fprintf(stderr,"\nnode %d(%d), sons %d(%d) %d(%d)",
; 687  :                     node, tree[node].Freq, n, tree[n].Freq, m, tree[m].Freq);
; 688  :         }
; 689  : #endif
; 690  :         /* and insert the new node in the heap */
; 691  :         s->heap[SMALLEST] = node++;

  003cc	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  003d1	8b 44 24 34	 mov	 eax, DWORD PTR node$[rsp]
  003d5	89 81 ac 0b 00
	00		 mov	 DWORD PTR [rcx+2988], eax
  003db	8b 44 24 34	 mov	 eax, DWORD PTR node$[rsp]
  003df	83 c0 01	 add	 eax, 1
  003e2	89 44 24 34	 mov	 DWORD PTR node$[rsp], eax

; 692  :         pqdownheap(s, tree, SMALLEST);

  003e6	41 b8 01 00 00
	00		 mov	 r8d, 1
  003ec	48 8b 54 24 28	 mov	 rdx, QWORD PTR tree$[rsp]
  003f1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  003f6	e8 00 00 00 00	 call	 pqdownheap

; 693  : 
; 694  :     } while (s->heap_len >= 2);

  003fb	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00400	83 b8 9c 14 00
	00 02		 cmp	 DWORD PTR [rax+5276], 2
  00407	0f 8d 24 fe ff
	ff		 jge	 $LN3@build_tree

; 695  : 
; 696  :     s->heap[--(s->heap_max)] = s->heap[SMALLEST];

  0040d	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00412	8b 88 a0 14 00
	00		 mov	 ecx, DWORD PTR [rax+5280]
  00418	83 e9 01	 sub	 ecx, 1
  0041b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00420	89 88 a0 14 00
	00		 mov	 DWORD PTR [rax+5280], ecx
  00426	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0042b	48 63 90 a0 14
	00 00		 movsxd	 rdx, DWORD PTR [rax+5280]
  00432	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00437	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0043c	8b 80 ac 0b 00
	00		 mov	 eax, DWORD PTR [rax+2988]
  00442	89 84 91 a8 0b
	00 00		 mov	 DWORD PTR [rcx+rdx*4+2984], eax

; 697  : 
; 698  :     /* At this point, the fields freq and dad are set. We can now
; 699  :      * generate the bit lengths.
; 700  :      */
; 701  :     gen_bitlen(s, (tree_desc *)desc);

  00449	48 8b 54 24 68	 mov	 rdx, QWORD PTR desc$[rsp]
  0044e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00453	e8 00 00 00 00	 call	 gen_bitlen

; 702  : 
; 703  :     /* The field len is now set, we can generate the bit codes */
; 704  :     gen_codes ((ct_data *)tree, max_code, s->bl_count);

  00458	4c 8b 44 24 60	 mov	 r8, QWORD PTR s$[rsp]
  0045d	49 81 c0 88 0b
	00 00		 add	 r8, 2952		; 00000b88H
  00464	8b 54 24 30	 mov	 edx, DWORD PTR max_code$[rsp]
  00468	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tree$[rsp]
  0046d	e8 00 00 00 00	 call	 gen_codes

; 705  : }

  00472	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00476	c3		 ret	 0
build_tree ENDP
_TEXT	ENDS
PUBLIC	_tr_init
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tr_init DD imagerel $LN3
	DD	imagerel $LN3+202
	DD	imagerel $unwind$_tr_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tr_init DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _tr_init
_TEXT	SEGMENT
s$ = 48
_tr_init PROC						; COMDAT

; 388  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 389  :     tr_static_init();

  00009	e8 00 00 00 00	 call	 tr_static_init

; 390  : 
; 391  :     s->l_desc.dyn_tree = s->dyn_ltree;

  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00013	48 81 c1 bc 00
	00 00		 add	 rcx, 188		; 000000bcH
  0001a	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0001f	48 89 88 40 0b
	00 00		 mov	 QWORD PTR [rax+2880], rcx

; 392  :     s->l_desc.stat_desc = &static_l_desc;

  00026	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  0002b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:static_l_desc
  00032	48 89 81 50 0b
	00 00		 mov	 QWORD PTR [rcx+2896], rax

; 393  : 
; 394  :     s->d_desc.dyn_tree = s->dyn_dtree;

  00039	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  0003e	48 81 c1 b0 09
	00 00		 add	 rcx, 2480		; 000009b0H
  00045	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0004a	48 89 88 58 0b
	00 00		 mov	 QWORD PTR [rax+2904], rcx

; 395  :     s->d_desc.stat_desc = &static_d_desc;

  00051	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00056	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:static_d_desc
  0005d	48 89 81 68 0b
	00 00		 mov	 QWORD PTR [rcx+2920], rax

; 396  : 
; 397  :     s->bl_desc.dyn_tree = s->bl_tree;

  00064	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00069	48 81 c1 a4 0a
	00 00		 add	 rcx, 2724		; 00000aa4H
  00070	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00075	48 89 88 70 0b
	00 00		 mov	 QWORD PTR [rax+2928], rcx

; 398  :     s->bl_desc.stat_desc = &static_bl_desc;

  0007c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00081	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:static_bl_desc
  00088	48 89 81 80 0b
	00 00		 mov	 QWORD PTR [rcx+2944], rax

; 399  : 
; 400  :     s->bi_buf = 0;

  0008f	33 c9		 xor	 ecx, ecx
  00091	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00096	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx

; 401  :     s->bi_valid = 0;

  0009d	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000a2	c7 80 14 17 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+5908], 0

; 402  :     s->last_eob_len = 8; /* enough lookahead for inflate */

  000ac	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000b1	c7 80 0c 17 00
	00 08 00 00 00	 mov	 DWORD PTR [rax+5900], 8

; 403  : #ifdef DEBUG
; 404  :     s->compressed_len = 0L;
; 405  :     s->bits_sent = 0L;
; 406  : #endif
; 407  : 
; 408  :     /* Initialize the first block of the first file: */
; 409  :     init_block(s);

  000bb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  000c0	e8 00 00 00 00	 call	 init_block

; 410  : }

  000c5	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000c9	c3		 ret	 0
_tr_init ENDP
;	COMDAT pdata
pdata	SEGMENT
$pdata$build_bl_tree DD imagerel build_bl_tree
	DD	imagerel build_bl_tree+209
	DD	imagerel $unwind$build_bl_tree
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$build_bl_tree DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT build_bl_tree
_TEXT	SEGMENT
max_blindex$ = 32
s$ = 64
build_bl_tree PROC					; COMDAT

; 809  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 810  :     int max_blindex;  /* index of last bit length code of non zero freq */
; 811  : 
; 812  :     /* Determine the bit length frequencies for literal and distance trees */
; 813  :     scan_tree(s, (ct_data *)s->dyn_ltree, s->l_desc.max_code);

  00009	48 8b 54 24 40	 mov	 rdx, QWORD PTR s$[rsp]
  0000e	48 81 c2 bc 00
	00 00		 add	 rdx, 188		; 000000bcH
  00015	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  0001a	44 8b 80 48 0b
	00 00		 mov	 r8d, DWORD PTR [rax+2888]
  00021	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  00026	e8 00 00 00 00	 call	 scan_tree

; 814  :     scan_tree(s, (ct_data *)s->dyn_dtree, s->d_desc.max_code);

  0002b	48 8b 54 24 40	 mov	 rdx, QWORD PTR s$[rsp]
  00030	48 81 c2 b0 09
	00 00		 add	 rdx, 2480		; 000009b0H
  00037	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  0003c	44 8b 80 60 0b
	00 00		 mov	 r8d, DWORD PTR [rax+2912]
  00043	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  00048	e8 00 00 00 00	 call	 scan_tree

; 815  : 
; 816  :     /* Build the bit length tree: */
; 817  :     build_tree(s, (tree_desc *)(&(s->bl_desc)));

  0004d	48 8b 54 24 40	 mov	 rdx, QWORD PTR s$[rsp]
  00052	48 81 c2 70 0b
	00 00		 add	 rdx, 2928		; 00000b70H
  00059	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  0005e	e8 00 00 00 00	 call	 build_tree

; 818  :     /* opt_len now includes the length of the tree representations, except
; 819  :      * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
; 820  :      */
; 821  : 
; 822  :     /* Determine the number of bit length codes to send. The pkzip format
; 823  :      * requires that at least 4 bit length codes be sent. (appnote.txt says
; 824  :      * 3 but the actual value used is 4.)
; 825  :      */
; 826  :     for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {

  00063	c7 44 24 20 12
	00 00 00	 mov	 DWORD PTR max_blindex$[rsp], 18
  0006b	eb 0b		 jmp	 SHORT $LN4@build_bl_t
$LN3@build_bl_t:
  0006d	8b 44 24 20	 mov	 eax, DWORD PTR max_blindex$[rsp]
  00071	83 e8 01	 sub	 eax, 1
  00074	89 44 24 20	 mov	 DWORD PTR max_blindex$[rsp], eax
$LN4@build_bl_t:
  00078	83 7c 24 20 03	 cmp	 DWORD PTR max_blindex$[rsp], 3
  0007d	7c 25		 jl	 SHORT $LN2@build_bl_t

; 827  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  0007f	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR max_blindex$[rsp]
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:bl_order
  0008b	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  0008f	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00094	0f b7 84 88 a6
	0a 00 00	 movzx	 eax, WORD PTR [rax+rcx*4+2726]
  0009c	85 c0		 test	 eax, eax
  0009e	74 02		 je	 SHORT $LN1@build_bl_t
  000a0	eb 02		 jmp	 SHORT $LN2@build_bl_t
$LN1@build_bl_t:

; 828  :     }

  000a2	eb c9		 jmp	 SHORT $LN3@build_bl_t
$LN2@build_bl_t:

; 829  :     /* Update opt_len to include the bit length tree and counts */
; 830  :     s->opt_len += 3*(max_blindex+1) + 5+5+4;

  000a4	8b 4c 24 20	 mov	 ecx, DWORD PTR max_blindex$[rsp]
  000a8	83 c1 01	 add	 ecx, 1
  000ab	6b c9 03	 imul	 ecx, 3
  000ae	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  000b3	8b 80 00 17 00
	00		 mov	 eax, DWORD PTR [rax+5888]
  000b9	8d 4c 01 0e	 lea	 ecx, DWORD PTR [rcx+rax+14]
  000bd	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  000c2	89 88 00 17 00
	00		 mov	 DWORD PTR [rax+5888], ecx

; 831  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 832  :             s->opt_len, s->static_len));
; 833  : 
; 834  :     return max_blindex;

  000c8	8b 44 24 20	 mov	 eax, DWORD PTR max_blindex$[rsp]

; 835  : }

  000cc	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d0	c3		 ret	 0
build_bl_tree ENDP
PUBLIC	_tr_flush_block
;	COMDAT pdata
pdata	SEGMENT
$pdata$_tr_flush_block DD imagerel $LN17
	DD	imagerel $LN17+1175
	DD	imagerel $unwind$_tr_flush_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_tr_flush_block DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _tr_flush_block
_TEXT	SEGMENT
static_lenb$ = 32
max_blindex$ = 36
opt_lenb$ = 40
len$78736 = 44
val$78740 = 48
len$78753 = 52
val$78757 = 56
s$ = 80
buf$ = 88
stored_len$ = 96
last$ = 104
_tr_flush_block PROC					; COMDAT

; 930  : {

$LN17:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 931  :     ulg opt_lenb, static_lenb; /* opt_len and static_len in bytes */
; 932  :     int max_blindex = 0;  /* index of last bit length code of non zero freq */

  00018	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR max_blindex$[rsp], 0

; 933  : 
; 934  :     /* Build the Huffman trees unless a stored block is forced */
; 935  :     if (s->level > 0) {

  00020	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00025	83 b8 ac 00 00
	00 00		 cmp	 DWORD PTR [rax+172], 0
  0002c	0f 8e 9f 00 00
	00		 jle	 $LN14@tr_flush_b

; 936  : 
; 937  :         /* Check if the file is binary or text */
; 938  :         if (s->strm->data_type == Z_UNKNOWN)

  00032	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00037	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003a	83 78 48 02	 cmp	 DWORD PTR [rax+72], 2
  0003e	75 19		 jne	 SHORT $LN13@tr_flush_b

; 939  :             s->strm->data_type = detect_data_type(s);

  00040	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00045	e8 00 00 00 00	 call	 detect_data_type
  0004a	44 8b d8	 mov	 r11d, eax
  0004d	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00052	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00055	44 89 58 48	 mov	 DWORD PTR [rax+72], r11d
$LN13@tr_flush_b:

; 940  : 
; 941  :         /* Construct the literal and distance trees */
; 942  :         build_tree(s, (tree_desc *)(&(s->l_desc)));

  00059	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  0005e	48 81 c2 40 0b
	00 00		 add	 rdx, 2880		; 00000b40H
  00065	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0006a	e8 00 00 00 00	 call	 build_tree

; 943  :         Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
; 944  :                 s->static_len));
; 945  : 
; 946  :         build_tree(s, (tree_desc *)(&(s->d_desc)));

  0006f	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  00074	48 81 c2 58 0b
	00 00		 add	 rdx, 2904		; 00000b58H
  0007b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00080	e8 00 00 00 00	 call	 build_tree

; 947  :         Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
; 948  :                 s->static_len));
; 949  :         /* At this point, opt_len and static_len are the total bit lengths of
; 950  :          * the compressed block data, excluding the tree representations.
; 951  :          */
; 952  : 
; 953  :         /* Build the bit length tree for the above two trees, and get the index
; 954  :          * in bl_order of the last bit length code to send.
; 955  :          */
; 956  :         max_blindex = build_bl_tree(s);

  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0008a	e8 00 00 00 00	 call	 build_bl_tree
  0008f	89 44 24 24	 mov	 DWORD PTR max_blindex$[rsp], eax

; 957  : 
; 958  :         /* Determine the best encoding. Compute the block lengths in bytes. */
; 959  :         opt_lenb = (s->opt_len+3+7)>>3;

  00093	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00098	8b 80 00 17 00
	00		 mov	 eax, DWORD PTR [rax+5888]
  0009e	83 c0 0a	 add	 eax, 10
  000a1	c1 e8 03	 shr	 eax, 3
  000a4	89 44 24 28	 mov	 DWORD PTR opt_lenb$[rsp], eax

; 960  :         static_lenb = (s->static_len+3+7)>>3;

  000a8	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000ad	8b 80 04 17 00
	00		 mov	 eax, DWORD PTR [rax+5892]
  000b3	83 c0 0a	 add	 eax, 10
  000b6	c1 e8 03	 shr	 eax, 3
  000b9	89 44 24 20	 mov	 DWORD PTR static_lenb$[rsp], eax

; 961  : 
; 962  :         Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
; 963  :                 opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
; 964  :                 s->last_lit));
; 965  : 
; 966  :         if (static_lenb <= opt_lenb) opt_lenb = static_lenb;

  000bd	8b 44 24 28	 mov	 eax, DWORD PTR opt_lenb$[rsp]
  000c1	39 44 24 20	 cmp	 DWORD PTR static_lenb$[rsp], eax
  000c5	77 08		 ja	 SHORT $LN12@tr_flush_b
  000c7	8b 44 24 20	 mov	 eax, DWORD PTR static_lenb$[rsp]
  000cb	89 44 24 28	 mov	 DWORD PTR opt_lenb$[rsp], eax
$LN12@tr_flush_b:

; 967  : 
; 968  :     } else {

  000cf	eb 13		 jmp	 SHORT $LN11@tr_flush_b
$LN14@tr_flush_b:

; 969  :         Assert(buf != (char*)0, "lost buf");
; 970  :         opt_lenb = static_lenb = stored_len + 5; /* force a stored block */

  000d1	8b 44 24 60	 mov	 eax, DWORD PTR stored_len$[rsp]
  000d5	83 c0 05	 add	 eax, 5
  000d8	89 44 24 20	 mov	 DWORD PTR static_lenb$[rsp], eax
  000dc	8b 44 24 20	 mov	 eax, DWORD PTR static_lenb$[rsp]
  000e0	89 44 24 28	 mov	 DWORD PTR opt_lenb$[rsp], eax
$LN11@tr_flush_b:

; 971  :     }
; 972  : 
; 973  : #ifdef FORCE_STORED
; 974  :     if (buf != (char*)0) { /* force stored block */
; 975  : #else
; 976  :     if (stored_len+4 <= opt_lenb && buf != (char*)0) {

  000e4	8b 44 24 60	 mov	 eax, DWORD PTR stored_len$[rsp]
  000e8	83 c0 04	 add	 eax, 4
  000eb	3b 44 24 28	 cmp	 eax, DWORD PTR opt_lenb$[rsp]
  000ef	77 26		 ja	 SHORT $LN10@tr_flush_b
  000f1	48 83 7c 24 58
	00		 cmp	 QWORD PTR buf$[rsp], 0
  000f7	74 1e		 je	 SHORT $LN10@tr_flush_b

; 977  :                        /* 4: two words for the lengths */
; 978  : #endif
; 979  :         /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
; 980  :          * Otherwise we can't have processed more than WSIZE input bytes since
; 981  :          * the last block flush, because compression would have been
; 982  :          * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
; 983  :          * transform a block into a stored block.
; 984  :          */
; 985  :         _tr_stored_block(s, buf, stored_len, last);

  000f9	44 8b 4c 24 68	 mov	 r9d, DWORD PTR last$[rsp]
  000fe	44 8b 44 24 60	 mov	 r8d, DWORD PTR stored_len$[rsp]
  00103	48 8b 54 24 58	 mov	 rdx, QWORD PTR buf$[rsp]
  00108	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0010d	e8 00 00 00 00	 call	 _tr_stored_block
  00112	e9 60 03 00 00	 jmp	 $LN9@tr_flush_b
$LN10@tr_flush_b:

; 986  : 
; 987  : #ifdef FORCE_STATIC
; 988  :     } else if (static_lenb >= 0) { /* force static trees */
; 989  : #else
; 990  :     } else if (s->strategy == Z_FIXED || static_lenb == opt_lenb) {

  00117	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0011c	83 b8 b0 00 00
	00 04		 cmp	 DWORD PTR [rax+176], 4
  00123	74 0e		 je	 SHORT $LN7@tr_flush_b
  00125	8b 44 24 28	 mov	 eax, DWORD PTR opt_lenb$[rsp]
  00129	39 44 24 20	 cmp	 DWORD PTR static_lenb$[rsp], eax
  0012d	0f 85 87 01 00
	00		 jne	 $LN8@tr_flush_b
$LN7@tr_flush_b:

; 991  : #endif
; 992  :         send_bits(s, (STATIC_TREES<<1)+last, 3);

  00133	c7 44 24 2c 03
	00 00 00	 mov	 DWORD PTR len$78736[rsp], 3
  0013b	b9 10 00 00 00	 mov	 ecx, 16
  00140	2b 4c 24 2c	 sub	 ecx, DWORD PTR len$78736[rsp]
  00144	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00149	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  0014f	0f 8e fa 00 00
	00		 jle	 $LN6@tr_flush_b
  00155	8b 44 24 68	 mov	 eax, DWORD PTR last$[rsp]
  00159	83 c0 02	 add	 eax, 2
  0015c	89 44 24 30	 mov	 DWORD PTR val$78740[rsp], eax
  00160	0f b7 54 24 30	 movzx	 edx, WORD PTR val$78740[rsp]
  00165	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0016a	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00170	0f b6 c8	 movzx	 ecx, al
  00173	d3 e2		 shl	 edx, cl
  00175	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0017a	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00181	0b ca		 or	 ecx, edx
  00183	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00188	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0018f	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00194	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  0019b	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  001a1	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001a6	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  001a9	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001ae	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  001b2	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  001b5	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001ba	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  001bd	83 c1 01	 add	 ecx, 1
  001c0	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001c5	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  001c8	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001cd	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  001d4	c1 fa 08	 sar	 edx, 8
  001d7	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001dc	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  001df	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001e4	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  001e8	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  001eb	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001f0	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  001f3	83 c1 01	 add	 ecx, 1
  001f6	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  001fb	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  001fe	0f b7 54 24 30	 movzx	 edx, WORD PTR val$78740[rsp]
  00203	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00208	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  0020f	b8 10 00 00 00	 mov	 eax, 16
  00214	48 2b c1	 sub	 rax, rcx
  00217	0f b6 c8	 movzx	 ecx, al
  0021a	8b c2		 mov	 eax, edx
  0021c	d3 f8		 sar	 eax, cl
  0021e	8b c8		 mov	 ecx, eax
  00220	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00225	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0022c	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR len$78736[rsp]
  00231	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00236	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  0023d	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  00242	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00247	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  0024d	eb 4e		 jmp	 SHORT $LN5@tr_flush_b
$LN6@tr_flush_b:
  0024f	8b 44 24 68	 mov	 eax, DWORD PTR last$[rsp]
  00253	83 c0 02	 add	 eax, 2
  00256	0f b7 d0	 movzx	 edx, ax
  00259	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0025e	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  00264	0f b6 c8	 movzx	 ecx, al
  00267	d3 e2		 shl	 edx, cl
  00269	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0026e	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00275	0b ca		 or	 ecx, edx
  00277	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0027c	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00283	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00288	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  0028e	03 4c 24 2c	 add	 ecx, DWORD PTR len$78736[rsp]
  00292	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00297	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN5@tr_flush_b:

; 993  :         compress_block(s, (ct_data *)static_ltree, (ct_data *)static_dtree);

  0029d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:static_dtree
  002a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:static_ltree
  002ab	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  002b0	e8 00 00 00 00	 call	 compress_block

; 994  : #ifdef DEBUG
; 995  :         s->compressed_len += 3 + s->static_len;
; 996  : #endif
; 997  :     } else {

  002b5	e9 bd 01 00 00	 jmp	 $LN4@tr_flush_b
$LN8@tr_flush_b:

; 998  :         send_bits(s, (DYN_TREES<<1)+last, 3);

  002ba	c7 44 24 34 03
	00 00 00	 mov	 DWORD PTR len$78753[rsp], 3
  002c2	b9 10 00 00 00	 mov	 ecx, 16
  002c7	2b 4c 24 34	 sub	 ecx, DWORD PTR len$78753[rsp]
  002cb	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  002d0	39 88 14 17 00
	00		 cmp	 DWORD PTR [rax+5908], ecx
  002d6	0f 8e fa 00 00
	00		 jle	 $LN3@tr_flush_b
  002dc	8b 44 24 68	 mov	 eax, DWORD PTR last$[rsp]
  002e0	83 c0 04	 add	 eax, 4
  002e3	89 44 24 38	 mov	 DWORD PTR val$78757[rsp], eax
  002e7	0f b7 54 24 38	 movzx	 edx, WORD PTR val$78757[rsp]
  002ec	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  002f1	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  002f7	0f b6 c8	 movzx	 ecx, al
  002fa	d3 e2		 shl	 edx, cl
  002fc	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00301	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  00308	0b ca		 or	 ecx, edx
  0030a	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0030f	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  00316	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0031b	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  00322	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00328	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0032d	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00330	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00335	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00339	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0033c	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00341	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00344	83 c1 01	 add	 ecx, 1
  00347	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0034c	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  0034f	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00354	0f b7 90 10 17
	00 00		 movzx	 edx, WORD PTR [rax+5904]
  0035b	c1 fa 08	 sar	 edx, 8
  0035e	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00363	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00366	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0036b	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0036f	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00372	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00377	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0037a	83 c1 01	 add	 ecx, 1
  0037d	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00382	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00385	0f b7 54 24 38	 movzx	 edx, WORD PTR val$78757[rsp]
  0038a	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0038f	48 63 88 14 17
	00 00		 movsxd	 rcx, DWORD PTR [rax+5908]
  00396	b8 10 00 00 00	 mov	 eax, 16
  0039b	48 2b c1	 sub	 rax, rcx
  0039e	0f b6 c8	 movzx	 ecx, al
  003a1	8b c2		 mov	 eax, edx
  003a3	d3 f8		 sar	 eax, cl
  003a5	8b c8		 mov	 ecx, eax
  003a7	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003ac	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  003b3	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR len$78753[rsp]
  003b8	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003bd	48 63 80 14 17
	00 00		 movsxd	 rax, DWORD PTR [rax+5908]
  003c4	48 8d 4c 08 f0	 lea	 rcx, QWORD PTR [rax+rcx-16]
  003c9	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003ce	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
  003d4	eb 4e		 jmp	 SHORT $LN2@tr_flush_b
$LN3@tr_flush_b:
  003d6	8b 44 24 68	 mov	 eax, DWORD PTR last$[rsp]
  003da	83 c0 04	 add	 eax, 4
  003dd	0f b7 d0	 movzx	 edx, ax
  003e0	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003e5	8b 80 14 17 00
	00		 mov	 eax, DWORD PTR [rax+5908]
  003eb	0f b6 c8	 movzx	 ecx, al
  003ee	d3 e2		 shl	 edx, cl
  003f0	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003f5	0f b7 88 10 17
	00 00		 movzx	 ecx, WORD PTR [rax+5904]
  003fc	0b ca		 or	 ecx, edx
  003fe	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00403	66 89 88 10 17
	00 00		 mov	 WORD PTR [rax+5904], cx
  0040a	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0040f	8b 88 14 17 00
	00		 mov	 ecx, DWORD PTR [rax+5908]
  00415	03 4c 24 34	 add	 ecx, DWORD PTR len$78753[rsp]
  00419	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0041e	89 88 14 17 00
	00		 mov	 DWORD PTR [rax+5908], ecx
$LN2@tr_flush_b:

; 999  :         send_all_trees(s, s->l_desc.max_code+1, s->d_desc.max_code+1,
; 1000 :                        max_blindex+1);

  00424	44 8b 4c 24 24	 mov	 r9d, DWORD PTR max_blindex$[rsp]
  00429	41 83 c1 01	 add	 r9d, 1
  0042d	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00432	44 8b 80 60 0b
	00 00		 mov	 r8d, DWORD PTR [rax+2912]
  00439	41 83 c0 01	 add	 r8d, 1
  0043d	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00442	8b 90 48 0b 00
	00		 mov	 edx, DWORD PTR [rax+2888]
  00448	83 c2 01	 add	 edx, 1
  0044b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00450	e8 00 00 00 00	 call	 send_all_trees

; 1001 :         compress_block(s, (ct_data *)s->dyn_ltree, (ct_data *)s->dyn_dtree);

  00455	4c 8b 44 24 50	 mov	 r8, QWORD PTR s$[rsp]
  0045a	49 81 c0 b0 09
	00 00		 add	 r8, 2480		; 000009b0H
  00461	48 8b 54 24 50	 mov	 rdx, QWORD PTR s$[rsp]
  00466	48 81 c2 bc 00
	00 00		 add	 rdx, 188		; 000000bcH
  0046d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00472	e8 00 00 00 00	 call	 compress_block
$LN4@tr_flush_b:
$LN9@tr_flush_b:

; 1002 : #ifdef DEBUG
; 1003 :         s->compressed_len += 3 + s->opt_len;
; 1004 : #endif
; 1005 :     }
; 1006 :     Assert (s->compressed_len == s->bits_sent, "bad compressed size");
; 1007 :     /* The above check is made mod 2^32, for files larger than 512 MB
; 1008 :      * and uLong implemented on 32 bits.
; 1009 :      */
; 1010 :     init_block(s);

  00477	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0047c	e8 00 00 00 00	 call	 init_block

; 1011 : 
; 1012 :     if (last) {

  00481	83 7c 24 68 00	 cmp	 DWORD PTR last$[rsp], 0
  00486	74 0a		 je	 SHORT $LN1@tr_flush_b

; 1013 :         bi_windup(s);

  00488	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0048d	e8 00 00 00 00	 call	 bi_windup
$LN1@tr_flush_b:

; 1014 : #ifdef DEBUG
; 1015 :         s->compressed_len += 7;  /* align on byte boundary */
; 1016 : #endif
; 1017 :     }
; 1018 :     Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
; 1019 :            s->compressed_len-7*last));
; 1020 : }

  00492	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00496	c3		 ret	 0
_tr_flush_block ENDP
END
