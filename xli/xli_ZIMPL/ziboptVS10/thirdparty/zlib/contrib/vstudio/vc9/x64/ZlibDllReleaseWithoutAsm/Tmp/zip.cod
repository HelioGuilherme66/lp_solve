; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	zip_copyright
PUBLIC	??_C@_01JOAMLHOP@?9?$AA@			; `string'
EXTRN	__imp_rand:PROC
EXTRN	__imp_srand:PROC
EXTRN	__imp__time64:PROC
?calls@?1??crypthead@@9@9 DD 01H DUP (?)		; `crypthead'::`2'::calls
;	COMDAT ??_C@_01JOAMLHOP@?9?$AA@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9?$AA@ DB '-', 00H			; `string'
zip_copyright DB ' zip 1.01 Copyright 1998-2004 Gilles Vollant - http://w'
	DB	'ww.winimage.com/zLibDll', 00H
;	COMDAT pdata
; File d:\lp_solve_5.5\xli\xli_zimpl\ziboptvs10\thirdparty\zlib\contrib\minizip\zip.c
pdata	SEGMENT
$pdata$zip64local_getByte DD imagerel zip64local_getByte
	DD	imagerel zip64local_getByte+123
	DD	imagerel $unwind$zip64local_getByte
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_getByte DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zip64local_getByte
_TEXT	SEGMENT
err$ = 32
c$ = 36
pzlib_filefunc_def$ = 64
filestream$ = 72
pi$ = 80
zip64local_getByte PROC					; COMDAT

; 350  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 351  :     unsigned char c;
; 352  :     int err = (int)ZREAD64(*pzlib_filefunc_def,filestream,&c,1);

  00013	41 b9 01 00 00
	00		 mov	 r9d, 1
  00019	4c 8d 44 24 24	 lea	 r8, QWORD PTR c$[rsp]
  0001e	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00028	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0002c	48 8b 44 24 40	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  00031	ff 50 08	 call	 QWORD PTR [rax+8]
  00034	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax

; 353  :     if (err==1)

  00038	83 7c 24 20 01	 cmp	 DWORD PTR err$[rsp], 1
  0003d	75 12		 jne	 SHORT $LN4@zip64local

; 354  :     {
; 355  :         *pi = (int)c;

  0003f	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR c$[rsp]
  00044	48 8b 44 24 50	 mov	 rax, QWORD PTR pi$[rsp]
  00049	89 08		 mov	 DWORD PTR [rax], ecx

; 356  :         return ZIP_OK;

  0004b	33 c0		 xor	 eax, eax
  0004d	eb 27		 jmp	 SHORT $LN5@zip64local

; 357  :     }
; 358  :     else

  0004f	eb 25		 jmp	 SHORT $LN3@zip64local
$LN4@zip64local:

; 359  :     {
; 360  :         if (ZERROR64(*pzlib_filefunc_def,filestream))

  00051	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  00056	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0005b	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0005f	48 8b 44 24 40	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  00064	ff 50 30	 call	 QWORD PTR [rax+48]
  00067	85 c0		 test	 eax, eax
  00069	74 09		 je	 SHORT $LN2@zip64local

; 361  :             return ZIP_ERRNO;

  0006b	b8 ff ff ff ff	 mov	 eax, -1
  00070	eb 04		 jmp	 SHORT $LN5@zip64local

; 362  :         else

  00072	eb 02		 jmp	 SHORT $LN1@zip64local
$LN2@zip64local:

; 363  :             return ZIP_EOF;

  00074	33 c0		 xor	 eax, eax
$LN1@zip64local:
$LN3@zip64local:
$LN5@zip64local:

; 364  :     }
; 365  : }

  00076	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007a	c3		 ret	 0
zip64local_getByte ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_TmzDateToDosDate DD imagerel zip64local_TmzDateToDosDate
	DD	imagerel zip64local_TmzDateToDosDate+156
	DD	imagerel $unwind$zip64local_TmzDateToDosDate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_TmzDateToDosDate DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zip64local_TmzDateToDosDate
_TEXT	SEGMENT
year$ = 0
ptm$ = 32
zip64local_TmzDateToDosDate PROC			; COMDAT

; 333  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 334  :     uLong year = (uLong)ptm->tm_year;

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ptm$[rsp]
  0000e	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00011	89 04 24	 mov	 DWORD PTR year$[rsp], eax

; 335  :     if (year>=1980)

  00014	81 3c 24 bc 07
	00 00		 cmp	 DWORD PTR year$[rsp], 1980 ; 000007bcH
  0001b	72 0d		 jb	 SHORT $LN3@zip64local@2

; 336  :         year-=1980;

  0001d	8b 04 24	 mov	 eax, DWORD PTR year$[rsp]
  00020	2d bc 07 00 00	 sub	 eax, 1980		; 000007bcH
  00025	89 04 24	 mov	 DWORD PTR year$[rsp], eax
  00028	eb 0f		 jmp	 SHORT $LN2@zip64local@2
$LN3@zip64local@2:

; 337  :     else if (year>=80)

  0002a	83 3c 24 50	 cmp	 DWORD PTR year$[rsp], 80 ; 00000050H
  0002e	72 09		 jb	 SHORT $LN1@zip64local@2

; 338  :         year-=80;

  00030	8b 04 24	 mov	 eax, DWORD PTR year$[rsp]
  00033	83 e8 50	 sub	 eax, 80			; 00000050H
  00036	89 04 24	 mov	 DWORD PTR year$[rsp], eax
$LN1@zip64local@2:
$LN2@zip64local@2:

; 339  :     return
; 340  :       (uLong) (((ptm->tm_mday) + (32 * (ptm->tm_mon+1)) + (512 * year)) << 16) |
; 341  :         ((ptm->tm_sec/2) + (32* ptm->tm_min) + (2048 * (uLong)ptm->tm_hour));

  00039	48 8b 44 24 20	 mov	 rax, QWORD PTR ptm$[rsp]
  0003e	8b 48 10	 mov	 ecx, DWORD PTR [rax+16]
  00041	83 c1 01	 add	 ecx, 1
  00044	6b c9 20	 imul	 ecx, 32			; 00000020H
  00047	48 8b 44 24 20	 mov	 rax, QWORD PTR ptm$[rsp]
  0004c	44 8b 40 0c	 mov	 r8d, DWORD PTR [rax+12]
  00050	44 03 c1	 add	 r8d, ecx
  00053	8b 04 24	 mov	 eax, DWORD PTR year$[rsp]
  00056	69 c0 00 02 00
	00		 imul	 eax, 512		; 00000200H
  0005c	44 03 c0	 add	 r8d, eax
  0005f	41 c1 e0 10	 shl	 r8d, 16
  00063	33 d2		 xor	 edx, edx
  00065	48 8b 44 24 20	 mov	 rax, QWORD PTR ptm$[rsp]
  0006a	8b 00		 mov	 eax, DWORD PTR [rax]
  0006c	b9 02 00 00 00	 mov	 ecx, 2
  00071	f7 f1		 div	 ecx
  00073	8b c8		 mov	 ecx, eax
  00075	48 8b 44 24 20	 mov	 rax, QWORD PTR ptm$[rsp]
  0007a	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0007d	6b c0 20	 imul	 eax, 32			; 00000020H
  00080	03 c8		 add	 ecx, eax
  00082	48 8b 44 24 20	 mov	 rax, QWORD PTR ptm$[rsp]
  00087	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0008a	69 c0 00 08 00
	00		 imul	 eax, 2048		; 00000800H
  00090	03 c8		 add	 ecx, eax
  00092	41 8b c0	 mov	 eax, r8d
  00095	0b c1		 or	 eax, ecx

; 342  : }

  00097	48 83 c4 18	 add	 rsp, 24
  0009b	c3		 ret	 0
zip64local_TmzDateToDosDate ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_putValue_inmemory DD imagerel zip64local_putValue_inmemory
	DD	imagerel zip64local_putValue_inmemory+151
	DD	imagerel $unwind$zip64local_putValue_inmemory
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_putValue_inmemory DD 011301H
	DD	02213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zip64local_putValue_inmemory
_TEXT	SEGMENT
n$ = 0
buf$ = 8
dest$ = 32
x$ = 40
nbByte$ = 48
zip64local_putValue_inmemory PROC			; COMDAT

; 312  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 18	 sub	 rsp, 24

; 313  :     unsigned char* buf=(unsigned char*)dest;

  00013	48 8b 44 24 20	 mov	 rax, QWORD PTR dest$[rsp]
  00018	48 89 44 24 08	 mov	 QWORD PTR buf$[rsp], rax

; 314  :     int n;
; 315  :     for (n = 0; n < nbByte; n++) {

  0001d	c7 04 24 00 00
	00 00		 mov	 DWORD PTR n$[rsp], 0
  00024	eb 09		 jmp	 SHORT $LN7@zip64local@3
$LN6@zip64local@3:
  00026	8b 04 24	 mov	 eax, DWORD PTR n$[rsp]
  00029	83 c0 01	 add	 eax, 1
  0002c	89 04 24	 mov	 DWORD PTR n$[rsp], eax
$LN7@zip64local@3:
  0002f	8b 44 24 30	 mov	 eax, DWORD PTR nbByte$[rsp]
  00033	39 04 24	 cmp	 DWORD PTR n$[rsp], eax
  00036	7d 28		 jge	 SHORT $LN5@zip64local@3

; 316  :         buf[n] = (unsigned char)(x & 0xff);

  00038	48 8b 54 24 28	 mov	 rdx, QWORD PTR x$[rsp]
  0003d	48 81 e2 ff 00
	00 00		 and	 rdx, 255		; 000000ffH
  00044	48 63 0c 24	 movsxd	 rcx, DWORD PTR n$[rsp]
  00048	48 8b 44 24 08	 mov	 rax, QWORD PTR buf$[rsp]
  0004d	88 14 08	 mov	 BYTE PTR [rax+rcx], dl

; 317  :         x >>= 8;

  00050	48 8b 44 24 28	 mov	 rax, QWORD PTR x$[rsp]
  00055	48 c1 e8 08	 shr	 rax, 8
  00059	48 89 44 24 28	 mov	 QWORD PTR x$[rsp], rax

; 318  :     }

  0005e	eb c6		 jmp	 SHORT $LN6@zip64local@3
$LN5@zip64local@3:

; 319  : 
; 320  :     if (x != 0)

  00060	48 83 7c 24 28
	00		 cmp	 QWORD PTR x$[rsp], 0
  00066	74 2a		 je	 SHORT $LN4@zip64local@3

; 321  :     {     /* data overflow - hack for ZIP64 */
; 322  :        for (n = 0; n < nbByte; n++)

  00068	c7 04 24 00 00
	00 00		 mov	 DWORD PTR n$[rsp], 0
  0006f	eb 09		 jmp	 SHORT $LN3@zip64local@3
$LN2@zip64local@3:
  00071	8b 04 24	 mov	 eax, DWORD PTR n$[rsp]
  00074	83 c0 01	 add	 eax, 1
  00077	89 04 24	 mov	 DWORD PTR n$[rsp], eax
$LN3@zip64local@3:
  0007a	8b 44 24 30	 mov	 eax, DWORD PTR nbByte$[rsp]
  0007e	39 04 24	 cmp	 DWORD PTR n$[rsp], eax
  00081	7d 0f		 jge	 SHORT $LN1@zip64local@3

; 323  :        {
; 324  :           buf[n] = 0xff;

  00083	48 63 0c 24	 movsxd	 rcx, DWORD PTR n$[rsp]
  00087	48 8b 44 24 08	 mov	 rax, QWORD PTR buf$[rsp]
  0008c	c6 04 08 ff	 mov	 BYTE PTR [rax+rcx], 255	; 000000ffH

; 325  :        }

  00090	eb df		 jmp	 SHORT $LN2@zip64local@3
$LN1@zip64local@3:
$LN4@zip64local@3:

; 326  :     }
; 327  : }

  00092	48 83 c4 18	 add	 rsp, 24
  00096	c3		 ret	 0
zip64local_putValue_inmemory ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_putValue DD imagerel zip64local_putValue
	DD	imagerel zip64local_putValue+197
	DD	imagerel $unwind$zip64local_putValue
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_putValue DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zip64local_putValue
_TEXT	SEGMENT
n$ = 32
buf$ = 40
pzlib_filefunc_def$ = 64
filestream$ = 72
x$ = 80
nbByte$ = 88
zip64local_putValue PROC				; COMDAT

; 288  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 289  :     unsigned char buf[8];
; 290  :     int n;
; 291  :     for (n = 0; n < nbByte; n++)

  00018	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  00020	eb 0b		 jmp	 SHORT $LN9@zip64local@4
$LN8@zip64local@4:
  00022	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  00026	83 c0 01	 add	 eax, 1
  00029	89 44 24 20	 mov	 DWORD PTR n$[rsp], eax
$LN9@zip64local@4:
  0002d	8b 44 24 58	 mov	 eax, DWORD PTR nbByte$[rsp]
  00031	39 44 24 20	 cmp	 DWORD PTR n$[rsp], eax
  00035	7d 25		 jge	 SHORT $LN7@zip64local@4

; 292  :     {
; 293  :         buf[n] = (unsigned char)(x & 0xff);

  00037	48 8b 4c 24 50	 mov	 rcx, QWORD PTR x$[rsp]
  0003c	48 81 e1 ff 00
	00 00		 and	 rcx, 255		; 000000ffH
  00043	48 63 44 24 20	 movsxd	 rax, DWORD PTR n$[rsp]
  00048	88 4c 04 28	 mov	 BYTE PTR buf$[rsp+rax], cl

; 294  :         x >>= 8;

  0004c	48 8b 44 24 50	 mov	 rax, QWORD PTR x$[rsp]
  00051	48 c1 e8 08	 shr	 rax, 8
  00055	48 89 44 24 50	 mov	 QWORD PTR x$[rsp], rax

; 295  :     }

  0005a	eb c6		 jmp	 SHORT $LN8@zip64local@4
$LN7@zip64local@4:

; 296  :     if (x != 0)

  0005c	48 83 7c 24 50
	00		 cmp	 QWORD PTR x$[rsp], 0
  00062	74 2b		 je	 SHORT $LN6@zip64local@4

; 297  :       {     /* data overflow - hack for ZIP64 (X Roche) */
; 298  :       for (n = 0; n < nbByte; n++)

  00064	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  0006c	eb 0b		 jmp	 SHORT $LN5@zip64local@4
$LN4@zip64local@4:
  0006e	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  00072	83 c0 01	 add	 eax, 1
  00075	89 44 24 20	 mov	 DWORD PTR n$[rsp], eax
$LN5@zip64local@4:
  00079	8b 44 24 58	 mov	 eax, DWORD PTR nbByte$[rsp]
  0007d	39 44 24 20	 cmp	 DWORD PTR n$[rsp], eax
  00081	7d 0c		 jge	 SHORT $LN3@zip64local@4

; 299  :         {
; 300  :           buf[n] = 0xff;

  00083	48 63 44 24 20	 movsxd	 rax, DWORD PTR n$[rsp]
  00088	c6 44 04 28 ff	 mov	 BYTE PTR buf$[rsp+rax], 255 ; 000000ffH

; 301  :         }

  0008d	eb df		 jmp	 SHORT $LN4@zip64local@4
$LN3@zip64local@4:
$LN6@zip64local@4:

; 302  :       }
; 303  : 
; 304  :     if (ZWRITE64(*pzlib_filefunc_def,filestream,buf,nbByte)!=(uLong)nbByte)

  0008f	44 8b 4c 24 58	 mov	 r9d, DWORD PTR nbByte$[rsp]
  00094	4c 8d 44 24 28	 lea	 r8, QWORD PTR buf$[rsp]
  00099	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  0009e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  000a3	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  000a7	48 8b 44 24 40	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  000ac	ff 50 10	 call	 QWORD PTR [rax+16]
  000af	3b 44 24 58	 cmp	 eax, DWORD PTR nbByte$[rsp]
  000b3	74 09		 je	 SHORT $LN2@zip64local@4

; 305  :         return ZIP_ERRNO;

  000b5	b8 ff ff ff ff	 mov	 eax, -1
  000ba	eb 04		 jmp	 SHORT $LN10@zip64local@4

; 306  :     else

  000bc	eb 02		 jmp	 SHORT $LN1@zip64local@4
$LN2@zip64local@4:

; 307  :         return ZIP_OK;

  000be	33 c0		 xor	 eax, eax
$LN1@zip64local@4:
$LN10@zip64local@4:

; 308  : }

  000c0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c4	c3		 ret	 0
zip64local_putValue ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT init_linkedlist
_TEXT	SEGMENT
ll$ = 8
init_linkedlist PROC					; COMDAT

; 214  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 215  :     ll->first_block = ll->last_block = NULL;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR ll$[rsp]
  0000a	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00012	48 8b 44 24 08	 mov	 rax, QWORD PTR ll$[rsp]
  00017	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 216  : }

  0001e	c3		 ret	 0
init_linkedlist ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$free_datablock DD imagerel free_datablock
	DD	imagerel free_datablock+66
	DD	imagerel $unwind$free_datablock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$free_datablock DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT free_datablock
_TEXT	SEGMENT
ldinext$80471 = 32
ldi$ = 64
free_datablock PROC					; COMDAT

; 204  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN3@free_datab:

; 205  :     while (ldi!=NULL)

  00009	48 83 7c 24 40
	00		 cmp	 QWORD PTR ldi$[rsp], 0
  0000f	74 2c		 je	 SHORT $LN2@free_datab

; 206  :     {
; 207  :         linkedlist_datablock_internal* ldinext = ldi->next_datablock;

  00011	48 8b 44 24 40	 mov	 rax, QWORD PTR ldi$[rsp]
  00016	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00019	48 89 44 24 20	 mov	 QWORD PTR ldinext$80471[rsp], rax

; 208  :         TRYFREE(ldi);

  0001e	48 83 7c 24 40
	00		 cmp	 QWORD PTR ldi$[rsp], 0
  00024	74 0b		 je	 SHORT $LN1@free_datab
  00026	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ldi$[rsp]
  0002b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN1@free_datab:

; 209  :         ldi = ldinext;

  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR ldinext$80471[rsp]
  00036	48 89 44 24 40	 mov	 QWORD PTR ldi$[rsp], rax

; 210  :     }

  0003b	eb cc		 jmp	 SHORT $LN3@free_datab
$LN2@free_datab:

; 211  : }

  0003d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00041	c3		 ret	 0
free_datablock ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$allocate_new_datablock DD imagerel allocate_new_datablock
	DD	imagerel allocate_new_datablock+74
	DD	imagerel $unwind$allocate_new_datablock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$allocate_new_datablock DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT allocate_new_datablock
_TEXT	SEGMENT
ldi$ = 32
allocate_new_datablock PROC				; COMDAT

; 190  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 191  :     linkedlist_datablock_internal* ldi;
; 192  :     ldi = (linkedlist_datablock_internal*)
; 193  :                  ALLOC(sizeof(linkedlist_datablock_internal));

  00004	b9 08 10 00 00	 mov	 ecx, 4104		; 00001008H
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0000f	48 89 44 24 20	 mov	 QWORD PTR ldi$[rsp], rax

; 194  :     if (ldi!=NULL)

  00014	48 83 7c 24 20
	00		 cmp	 QWORD PTR ldi$[rsp], 0
  0001a	74 24		 je	 SHORT $LN1@allocate_n

; 195  :     {
; 196  :         ldi->next_datablock = NULL ;

  0001c	48 8b 44 24 20	 mov	 rax, QWORD PTR ldi$[rsp]
  00021	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 197  :         ldi->filled_in_this_block = 0 ;

  00028	48 8b 44 24 20	 mov	 rax, QWORD PTR ldi$[rsp]
  0002d	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [rax+12], 0

; 198  :         ldi->avail_in_this_block = SIZEDATA_INDATABLOCK ;

  00034	48 8b 44 24 20	 mov	 rax, QWORD PTR ldi$[rsp]
  00039	c7 40 08 f0 0f
	00 00		 mov	 DWORD PTR [rax+8], 4080	; 00000ff0H
$LN1@allocate_n:

; 199  :     }
; 200  :     return ldi;

  00040	48 8b 44 24 20	 mov	 rax, QWORD PTR ldi$[rsp]

; 201  : }

  00045	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00049	c3		 ret	 0
allocate_new_datablock ENDP
_TEXT	ENDS
;	COMDAT pdata
; File d:\lp_solve_5.5\xli\xli_zimpl\ziboptvs10\thirdparty\zlib\contrib\minizip\crypt.h
pdata	SEGMENT
$pdata$update_keys DD imagerel update_keys
	DD	imagerel update_keys+194
	DD	imagerel $unwind$update_keys
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$update_keys DD 011301H
	DD	02213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT update_keys
_TEXT	SEGMENT
keyshift$80402 = 0
pkeys$ = 32
pcrc_32_tab$ = 40
c$ = 48
update_keys PROC					; COMDAT

; 49   : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 18	 sub	 rsp, 24

; 50   :     (*(pkeys+0)) = CRC32((*(pkeys+0)), c);

  00013	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  00018	8b 4c 24 30	 mov	 ecx, DWORD PTR c$[rsp]
  0001c	8b 00		 mov	 eax, DWORD PTR [rax]
  0001e	33 c1		 xor	 eax, ecx
  00020	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00025	48 63 c8	 movsxd	 rcx, eax
  00028	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  0002d	8b 10		 mov	 edx, DWORD PTR [rax]
  0002f	c1 ea 08	 shr	 edx, 8
  00032	48 8b 44 24 28	 mov	 rax, QWORD PTR pcrc_32_tab$[rsp]
  00037	8b 0c 88	 mov	 ecx, DWORD PTR [rax+rcx*4]
  0003a	33 ca		 xor	 ecx, edx
  0003c	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  00041	89 08		 mov	 DWORD PTR [rax], ecx

; 51   :     (*(pkeys+1)) += (*(pkeys+0)) & 0xff;

  00043	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  00048	8b 08		 mov	 ecx, DWORD PTR [rax]
  0004a	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  00055	03 48 04	 add	 ecx, DWORD PTR [rax+4]
  00058	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  0005d	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 52   :     (*(pkeys+1)) = (*(pkeys+1)) * 134775813L + 1;

  00060	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  00065	8b 48 04	 mov	 ecx, DWORD PTR [rax+4]
  00068	69 c9 05 84 08
	08		 imul	 ecx, 134775813		; 08088405H
  0006e	83 c1 01	 add	 ecx, 1
  00071	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  00076	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 53   :     {
; 54   :       register int keyshift = (int)((*(pkeys+1)) >> 24);

  00079	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  0007e	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00081	c1 e8 18	 shr	 eax, 24
  00084	89 04 24	 mov	 DWORD PTR keyshift$80402[rsp], eax

; 55   :       (*(pkeys+2)) = CRC32((*(pkeys+2)), keyshift);

  00087	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  0008c	8b 0c 24	 mov	 ecx, DWORD PTR keyshift$80402[rsp]
  0008f	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00092	33 c1		 xor	 eax, ecx
  00094	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00099	48 63 c8	 movsxd	 rcx, eax
  0009c	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  000a1	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  000a4	c1 ea 08	 shr	 edx, 8
  000a7	48 8b 44 24 28	 mov	 rax, QWORD PTR pcrc_32_tab$[rsp]
  000ac	8b 0c 88	 mov	 ecx, DWORD PTR [rax+rcx*4]
  000af	33 ca		 xor	 ecx, edx
  000b1	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  000b6	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 56   :     }
; 57   :     return c;

  000b9	8b 44 24 30	 mov	 eax, DWORD PTR c$[rsp]

; 58   : }

  000bd	48 83 c4 18	 add	 rsp, 24
  000c1	c3		 ret	 0
update_keys ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$decrypt_byte DD imagerel decrypt_byte
	DD	imagerel decrypt_byte+58
	DD	imagerel $unwind$decrypt_byte
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$decrypt_byte DD 010e01H
	DD	0220eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT decrypt_byte
_TEXT	SEGMENT
temp$ = 0
pkeys$ = 32
pcrc_32_tab$ = 40
decrypt_byte PROC					; COMDAT

; 36   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 37   :     unsigned temp;  /* POTENTIAL BUG:  temp*(temp^1) may overflow in an
; 38   :                      * unpredictable manner on 16-bit systems; not a problem
; 39   :                      * with any known compiler so far, though */
; 40   : 
; 41   :     temp = ((unsigned)(*(pkeys+2)) & 0xffff) | 2;

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR pkeys$[rsp]
  00013	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00016	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0001b	83 c8 02	 or	 eax, 2
  0001e	89 04 24	 mov	 DWORD PTR temp$[rsp], eax

; 42   :     return (int)(((temp * (temp ^ 1)) >> 8) & 0xff);

  00021	8b 0c 24	 mov	 ecx, DWORD PTR temp$[rsp]
  00024	83 f1 01	 xor	 ecx, 1
  00027	8b 04 24	 mov	 eax, DWORD PTR temp$[rsp]
  0002a	0f af c1	 imul	 eax, ecx
  0002d	c1 e8 08	 shr	 eax, 8
  00030	25 ff 00 00 00	 and	 eax, 255		; 000000ffH

; 43   : }

  00035	48 83 c4 18	 add	 rsp, 24
  00039	c3		 ret	 0
decrypt_byte ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files\microsoft visual studio 9.0\vc\include\time.inl
pdata	SEGMENT
$pdata$time DD	imagerel time
	DD	imagerel time+25
	DD	imagerel $unwind$time
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$time DD	010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT time
_TEXT	SEGMENT
_Time$ = 48
time	PROC						; COMDAT

; 134  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 135  :     return _time64(_Time);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Time$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__time64

; 136  : }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
time	ENDP
PUBLIC	Write_GlobalComment
;	COMDAT pdata
; File d:\lp_solve_5.5\xli\xli_zimpl\ziboptvs10\thirdparty\zlib\contrib\minizip\zip.c
pdata	SEGMENT
$pdata$Write_GlobalComment DD imagerel $LN6
	DD	imagerel $LN6+159
	DD	imagerel $unwind$Write_GlobalComment
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Write_GlobalComment DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Write_GlobalComment
_TEXT	SEGMENT
err$ = 32
size_global_comment$ = 36
zi$ = 64
global_comment$ = 72
Write_GlobalComment PROC				; COMDAT

; 1862 : {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1863 :   int err = ZIP_OK;

  0000e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1864 :   uInt size_global_comment = 0;

  00016	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR size_global_comment$[rsp], 0

; 1865 : 
; 1866 :   if(global_comment != NULL)

  0001e	48 83 7c 24 48
	00		 cmp	 QWORD PTR global_comment$[rsp], 0
  00024	74 0e		 je	 SHORT $LN3@Write_Glob

; 1867 :     size_global_comment = (uInt)strlen(global_comment);

  00026	48 8b 4c 24 48	 mov	 rcx, QWORD PTR global_comment$[rsp]
  0002b	e8 00 00 00 00	 call	 strlen
  00030	89 44 24 24	 mov	 DWORD PTR size_global_comment$[rsp], eax
$LN3@Write_Glob:

; 1868 : 
; 1869 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_global_comment,2);

  00034	44 8b 44 24 24	 mov	 r8d, DWORD PTR size_global_comment$[rsp]
  00039	41 b9 02 00 00
	00		 mov	 r9d, 2
  0003f	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  00044	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00048	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0004d	e8 00 00 00 00	 call	 zip64local_putValue
  00052	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax

; 1870 : 
; 1871 :   if (err == ZIP_OK && size_global_comment > 0)

  00056	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  0005b	75 39		 jne	 SHORT $LN2@Write_Glob
  0005d	83 7c 24 24 00	 cmp	 DWORD PTR size_global_comment$[rsp], 0
  00062	76 32		 jbe	 SHORT $LN2@Write_Glob

; 1872 :   {
; 1873 :     if (ZWRITE64(zi->z_filefunc,zi->filestream, global_comment, size_global_comment) != size_global_comment)

  00064	44 8b 4c 24 24	 mov	 r9d, DWORD PTR size_global_comment$[rsp]
  00069	4c 8b 44 24 48	 mov	 r8, QWORD PTR global_comment$[rsp]
  0006e	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  00073	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00077	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0007c	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00080	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00085	ff 50 10	 call	 QWORD PTR [rax+16]
  00088	3b 44 24 24	 cmp	 eax, DWORD PTR size_global_comment$[rsp]
  0008c	74 08		 je	 SHORT $LN1@Write_Glob

; 1874 :       err = ZIP_ERRNO;

  0008e	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN1@Write_Glob:
$LN2@Write_Glob:

; 1875 :   }
; 1876 :   return err;

  00096	8b 44 24 20	 mov	 eax, DWORD PTR err$[rsp]

; 1877 : }

  0009a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009e	c3		 ret	 0
Write_GlobalComment ENDP
_TEXT	ENDS
PUBLIC	Write_EndOfCentralDirectoryRecord
;	COMDAT pdata
pdata	SEGMENT
$pdata$Write_EndOfCentralDirectoryRecord DD imagerel $LN15
	DD	imagerel $LN15+528
	DD	imagerel $unwind$Write_EndOfCentralDirectoryRecord
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Write_EndOfCentralDirectoryRecord DD 011201H
	DD	06212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Write_EndOfCentralDirectoryRecord
_TEXT	SEGMENT
err$ = 32
pos$81516 = 40
zi$ = 64
size_centraldir$ = 72
centraldir_pos_inzip$ = 80
Write_EndOfCentralDirectoryRecord PROC			; COMDAT

; 1814 : {

$LN15:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1815 :   int err = ZIP_OK;

  00012	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1816 : 
; 1817 :   /*signature*/
; 1818 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ENDHEADERMAGIC,4);

  0001a	41 b9 04 00 00
	00		 mov	 r9d, 4
  00020	41 b8 50 4b 05
	06		 mov	 r8d, 101010256		; 06054b50H
  00026	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  0002b	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00034	e8 00 00 00 00	 call	 zip64local_putValue
  00039	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax

; 1819 : 
; 1820 :   if (err==ZIP_OK) /* number of this disk */

  0003d	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  00042	75 20		 jne	 SHORT $LN12@Write_EndO

; 1821 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);

  00044	41 b9 02 00 00
	00		 mov	 r9d, 2
  0004a	45 33 c0	 xor	 r8d, r8d
  0004d	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  00052	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00056	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0005b	e8 00 00 00 00	 call	 zip64local_putValue
  00060	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN12@Write_EndO:

; 1822 : 
; 1823 :   if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  00064	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  00069	75 20		 jne	 SHORT $LN11@Write_EndO

; 1824 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);

  0006b	41 b9 02 00 00
	00		 mov	 r9d, 2
  00071	45 33 c0	 xor	 r8d, r8d
  00074	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  00079	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  0007d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00082	e8 00 00 00 00	 call	 zip64local_putValue
  00087	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN11@Write_EndO:

; 1825 : 
; 1826 :   if (err==ZIP_OK) /* total number of entries in the central dir on this disk */

  0008b	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  00090	75 60		 jne	 SHORT $LN10@Write_EndO

; 1827 :   {
; 1828 :     {
; 1829 :       if(zi->number_entry >= 0xFFFF)

  00092	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00097	48 81 b8 58 01
	01 00 ff ff 00
	00		 cmp	 QWORD PTR [rax+65880], 65535 ; 0000ffffH
  000a2	72 25		 jb	 SHORT $LN9@Write_EndO

; 1830 :         err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xffff,2); // use value in ZIP64 record

  000a4	41 b9 02 00 00
	00		 mov	 r9d, 2
  000aa	41 b8 ff ff 00
	00		 mov	 r8d, 65535		; 0000ffffH
  000b0	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  000b5	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  000b9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  000be	e8 00 00 00 00	 call	 zip64local_putValue
  000c3	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax

; 1831 :       else

  000c7	eb 29		 jmp	 SHORT $LN8@Write_EndO
$LN9@Write_EndO:

; 1832 :         err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);

  000c9	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  000ce	44 8b 80 58 01
	01 00		 mov	 r8d, DWORD PTR [rax+65880]
  000d5	41 b9 02 00 00
	00		 mov	 r9d, 2
  000db	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  000e0	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  000e4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  000e9	e8 00 00 00 00	 call	 zip64local_putValue
  000ee	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN8@Write_EndO:
$LN10@Write_EndO:

; 1833 :     }
; 1834 :   }
; 1835 : 
; 1836 :   if (err==ZIP_OK) /* total number of entries in the central dir */

  000f2	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  000f7	75 60		 jne	 SHORT $LN7@Write_EndO

; 1837 :   {
; 1838 :     if(zi->number_entry >= 0xFFFF)

  000f9	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  000fe	48 81 b8 58 01
	01 00 ff ff 00
	00		 cmp	 QWORD PTR [rax+65880], 65535 ; 0000ffffH
  00109	72 25		 jb	 SHORT $LN6@Write_EndO

; 1839 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xffff,2); // use value in ZIP64 record

  0010b	41 b9 02 00 00
	00		 mov	 r9d, 2
  00111	41 b8 ff ff 00
	00		 mov	 r8d, 65535		; 0000ffffH
  00117	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  0011c	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00120	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00125	e8 00 00 00 00	 call	 zip64local_putValue
  0012a	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax

; 1840 :     else

  0012e	eb 29		 jmp	 SHORT $LN5@Write_EndO
$LN6@Write_EndO:

; 1841 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);

  00130	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00135	44 8b 80 58 01
	01 00		 mov	 r8d, DWORD PTR [rax+65880]
  0013c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00142	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  00147	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  0014b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00150	e8 00 00 00 00	 call	 zip64local_putValue
  00155	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN5@Write_EndO:
$LN7@Write_EndO:

; 1842 :   }
; 1843 : 
; 1844 :   if (err==ZIP_OK) /* size of the central directory */

  00159	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  0015e	75 22		 jne	 SHORT $LN4@Write_EndO

; 1845 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_centraldir,4);

  00160	44 8b 44 24 48	 mov	 r8d, DWORD PTR size_centraldir$[rsp]
  00165	41 b9 04 00 00
	00		 mov	 r9d, 4
  0016b	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  00170	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00174	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00179	e8 00 00 00 00	 call	 zip64local_putValue
  0017e	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN4@Write_EndO:

; 1846 : 
; 1847 :   if (err==ZIP_OK) /* offset of start of central directory with respect to the starting disk number */

  00182	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  00187	75 7e		 jne	 SHORT $LN3@Write_EndO

; 1848 :   {
; 1849 :     ZPOS64_T pos = centraldir_pos_inzip - zi->add_position_when_writting_offset;

  00189	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0018e	48 8b 89 50 01
	01 00		 mov	 rcx, QWORD PTR [rcx+65872]
  00195	48 8b 44 24 50	 mov	 rax, QWORD PTR centraldir_pos_inzip$[rsp]
  0019a	48 2b c1	 sub	 rax, rcx
  0019d	48 89 44 24 28	 mov	 QWORD PTR pos$81516[rsp], rax

; 1850 :     if(pos >= 0xffffffff)

  001a2	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  001a7	48 39 44 24 28	 cmp	 QWORD PTR pos$81516[rsp], rax
  001ac	72 25		 jb	 SHORT $LN2@Write_EndO

; 1851 :     {
; 1852 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (uLong)0xffffffff,4);

  001ae	41 b9 04 00 00
	00		 mov	 r9d, 4
  001b4	41 b8 ff ff ff
	ff		 mov	 r8d, -1			; ffffffffH
  001ba	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  001bf	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  001c3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  001c8	e8 00 00 00 00	 call	 zip64local_putValue
  001cd	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax

; 1853 :     }
; 1854 :     else

  001d1	eb 34		 jmp	 SHORT $LN1@Write_EndO
$LN2@Write_EndO:

; 1855 :                   err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (uLong)(centraldir_pos_inzip - zi->add_position_when_writting_offset),4);

  001d3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  001d8	48 8b 89 50 01
	01 00		 mov	 rcx, QWORD PTR [rcx+65872]
  001df	48 8b 44 24 50	 mov	 rax, QWORD PTR centraldir_pos_inzip$[rsp]
  001e4	48 2b c1	 sub	 rax, rcx
  001e7	44 8b c0	 mov	 r8d, eax
  001ea	41 b9 04 00 00
	00		 mov	 r9d, 4
  001f0	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  001f5	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  001f9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  001fe	e8 00 00 00 00	 call	 zip64local_putValue
  00203	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN1@Write_EndO:
$LN3@Write_EndO:

; 1856 :   }
; 1857 : 
; 1858 :    return err;

  00207	8b 44 24 20	 mov	 eax, DWORD PTR err$[rsp]

; 1859 : }

  0020b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0020f	c3		 ret	 0
Write_EndOfCentralDirectoryRecord ENDP
_TEXT	ENDS
PUBLIC	Write_Zip64EndOfCentralDirectoryRecord
;	COMDAT pdata
pdata	SEGMENT
$pdata$Write_Zip64EndOfCentralDirectoryRecord DD imagerel $LN12
	DD	imagerel $LN12+484
	DD	imagerel $unwind$Write_Zip64EndOfCentralDirectoryRecord
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Write_Zip64EndOfCentralDirectoryRecord DD 011201H
	DD	06212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Write_Zip64EndOfCentralDirectoryRecord
_TEXT	SEGMENT
Zip64DataSize$ = 32
err$ = 36
pos$81487 = 40
zi$ = 64
size_centraldir$ = 72
centraldir_pos_inzip$ = 80
Write_Zip64EndOfCentralDirectoryRecord PROC		; COMDAT

; 1775 : {

$LN12:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1776 :   int err = ZIP_OK;

  00012	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1777 : 
; 1778 :   uLong Zip64DataSize = 44;

  0001a	c7 44 24 20 2c
	00 00 00	 mov	 DWORD PTR Zip64DataSize$[rsp], 44 ; 0000002cH

; 1779 : 
; 1780 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ZIP64ENDHEADERMAGIC,4);

  00022	41 b9 04 00 00
	00		 mov	 r9d, 4
  00028	41 b8 50 4b 06
	06		 mov	 r8d, 101075792		; 06064b50H
  0002e	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  00033	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00037	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0003c	e8 00 00 00 00	 call	 zip64local_putValue
  00041	89 44 24 24	 mov	 DWORD PTR err$[rsp], eax

; 1781 : 
; 1782 :   if (err==ZIP_OK) /* size of this 'zip64 end of central directory' */

  00045	83 7c 24 24 00	 cmp	 DWORD PTR err$[rsp], 0
  0004a	75 22		 jne	 SHORT $LN9@Write_Zip6

; 1783 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(ZPOS64_T)Zip64DataSize,8); // why ZPOS64_T of this ?

  0004c	44 8b 44 24 20	 mov	 r8d, DWORD PTR Zip64DataSize$[rsp]
  00051	41 b9 08 00 00
	00		 mov	 r9d, 8
  00057	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  0005c	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00060	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00065	e8 00 00 00 00	 call	 zip64local_putValue
  0006a	89 44 24 24	 mov	 DWORD PTR err$[rsp], eax
$LN9@Write_Zip6:

; 1784 : 
; 1785 :   if (err==ZIP_OK) /* version made by */

  0006e	83 7c 24 24 00	 cmp	 DWORD PTR err$[rsp], 0
  00073	75 23		 jne	 SHORT $LN8@Write_Zip6

; 1786 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);

  00075	41 b9 02 00 00
	00		 mov	 r9d, 2
  0007b	41 b8 2d 00 00
	00		 mov	 r8d, 45			; 0000002dH
  00081	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  00086	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  0008a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0008f	e8 00 00 00 00	 call	 zip64local_putValue
  00094	89 44 24 24	 mov	 DWORD PTR err$[rsp], eax
$LN8@Write_Zip6:

; 1787 : 
; 1788 :   if (err==ZIP_OK) /* version needed */

  00098	83 7c 24 24 00	 cmp	 DWORD PTR err$[rsp], 0
  0009d	75 23		 jne	 SHORT $LN7@Write_Zip6

; 1789 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);

  0009f	41 b9 02 00 00
	00		 mov	 r9d, 2
  000a5	41 b8 2d 00 00
	00		 mov	 r8d, 45			; 0000002dH
  000ab	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  000b0	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  000b4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  000b9	e8 00 00 00 00	 call	 zip64local_putValue
  000be	89 44 24 24	 mov	 DWORD PTR err$[rsp], eax
$LN7@Write_Zip6:

; 1790 : 
; 1791 :   if (err==ZIP_OK) /* number of this disk */

  000c2	83 7c 24 24 00	 cmp	 DWORD PTR err$[rsp], 0
  000c7	75 20		 jne	 SHORT $LN6@Write_Zip6

; 1792 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  000c9	41 b9 04 00 00
	00		 mov	 r9d, 4
  000cf	45 33 c0	 xor	 r8d, r8d
  000d2	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  000d7	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  000db	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  000e0	e8 00 00 00 00	 call	 zip64local_putValue
  000e5	89 44 24 24	 mov	 DWORD PTR err$[rsp], eax
$LN6@Write_Zip6:

; 1793 : 
; 1794 :   if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  000e9	83 7c 24 24 00	 cmp	 DWORD PTR err$[rsp], 0
  000ee	75 20		 jne	 SHORT $LN5@Write_Zip6

; 1795 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  000f0	41 b9 04 00 00
	00		 mov	 r9d, 4
  000f6	45 33 c0	 xor	 r8d, r8d
  000f9	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  000fe	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00102	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00107	e8 00 00 00 00	 call	 zip64local_putValue
  0010c	89 44 24 24	 mov	 DWORD PTR err$[rsp], eax
$LN5@Write_Zip6:

; 1796 : 
; 1797 :   if (err==ZIP_OK) /* total number of entries in the central dir on this disk */

  00110	83 7c 24 24 00	 cmp	 DWORD PTR err$[rsp], 0
  00115	75 29		 jne	 SHORT $LN4@Write_Zip6

; 1798 :     err = zip64local_putValue(&zi->z_filefunc, zi->filestream, zi->number_entry, 8);

  00117	41 b9 08 00 00
	00		 mov	 r9d, 8
  0011d	4c 8b 44 24 40	 mov	 r8, QWORD PTR zi$[rsp]
  00122	4d 8b 80 58 01
	01 00		 mov	 r8, QWORD PTR [r8+65880]
  00129	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  0012e	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00132	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00137	e8 00 00 00 00	 call	 zip64local_putValue
  0013c	89 44 24 24	 mov	 DWORD PTR err$[rsp], eax
$LN4@Write_Zip6:

; 1799 : 
; 1800 :   if (err==ZIP_OK) /* total number of entries in the central dir */

  00140	83 7c 24 24 00	 cmp	 DWORD PTR err$[rsp], 0
  00145	75 29		 jne	 SHORT $LN3@Write_Zip6

; 1801 :     err = zip64local_putValue(&zi->z_filefunc, zi->filestream, zi->number_entry, 8);

  00147	41 b9 08 00 00
	00		 mov	 r9d, 8
  0014d	4c 8b 44 24 40	 mov	 r8, QWORD PTR zi$[rsp]
  00152	4d 8b 80 58 01
	01 00		 mov	 r8, QWORD PTR [r8+65880]
  00159	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  0015e	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00162	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00167	e8 00 00 00 00	 call	 zip64local_putValue
  0016c	89 44 24 24	 mov	 DWORD PTR err$[rsp], eax
$LN3@Write_Zip6:

; 1802 : 
; 1803 :   if (err==ZIP_OK) /* size of the central directory */

  00170	83 7c 24 24 00	 cmp	 DWORD PTR err$[rsp], 0
  00175	75 22		 jne	 SHORT $LN2@Write_Zip6

; 1804 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(ZPOS64_T)size_centraldir,8);

  00177	44 8b 44 24 48	 mov	 r8d, DWORD PTR size_centraldir$[rsp]
  0017c	41 b9 08 00 00
	00		 mov	 r9d, 8
  00182	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  00187	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  0018b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00190	e8 00 00 00 00	 call	 zip64local_putValue
  00195	89 44 24 24	 mov	 DWORD PTR err$[rsp], eax
$LN2@Write_Zip6:

; 1805 : 
; 1806 :   if (err==ZIP_OK) /* offset of start of central directory with respect to the starting disk number */

  00199	83 7c 24 24 00	 cmp	 DWORD PTR err$[rsp], 0
  0019e	75 3b		 jne	 SHORT $LN1@Write_Zip6

; 1807 :   {
; 1808 :     ZPOS64_T pos = centraldir_pos_inzip - zi->add_position_when_writting_offset;

  001a0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  001a5	48 8b 89 50 01
	01 00		 mov	 rcx, QWORD PTR [rcx+65872]
  001ac	48 8b 44 24 50	 mov	 rax, QWORD PTR centraldir_pos_inzip$[rsp]
  001b1	48 2b c1	 sub	 rax, rcx
  001b4	48 89 44 24 28	 mov	 QWORD PTR pos$81487[rsp], rax

; 1809 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (ZPOS64_T)pos,8);

  001b9	41 b9 08 00 00
	00		 mov	 r9d, 8
  001bf	4c 8b 44 24 28	 mov	 r8, QWORD PTR pos$81487[rsp]
  001c4	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  001c9	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  001cd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  001d2	e8 00 00 00 00	 call	 zip64local_putValue
  001d7	89 44 24 24	 mov	 DWORD PTR err$[rsp], eax
$LN1@Write_Zip6:

; 1810 :   }
; 1811 :   return err;

  001db	8b 44 24 24	 mov	 eax, DWORD PTR err$[rsp]

; 1812 : }

  001df	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001e3	c3		 ret	 0
Write_Zip64EndOfCentralDirectoryRecord ENDP
_TEXT	ENDS
PUBLIC	Write_Zip64EndOfCentralDirectoryLocator
;	COMDAT pdata
pdata	SEGMENT
$pdata$Write_Zip64EndOfCentralDirectoryLocator DD imagerel $LN6
	DD	imagerel $LN6+213
	DD	imagerel $unwind$Write_Zip64EndOfCentralDirectoryLocator
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Write_Zip64EndOfCentralDirectoryLocator DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Write_Zip64EndOfCentralDirectoryLocator
_TEXT	SEGMENT
err$ = 32
pos$ = 40
zi$ = 64
zip64eocd_pos_inzip$ = 72
Write_Zip64EndOfCentralDirectoryLocator PROC		; COMDAT

; 1753 : {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1754 :   int err = ZIP_OK;

  0000e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1755 :   ZPOS64_T pos = zip64eocd_pos_inzip - zi->add_position_when_writting_offset;

  00016	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0001b	48 8b 89 50 01
	01 00		 mov	 rcx, QWORD PTR [rcx+65872]
  00022	48 8b 44 24 48	 mov	 rax, QWORD PTR zip64eocd_pos_inzip$[rsp]
  00027	48 2b c1	 sub	 rax, rcx
  0002a	48 89 44 24 28	 mov	 QWORD PTR pos$[rsp], rax

; 1756 : 
; 1757 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ZIP64ENDLOCHEADERMAGIC,4);

  0002f	41 b9 04 00 00
	00		 mov	 r9d, 4
  00035	41 b8 50 4b 06
	07		 mov	 r8d, 117853008		; 07064b50H
  0003b	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  00040	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00044	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00049	e8 00 00 00 00	 call	 zip64local_putValue
  0004e	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax

; 1758 : 
; 1759 :   /*num disks*/
; 1760 :     if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  00052	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  00057	75 20		 jne	 SHORT $LN3@Write_Zip6@2

; 1761 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  00059	41 b9 04 00 00
	00		 mov	 r9d, 4
  0005f	45 33 c0	 xor	 r8d, r8d
  00062	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  00067	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  0006b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00070	e8 00 00 00 00	 call	 zip64local_putValue
  00075	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN3@Write_Zip6@2:

; 1762 : 
; 1763 :   /*relative offset*/
; 1764 :     if (err==ZIP_OK) /* Relative offset to the Zip64EndOfCentralDirectory */

  00079	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  0007e	75 22		 jne	 SHORT $LN2@Write_Zip6@2

; 1765 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, pos,8);

  00080	41 b9 08 00 00
	00		 mov	 r9d, 8
  00086	4c 8b 44 24 28	 mov	 r8, QWORD PTR pos$[rsp]
  0008b	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  00090	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00094	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00099	e8 00 00 00 00	 call	 zip64local_putValue
  0009e	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN2@Write_Zip6@2:

; 1766 : 
; 1767 :   /*total disks*/ /* Do not support spawning of disk so always say 1 here*/
; 1768 :     if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  000a2	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  000a7	75 23		 jne	 SHORT $LN1@Write_Zip6@2

; 1769 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)1,4);

  000a9	41 b9 04 00 00
	00		 mov	 r9d, 4
  000af	41 b8 01 00 00
	00		 mov	 r8d, 1
  000b5	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  000ba	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  000be	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  000c3	e8 00 00 00 00	 call	 zip64local_putValue
  000c8	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN1@Write_Zip6@2:

; 1770 : 
; 1771 :     return err;

  000cc	8b 44 24 20	 mov	 eax, DWORD PTR err$[rsp]

; 1772 : }

  000d0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d4	c3		 ret	 0
Write_Zip64EndOfCentralDirectoryLocator ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64FlushWriteBuffer DD imagerel zip64FlushWriteBuffer
	DD	imagerel zip64FlushWriteBuffer+383
	DD	imagerel $unwind$zip64FlushWriteBuffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64FlushWriteBuffer DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zip64FlushWriteBuffer
_TEXT	SEGMENT
err$ = 32
i$81322 = 36
t$81323 = 40
zi$ = 64
zip64FlushWriteBuffer PROC				; COMDAT

; 1363 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1364 :     int err=ZIP_OK;

  00009	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1365 : 
; 1366 :     if (zi->ci.encrypt != 0)

  00011	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00016	83 b8 08 01 01
	00 00		 cmp	 DWORD PTR [rax+65800], 0
  0001d	0f 84 a4 00 00
	00		 je	 $LN5@zip64Flush

; 1367 :     {
; 1368 : #ifndef NOCRYPT
; 1369 :         uInt i;
; 1370 :         int t;
; 1371 :         for (i=0;i<zi->ci.pos_in_buffered_data;i++)

  00023	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$81322[rsp], 0
  0002b	eb 0b		 jmp	 SHORT $LN4@zip64Flush
$LN3@zip64Flush:
  0002d	8b 44 24 24	 mov	 eax, DWORD PTR i$81322[rsp]
  00031	83 c0 01	 add	 eax, 1
  00034	89 44 24 24	 mov	 DWORD PTR i$81322[rsp], eax
$LN4@zip64Flush:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0003d	8b 80 d4 00 00
	00		 mov	 eax, DWORD PTR [rax+212]
  00043	39 44 24 24	 cmp	 DWORD PTR i$81322[rsp], eax
  00047	73 7e		 jae	 SHORT $LN2@zip64Flush

; 1372 :             zi->ci.buffered_data[i] = zencode(zi->ci.keys, zi->ci.pcrc_32_tab, zi->ci.buffered_data[i],t);

  00049	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  0004e	48 81 c1 28 01
	01 00		 add	 rcx, 65832		; 00010128H
  00055	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  0005a	48 8b 92 38 01
	01 00		 mov	 rdx, QWORD PTR [rdx+65848]
  00061	e8 00 00 00 00	 call	 decrypt_byte
  00066	89 44 24 28	 mov	 DWORD PTR t$81323[rsp], eax
  0006a	8b 4c 24 24	 mov	 ecx, DWORD PTR i$81322[rsp]
  0006e	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00073	44 0f b6 84 08
	00 01 00 00	 movzx	 r8d, BYTE PTR [rax+rcx+256]
  0007c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  00081	48 81 c1 28 01
	01 00		 add	 rcx, 65832		; 00010128H
  00088	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  0008d	48 8b 92 38 01
	01 00		 mov	 rdx, QWORD PTR [rdx+65848]
  00094	e8 00 00 00 00	 call	 update_keys
  00099	44 8b 5c 24 24	 mov	 r11d, DWORD PTR i$81322[rsp]
  0009e	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  000a3	42 0f b6 84 18
	00 01 00 00	 movzx	 eax, BYTE PTR [rax+r11+256]
  000ac	8b 54 24 28	 mov	 edx, DWORD PTR t$81323[rsp]
  000b0	33 d0		 xor	 edx, eax
  000b2	8b 4c 24 24	 mov	 ecx, DWORD PTR i$81322[rsp]
  000b6	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  000bb	88 94 08 00 01
	00 00		 mov	 BYTE PTR [rax+rcx+256], dl
  000c2	e9 66 ff ff ff	 jmp	 $LN3@zip64Flush
$LN2@zip64Flush:
$LN5@zip64Flush:

; 1373 : #endif
; 1374 :     }
; 1375 : 
; 1376 :     if (ZWRITE64(zi->z_filefunc,zi->filestream,zi->ci.buffered_data,zi->ci.pos_in_buffered_data) != zi->ci.pos_in_buffered_data)

  000c7	4c 8b 44 24 40	 mov	 r8, QWORD PTR zi$[rsp]
  000cc	49 81 c0 00 01
	00 00		 add	 r8, 256			; 00000100H
  000d3	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  000d8	44 8b 88 d4 00
	00 00		 mov	 r9d, DWORD PTR [rax+212]
  000df	48 8b 54 24 40	 mov	 rdx, QWORD PTR zi$[rsp]
  000e4	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  000e8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zi$[rsp]
  000ed	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  000f1	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  000f6	ff 50 10	 call	 QWORD PTR [rax+16]
  000f9	44 8b d8	 mov	 r11d, eax
  000fc	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00101	44 3b 98 d4 00
	00 00		 cmp	 r11d, DWORD PTR [rax+212]
  00108	74 08		 je	 SHORT $LN1@zip64Flush

; 1377 :       err = ZIP_ERRNO;

  0010a	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN1@zip64Flush:

; 1378 : 
; 1379 :     zi->ci.totalCompressedData += zi->ci.pos_in_buffered_data;

  00112	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00117	8b 88 d4 00 00
	00		 mov	 ecx, DWORD PTR [rax+212]
  0011d	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00122	48 03 88 18 01
	01 00		 add	 rcx, QWORD PTR [rax+65816]
  00129	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0012e	48 89 88 18 01
	01 00		 mov	 QWORD PTR [rax+65816], rcx

; 1380 : 
; 1381 : #ifdef HAVE_BZIP2
; 1382 :     if(zi->ci.method == Z_BZIP2ED)
; 1383 :     {
; 1384 :       zi->ci.totalUncompressedData += zi->ci.bstream.total_in_lo32;
; 1385 :       zi->ci.bstream.total_in_lo32 = 0;
; 1386 :       zi->ci.bstream.total_in_hi32 = 0;
; 1387 :     }
; 1388 :     else
; 1389 : #endif
; 1390 :     {
; 1391 :       zi->ci.totalUncompressedData += zi->ci.stream.total_in;

  00135	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0013a	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [rax+132]
  00140	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00145	48 03 88 20 01
	01 00		 add	 rcx, QWORD PTR [rax+65824]
  0014c	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  00151	48 89 88 20 01
	01 00		 mov	 QWORD PTR [rax+65824], rcx

; 1392 :       zi->ci.stream.total_in = 0;

  00158	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0015d	c7 80 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+132], 0

; 1393 :     }
; 1394 : 
; 1395 : 
; 1396 :     zi->ci.pos_in_buffered_data = 0;

  00167	48 8b 44 24 40	 mov	 rax, QWORD PTR zi$[rsp]
  0016c	c7 80 d4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+212], 0

; 1397 : 
; 1398 :     return err;

  00176	8b 44 24 20	 mov	 eax, DWORD PTR err$[rsp]

; 1399 : }

  0017a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0017e	c3		 ret	 0
zip64FlushWriteBuffer ENDP
_TEXT	ENDS
PUBLIC	Write_LocalFileHeader
;	COMDAT pdata
pdata	SEGMENT
$pdata$Write_LocalFileHeader DD imagerel $LN24
	DD	imagerel $LN24+1020
	DD	imagerel $unwind$Write_LocalFileHeader
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Write_LocalFileHeader DD 011801H
	DD	0a218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Write_LocalFileHeader
_TEXT	SEGMENT
size_extrafield$ = 32
size_filename$ = 36
err$ = 40
UncompressedSize$80981 = 48
DataSize$80979 = 56
HeaderID$80978 = 60
CompressedSize$80980 = 64
zi$ = 96
filename$ = 104
size_extrafield_local$ = 112
extrafield_local$ = 120
Write_LocalFileHeader PROC				; COMDAT

; 959  : {

$LN24:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 960  :   /* write the local header */
; 961  :   int err;
; 962  :   uInt size_filename = (uInt)strlen(filename);

  00018	48 8b 4c 24 68	 mov	 rcx, QWORD PTR filename$[rsp]
  0001d	e8 00 00 00 00	 call	 strlen
  00022	89 44 24 24	 mov	 DWORD PTR size_filename$[rsp], eax

; 963  :   uInt size_extrafield = size_extrafield_local;

  00026	8b 44 24 70	 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  0002a	89 44 24 20	 mov	 DWORD PTR size_extrafield$[rsp], eax

; 964  : 
; 965  :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)LOCALHEADERMAGIC, 4);

  0002e	41 b9 04 00 00
	00		 mov	 r9d, 4
  00034	41 b8 50 4b 03
	04		 mov	 r8d, 67324752		; 04034b50H
  0003a	48 8b 54 24 60	 mov	 rdx, QWORD PTR zi$[rsp]
  0003f	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00043	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  00048	e8 00 00 00 00	 call	 zip64local_putValue
  0004d	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax

; 966  : 
; 967  :   if (err==ZIP_OK)

  00051	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  00056	75 56		 jne	 SHORT $LN21@Write_Loca

; 968  :   {
; 969  :     if(zi->ci.zip64)

  00058	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  0005d	83 b8 0c 01 01
	00 00		 cmp	 DWORD PTR [rax+65804], 0
  00064	74 25		 je	 SHORT $LN20@Write_Loca

; 970  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);/* version needed to extract */

  00066	41 b9 02 00 00
	00		 mov	 r9d, 2
  0006c	41 b8 2d 00 00
	00		 mov	 r8d, 45			; 0000002dH
  00072	48 8b 54 24 60	 mov	 rdx, QWORD PTR zi$[rsp]
  00077	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  0007b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  00080	e8 00 00 00 00	 call	 zip64local_putValue
  00085	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax

; 971  :     else

  00089	eb 23		 jmp	 SHORT $LN19@Write_Loca
$LN20@Write_Loca:

; 972  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)20,2);/* version needed to extract */

  0008b	41 b9 02 00 00
	00		 mov	 r9d, 2
  00091	41 b8 14 00 00
	00		 mov	 r8d, 20
  00097	48 8b 54 24 60	 mov	 rdx, QWORD PTR zi$[rsp]
  0009c	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  000a0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  000a5	e8 00 00 00 00	 call	 zip64local_putValue
  000aa	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN19@Write_Loca:
$LN21@Write_Loca:

; 973  :   }
; 974  : 
; 975  :   if (err==ZIP_OK)

  000ae	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  000b3	75 29		 jne	 SHORT $LN18@Write_Loca

; 976  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.flag,2);

  000b5	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  000ba	44 8b 80 f4 00
	00 00		 mov	 r8d, DWORD PTR [rax+244]
  000c1	41 b9 02 00 00
	00		 mov	 r9d, 2
  000c7	48 8b 54 24 60	 mov	 rdx, QWORD PTR zi$[rsp]
  000cc	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  000d0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  000d5	e8 00 00 00 00	 call	 zip64local_putValue
  000da	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN18@Write_Loca:

; 977  : 
; 978  :   if (err==ZIP_OK)

  000de	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  000e3	75 29		 jne	 SHORT $LN17@Write_Loca

; 979  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.method,2);

  000e5	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  000ea	44 8b 80 f8 00
	00 00		 mov	 r8d, DWORD PTR [rax+248]
  000f1	41 b9 02 00 00
	00		 mov	 r9d, 2
  000f7	48 8b 54 24 60	 mov	 rdx, QWORD PTR zi$[rsp]
  000fc	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00100	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  00105	e8 00 00 00 00	 call	 zip64local_putValue
  0010a	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN17@Write_Loca:

; 980  : 
; 981  :   if (err==ZIP_OK)

  0010e	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  00113	75 29		 jne	 SHORT $LN16@Write_Loca

; 982  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.dosDate,4);

  00115	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  0011a	44 8b 80 00 01
	01 00		 mov	 r8d, DWORD PTR [rax+65792]
  00121	41 b9 04 00 00
	00		 mov	 r9d, 4
  00127	48 8b 54 24 60	 mov	 rdx, QWORD PTR zi$[rsp]
  0012c	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00130	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  00135	e8 00 00 00 00	 call	 zip64local_putValue
  0013a	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN16@Write_Loca:

; 983  : 
; 984  :   // CRC / Compressed size / Uncompressed size will be filled in later and rewritten later
; 985  :   if (err==ZIP_OK)

  0013e	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  00143	75 20		 jne	 SHORT $LN15@Write_Loca

; 986  :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* crc 32, unknown */

  00145	41 b9 04 00 00
	00		 mov	 r9d, 4
  0014b	45 33 c0	 xor	 r8d, r8d
  0014e	48 8b 54 24 60	 mov	 rdx, QWORD PTR zi$[rsp]
  00153	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00157	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  0015c	e8 00 00 00 00	 call	 zip64local_putValue
  00161	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN15@Write_Loca:

; 987  :   if (err==ZIP_OK)

  00165	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  0016a	75 53		 jne	 SHORT $LN14@Write_Loca

; 988  :   {
; 989  :     if(zi->ci.zip64)

  0016c	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  00171	83 b8 0c 01 01
	00 00		 cmp	 DWORD PTR [rax+65804], 0
  00178	74 25		 je	 SHORT $LN13@Write_Loca

; 990  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xFFFFFFFF,4); /* compressed size, unknown */

  0017a	41 b9 04 00 00
	00		 mov	 r9d, 4
  00180	41 b8 ff ff ff
	ff		 mov	 r8d, -1			; ffffffffH
  00186	48 8b 54 24 60	 mov	 rdx, QWORD PTR zi$[rsp]
  0018b	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  0018f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  00194	e8 00 00 00 00	 call	 zip64local_putValue
  00199	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax

; 991  :     else

  0019d	eb 20		 jmp	 SHORT $LN12@Write_Loca
$LN13@Write_Loca:

; 992  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* compressed size, unknown */

  0019f	41 b9 04 00 00
	00		 mov	 r9d, 4
  001a5	45 33 c0	 xor	 r8d, r8d
  001a8	48 8b 54 24 60	 mov	 rdx, QWORD PTR zi$[rsp]
  001ad	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  001b1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  001b6	e8 00 00 00 00	 call	 zip64local_putValue
  001bb	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN12@Write_Loca:
$LN14@Write_Loca:

; 993  :   }
; 994  :   if (err==ZIP_OK)

  001bf	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  001c4	75 53		 jne	 SHORT $LN11@Write_Loca

; 995  :   {
; 996  :     if(zi->ci.zip64)

  001c6	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  001cb	83 b8 0c 01 01
	00 00		 cmp	 DWORD PTR [rax+65804], 0
  001d2	74 25		 je	 SHORT $LN10@Write_Loca

; 997  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xFFFFFFFF,4); /* uncompressed size, unknown */

  001d4	41 b9 04 00 00
	00		 mov	 r9d, 4
  001da	41 b8 ff ff ff
	ff		 mov	 r8d, -1			; ffffffffH
  001e0	48 8b 54 24 60	 mov	 rdx, QWORD PTR zi$[rsp]
  001e5	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  001e9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  001ee	e8 00 00 00 00	 call	 zip64local_putValue
  001f3	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax

; 998  :     else

  001f7	eb 20		 jmp	 SHORT $LN9@Write_Loca
$LN10@Write_Loca:

; 999  :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* uncompressed size, unknown */

  001f9	41 b9 04 00 00
	00		 mov	 r9d, 4
  001ff	45 33 c0	 xor	 r8d, r8d
  00202	48 8b 54 24 60	 mov	 rdx, QWORD PTR zi$[rsp]
  00207	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  0020b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  00210	e8 00 00 00 00	 call	 zip64local_putValue
  00215	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN9@Write_Loca:
$LN11@Write_Loca:

; 1000 :   }
; 1001 : 
; 1002 :   if (err==ZIP_OK)

  00219	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  0021e	75 22		 jne	 SHORT $LN8@Write_Loca

; 1003 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_filename,2);

  00220	44 8b 44 24 24	 mov	 r8d, DWORD PTR size_filename$[rsp]
  00225	41 b9 02 00 00
	00		 mov	 r9d, 2
  0022b	48 8b 54 24 60	 mov	 rdx, QWORD PTR zi$[rsp]
  00230	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00234	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  00239	e8 00 00 00 00	 call	 zip64local_putValue
  0023e	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN8@Write_Loca:

; 1004 : 
; 1005 :   if(zi->ci.zip64)

  00242	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  00247	83 b8 0c 01 01
	00 00		 cmp	 DWORD PTR [rax+65804], 0
  0024e	74 0b		 je	 SHORT $LN7@Write_Loca

; 1006 :   {
; 1007 :     size_extrafield += 20;

  00250	8b 44 24 20	 mov	 eax, DWORD PTR size_extrafield$[rsp]
  00254	83 c0 14	 add	 eax, 20
  00257	89 44 24 20	 mov	 DWORD PTR size_extrafield$[rsp], eax
$LN7@Write_Loca:

; 1008 :   }
; 1009 : 
; 1010 :   if (err==ZIP_OK)

  0025b	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  00260	75 22		 jne	 SHORT $LN6@Write_Loca

; 1011 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_extrafield,2);

  00262	44 8b 44 24 20	 mov	 r8d, DWORD PTR size_extrafield$[rsp]
  00267	41 b9 02 00 00
	00		 mov	 r9d, 2
  0026d	48 8b 54 24 60	 mov	 rdx, QWORD PTR zi$[rsp]
  00272	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00276	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  0027b	e8 00 00 00 00	 call	 zip64local_putValue
  00280	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN6@Write_Loca:

; 1012 : 
; 1013 :   if ((err==ZIP_OK) && (size_filename > 0))

  00284	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  00289	75 39		 jne	 SHORT $LN5@Write_Loca
  0028b	83 7c 24 24 00	 cmp	 DWORD PTR size_filename$[rsp], 0
  00290	76 32		 jbe	 SHORT $LN5@Write_Loca

; 1014 :   {
; 1015 :     if (ZWRITE64(zi->z_filefunc,zi->filestream,filename,size_filename)!=size_filename)

  00292	44 8b 4c 24 24	 mov	 r9d, DWORD PTR size_filename$[rsp]
  00297	4c 8b 44 24 68	 mov	 r8, QWORD PTR filename$[rsp]
  0029c	48 8b 54 24 60	 mov	 rdx, QWORD PTR zi$[rsp]
  002a1	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  002a5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  002aa	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  002ae	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  002b3	ff 50 10	 call	 QWORD PTR [rax+16]
  002b6	3b 44 24 24	 cmp	 eax, DWORD PTR size_filename$[rsp]
  002ba	74 08		 je	 SHORT $LN4@Write_Loca

; 1016 :       err = ZIP_ERRNO;

  002bc	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN4@Write_Loca:
$LN5@Write_Loca:

; 1017 :   }
; 1018 : 
; 1019 :   if ((err==ZIP_OK) && (size_extrafield_local > 0))

  002c4	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  002c9	75 39		 jne	 SHORT $LN3@Write_Loca
  002cb	83 7c 24 70 00	 cmp	 DWORD PTR size_extrafield_local$[rsp], 0
  002d0	76 32		 jbe	 SHORT $LN3@Write_Loca

; 1020 :   {
; 1021 :     if (ZWRITE64(zi->z_filefunc, zi->filestream, extrafield_local, size_extrafield_local) != size_extrafield_local)

  002d2	44 8b 4c 24 70	 mov	 r9d, DWORD PTR size_extrafield_local$[rsp]
  002d7	4c 8b 44 24 78	 mov	 r8, QWORD PTR extrafield_local$[rsp]
  002dc	48 8b 54 24 60	 mov	 rdx, QWORD PTR zi$[rsp]
  002e1	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  002e5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  002ea	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  002ee	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  002f3	ff 50 10	 call	 QWORD PTR [rax+16]
  002f6	3b 44 24 70	 cmp	 eax, DWORD PTR size_extrafield_local$[rsp]
  002fa	74 08		 je	 SHORT $LN2@Write_Loca

; 1022 :       err = ZIP_ERRNO;

  002fc	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN2@Write_Loca:
$LN3@Write_Loca:

; 1023 :   }
; 1024 : 
; 1025 : 
; 1026 :   if ((err==ZIP_OK) && (zi->ci.zip64))

  00304	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  00309	0f 85 e4 00 00
	00		 jne	 $LN1@Write_Loca
  0030f	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  00314	83 b8 0c 01 01
	00 00		 cmp	 DWORD PTR [rax+65804], 0
  0031b	0f 84 d2 00 00
	00		 je	 $LN1@Write_Loca

; 1027 :   {
; 1028 :       // write the Zip64 extended info
; 1029 :       short HeaderID = 1;

  00321	b8 01 00 00 00	 mov	 eax, 1
  00326	66 89 44 24 3c	 mov	 WORD PTR HeaderID$80978[rsp], ax

; 1030 :       short DataSize = 16;

  0032b	b8 10 00 00 00	 mov	 eax, 16
  00330	66 89 44 24 38	 mov	 WORD PTR DataSize$80979[rsp], ax

; 1031 :       ZPOS64_T CompressedSize = 0;

  00335	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR CompressedSize$80980[rsp], 0

; 1032 :       ZPOS64_T UncompressedSize = 0;

  0033e	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR UncompressedSize$80981[rsp], 0

; 1033 : 
; 1034 :       // Remember position of Zip64 extended info for the local file header. (needed when we update size after done with file)
; 1035 :       zi->ci.pos_zip64extrainfo = ZTELL64(zi->z_filefunc,zi->filestream);

  00347	48 8b 54 24 60	 mov	 rdx, QWORD PTR zi$[rsp]
  0034c	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00350	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  00355	e8 00 00 00 00	 call	 call_ztell64
  0035a	4c 8b d8	 mov	 r11, rax
  0035d	48 8b 44 24 60	 mov	 rax, QWORD PTR zi$[rsp]
  00362	4c 89 98 10 01
	01 00		 mov	 QWORD PTR [rax+65808], r11

; 1036 : 
; 1037 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (short)HeaderID,2);

  00369	4c 0f bf 44 24
	3c		 movsx	 r8, WORD PTR HeaderID$80978[rsp]
  0036f	41 b9 02 00 00
	00		 mov	 r9d, 2
  00375	48 8b 54 24 60	 mov	 rdx, QWORD PTR zi$[rsp]
  0037a	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  0037e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  00383	e8 00 00 00 00	 call	 zip64local_putValue
  00388	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax

; 1038 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (short)DataSize,2);

  0038c	4c 0f bf 44 24
	38		 movsx	 r8, WORD PTR DataSize$80979[rsp]
  00392	41 b9 02 00 00
	00		 mov	 r9d, 2
  00398	48 8b 54 24 60	 mov	 rdx, QWORD PTR zi$[rsp]
  0039d	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  003a1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  003a6	e8 00 00 00 00	 call	 zip64local_putValue
  003ab	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax

; 1039 : 
; 1040 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)UncompressedSize,8);

  003af	41 b9 08 00 00
	00		 mov	 r9d, 8
  003b5	4c 8b 44 24 30	 mov	 r8, QWORD PTR UncompressedSize$80981[rsp]
  003ba	48 8b 54 24 60	 mov	 rdx, QWORD PTR zi$[rsp]
  003bf	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  003c3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  003c8	e8 00 00 00 00	 call	 zip64local_putValue
  003cd	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax

; 1041 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)CompressedSize,8);

  003d1	41 b9 08 00 00
	00		 mov	 r9d, 8
  003d7	4c 8b 44 24 40	 mov	 r8, QWORD PTR CompressedSize$80980[rsp]
  003dc	48 8b 54 24 60	 mov	 rdx, QWORD PTR zi$[rsp]
  003e1	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  003e5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR zi$[rsp]
  003ea	e8 00 00 00 00	 call	 zip64local_putValue
  003ef	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN1@Write_Loca:

; 1042 :   }
; 1043 : 
; 1044 :   return err;

  003f3	8b 44 24 28	 mov	 eax, DWORD PTR err$[rsp]

; 1045 : }

  003f7	48 83 c4 58	 add	 rsp, 88			; 00000058H
  003fb	c3		 ret	 0
Write_LocalFileHeader ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_SearchCentralDir DD imagerel zip64local_SearchCentralDir
	DD	imagerel zip64local_SearchCentralDir+535
	DD	imagerel $unwind$zip64local_SearchCentralDir
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_SearchCentralDir DD 010e01H
	DD	0c20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zip64local_SearchCentralDir
_TEXT	SEGMENT
uSizeFile$ = 32
uPosFound$ = 40
uBackRead$ = 48
uMaxBack$ = 56
buf$ = 64
i$80712 = 72
uReadPos$80711 = 80
uReadSize$80710 = 88
tv86 = 92
pzlib_filefunc_def$ = 112
filestream$ = 120
zip64local_SearchCentralDir PROC			; COMDAT

; 481  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 482  :   unsigned char* buf;
; 483  :   ZPOS64_T uSizeFile;
; 484  :   ZPOS64_T uBackRead;
; 485  :   ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */

  0000e	48 c7 44 24 38
	ff ff 00 00	 mov	 QWORD PTR uMaxBack$[rsp], 65535 ; 0000ffffH

; 486  :   ZPOS64_T uPosFound=0;

  00017	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR uPosFound$[rsp], 0

; 487  : 
; 488  :   if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00020	41 b9 02 00 00
	00		 mov	 r9d, 2
  00026	45 33 c0	 xor	 r8d, r8d
  00029	48 8b 54 24 78	 mov	 rdx, QWORD PTR filestream$[rsp]
  0002e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00033	e8 00 00 00 00	 call	 call_zseek64
  00038	85 c0		 test	 eax, eax
  0003a	74 07		 je	 SHORT $LN14@zip64local@5

; 489  :     return 0;

  0003c	33 c0		 xor	 eax, eax
  0003e	e9 cf 01 00 00	 jmp	 $LN15@zip64local@5
$LN14@zip64local@5:

; 490  : 
; 491  : 
; 492  :   uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  00043	48 8b 54 24 78	 mov	 rdx, QWORD PTR filestream$[rsp]
  00048	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0004d	e8 00 00 00 00	 call	 call_ztell64
  00052	48 89 44 24 20	 mov	 QWORD PTR uSizeFile$[rsp], rax

; 493  : 
; 494  :   if (uMaxBack>uSizeFile)

  00057	48 8b 44 24 20	 mov	 rax, QWORD PTR uSizeFile$[rsp]
  0005c	48 39 44 24 38	 cmp	 QWORD PTR uMaxBack$[rsp], rax
  00061	76 0a		 jbe	 SHORT $LN13@zip64local@5

; 495  :     uMaxBack = uSizeFile;

  00063	48 8b 44 24 20	 mov	 rax, QWORD PTR uSizeFile$[rsp]
  00068	48 89 44 24 38	 mov	 QWORD PTR uMaxBack$[rsp], rax
$LN13@zip64local@5:

; 496  : 
; 497  :   buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  0006d	b9 04 04 00 00	 mov	 ecx, 1028		; 00000404H
  00072	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00078	48 89 44 24 40	 mov	 QWORD PTR buf$[rsp], rax

; 498  :   if (buf==NULL)

  0007d	48 83 7c 24 40
	00		 cmp	 QWORD PTR buf$[rsp], 0
  00083	75 07		 jne	 SHORT $LN12@zip64local@5

; 499  :     return 0;

  00085	33 c0		 xor	 eax, eax
  00087	e9 86 01 00 00	 jmp	 $LN15@zip64local@5
$LN12@zip64local@5:

; 500  : 
; 501  :   uBackRead = 4;

  0008c	48 c7 44 24 30
	04 00 00 00	 mov	 QWORD PTR uBackRead$[rsp], 4
$LN11@zip64local@5:

; 502  :   while (uBackRead<uMaxBack)

  00095	48 8b 44 24 38	 mov	 rax, QWORD PTR uMaxBack$[rsp]
  0009a	48 39 44 24 30	 cmp	 QWORD PTR uBackRead$[rsp], rax
  0009f	0f 83 55 01 00
	00		 jae	 $LN10@zip64local@5

; 503  :   {
; 504  :     uLong uReadSize;
; 505  :     ZPOS64_T uReadPos ;
; 506  :     int i;
; 507  :     if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000a5	48 8b 44 24 30	 mov	 rax, QWORD PTR uBackRead$[rsp]
  000aa	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  000b0	48 3b 44 24 38	 cmp	 rax, QWORD PTR uMaxBack$[rsp]
  000b5	76 0c		 jbe	 SHORT $LN9@zip64local@5

; 508  :       uBackRead = uMaxBack;

  000b7	48 8b 44 24 38	 mov	 rax, QWORD PTR uMaxBack$[rsp]
  000bc	48 89 44 24 30	 mov	 QWORD PTR uBackRead$[rsp], rax

; 509  :     else

  000c1	eb 10		 jmp	 SHORT $LN8@zip64local@5
$LN9@zip64local@5:

; 510  :       uBackRead+=BUFREADCOMMENT;

  000c3	48 8b 44 24 30	 mov	 rax, QWORD PTR uBackRead$[rsp]
  000c8	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  000ce	48 89 44 24 30	 mov	 QWORD PTR uBackRead$[rsp], rax
$LN8@zip64local@5:

; 511  :     uReadPos = uSizeFile-uBackRead ;

  000d3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR uBackRead$[rsp]
  000d8	48 8b 44 24 20	 mov	 rax, QWORD PTR uSizeFile$[rsp]
  000dd	48 2b c1	 sub	 rax, rcx
  000e0	48 89 44 24 50	 mov	 QWORD PTR uReadPos$80711[rsp], rax

; 512  : 
; 513  :     uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?
; 514  :       (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);

  000e5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR uReadPos$80711[rsp]
  000ea	48 8b 44 24 20	 mov	 rax, QWORD PTR uSizeFile$[rsp]
  000ef	48 2b c1	 sub	 rax, rcx
  000f2	48 3d 04 04 00
	00		 cmp	 rax, 1028		; 00000404H
  000f8	76 0a		 jbe	 SHORT $LN17@zip64local@5
  000fa	c7 44 24 5c 04
	04 00 00	 mov	 DWORD PTR tv86[rsp], 1028 ; 00000404H
  00102	eb 11		 jmp	 SHORT $LN18@zip64local@5
$LN17@zip64local@5:
  00104	48 8b 4c 24 50	 mov	 rcx, QWORD PTR uReadPos$80711[rsp]
  00109	48 8b 44 24 20	 mov	 rax, QWORD PTR uSizeFile$[rsp]
  0010e	48 2b c1	 sub	 rax, rcx
  00111	89 44 24 5c	 mov	 DWORD PTR tv86[rsp], eax
$LN18@zip64local@5:
  00115	8b 44 24 5c	 mov	 eax, DWORD PTR tv86[rsp]
  00119	89 44 24 58	 mov	 DWORD PTR uReadSize$80710[rsp], eax

; 515  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0011d	45 33 c9	 xor	 r9d, r9d
  00120	4c 8b 44 24 50	 mov	 r8, QWORD PTR uReadPos$80711[rsp]
  00125	48 8b 54 24 78	 mov	 rdx, QWORD PTR filestream$[rsp]
  0012a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0012f	e8 00 00 00 00	 call	 call_zseek64
  00134	85 c0		 test	 eax, eax
  00136	74 05		 je	 SHORT $LN7@zip64local@5

; 516  :       break;

  00138	e9 bd 00 00 00	 jmp	 $LN10@zip64local@5
$LN7@zip64local@5:

; 517  : 
; 518  :     if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  0013d	44 8b 4c 24 58	 mov	 r9d, DWORD PTR uReadSize$80710[rsp]
  00142	4c 8b 44 24 40	 mov	 r8, QWORD PTR buf$[rsp]
  00147	48 8b 54 24 78	 mov	 rdx, QWORD PTR filestream$[rsp]
  0014c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00151	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00155	48 8b 44 24 70	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  0015a	ff 50 08	 call	 QWORD PTR [rax+8]
  0015d	3b 44 24 58	 cmp	 eax, DWORD PTR uReadSize$80710[rsp]
  00161	74 05		 je	 SHORT $LN6@zip64local@5

; 519  :       break;

  00163	e9 92 00 00 00	 jmp	 $LN10@zip64local@5
$LN6@zip64local@5:

; 520  : 
; 521  :     for (i=(int)uReadSize-3; (i--)>0;)

  00168	8b 44 24 58	 mov	 eax, DWORD PTR uReadSize$80710[rsp]
  0016c	83 e8 03	 sub	 eax, 3
  0016f	89 44 24 48	 mov	 DWORD PTR i$80712[rsp], eax
$LN5@zip64local@5:
  00173	8b 4c 24 48	 mov	 ecx, DWORD PTR i$80712[rsp]
  00177	8b 44 24 48	 mov	 eax, DWORD PTR i$80712[rsp]
  0017b	83 e8 01	 sub	 eax, 1
  0017e	89 44 24 48	 mov	 DWORD PTR i$80712[rsp], eax
  00182	85 c9		 test	 ecx, ecx
  00184	7e 65		 jle	 SHORT $LN4@zip64local@5

; 522  :       if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 523  :         ((*(buf+i+2))==0x05) && ((*(buf+i+3))==0x06))

  00186	48 63 4c 24 48	 movsxd	 rcx, DWORD PTR i$80712[rsp]
  0018b	48 8b 44 24 40	 mov	 rax, QWORD PTR buf$[rsp]
  00190	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00194	83 f8 50	 cmp	 eax, 80			; 00000050H
  00197	75 50		 jne	 SHORT $LN3@zip64local@5
  00199	48 63 4c 24 48	 movsxd	 rcx, DWORD PTR i$80712[rsp]
  0019e	48 8b 44 24 40	 mov	 rax, QWORD PTR buf$[rsp]
  001a3	0f b6 44 08 01	 movzx	 eax, BYTE PTR [rax+rcx+1]
  001a8	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  001ab	75 3c		 jne	 SHORT $LN3@zip64local@5
  001ad	48 63 4c 24 48	 movsxd	 rcx, DWORD PTR i$80712[rsp]
  001b2	48 8b 44 24 40	 mov	 rax, QWORD PTR buf$[rsp]
  001b7	0f b6 44 08 02	 movzx	 eax, BYTE PTR [rax+rcx+2]
  001bc	83 f8 05	 cmp	 eax, 5
  001bf	75 28		 jne	 SHORT $LN3@zip64local@5
  001c1	48 63 4c 24 48	 movsxd	 rcx, DWORD PTR i$80712[rsp]
  001c6	48 8b 44 24 40	 mov	 rax, QWORD PTR buf$[rsp]
  001cb	0f b6 44 08 03	 movzx	 eax, BYTE PTR [rax+rcx+3]
  001d0	83 f8 06	 cmp	 eax, 6
  001d3	75 14		 jne	 SHORT $LN3@zip64local@5

; 524  :       {
; 525  :         uPosFound = uReadPos+i;

  001d5	48 63 4c 24 48	 movsxd	 rcx, DWORD PTR i$80712[rsp]
  001da	48 8b 44 24 50	 mov	 rax, QWORD PTR uReadPos$80711[rsp]
  001df	48 03 c1	 add	 rax, rcx
  001e2	48 89 44 24 28	 mov	 QWORD PTR uPosFound$[rsp], rax

; 526  :         break;

  001e7	eb 02		 jmp	 SHORT $LN4@zip64local@5
$LN3@zip64local@5:

; 527  :       }

  001e9	eb 88		 jmp	 SHORT $LN5@zip64local@5
$LN4@zip64local@5:

; 528  : 
; 529  :       if (uPosFound!=0)

  001eb	48 83 7c 24 28
	00		 cmp	 QWORD PTR uPosFound$[rsp], 0
  001f1	74 02		 je	 SHORT $LN2@zip64local@5

; 530  :         break;

  001f3	eb 05		 jmp	 SHORT $LN10@zip64local@5
$LN2@zip64local@5:

; 531  :   }

  001f5	e9 9b fe ff ff	 jmp	 $LN11@zip64local@5
$LN10@zip64local@5:

; 532  :   TRYFREE(buf);

  001fa	48 83 7c 24 40
	00		 cmp	 QWORD PTR buf$[rsp], 0
  00200	74 0b		 je	 SHORT $LN1@zip64local@5
  00202	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buf$[rsp]
  00207	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN1@zip64local@5:

; 533  :   return uPosFound;

  0020d	48 8b 44 24 28	 mov	 rax, QWORD PTR uPosFound$[rsp]
$LN15@zip64local@5:

; 534  : }

  00212	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00216	c3		 ret	 0
zip64local_SearchCentralDir ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_getLong64 DD imagerel zip64local_getLong64
	DD	imagerel zip64local_getLong64+475
	DD	imagerel $unwind$zip64local_getLong64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_getLong64 DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zip64local_getLong64
_TEXT	SEGMENT
x$ = 32
i$ = 40
err$ = 44
pzlib_filefunc_def$ = 64
filestream$ = 72
pX$ = 80
zip64local_getLong64 PROC				; COMDAT

; 427  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 428  :   ZPOS64_T x;
; 429  :   int i = 0;

  00013	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 430  :   int err;
; 431  : 
; 432  :   err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0001b	4c 8d 44 24 28	 lea	 r8, QWORD PTR i$[rsp]
  00020	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  00025	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0002a	e8 00 00 00 00	 call	 zip64local_getByte
  0002f	89 44 24 2c	 mov	 DWORD PTR err$[rsp], eax

; 433  :   x = (ZPOS64_T)i;

  00033	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$[rsp]
  00038	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 434  : 
; 435  :   if (err==ZIP_OK)

  0003d	83 7c 24 2c 00	 cmp	 DWORD PTR err$[rsp], 0
  00042	75 18		 jne	 SHORT $LN9@zip64local@6

; 436  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00044	4c 8d 44 24 28	 lea	 r8, QWORD PTR i$[rsp]
  00049	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  0004e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00053	e8 00 00 00 00	 call	 zip64local_getByte
  00058	89 44 24 2c	 mov	 DWORD PTR err$[rsp], eax
$LN9@zip64local@6:

; 437  :   x += ((ZPOS64_T)i)<<8;

  0005c	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR i$[rsp]
  00061	48 c1 e1 08	 shl	 rcx, 8
  00065	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0006a	48 03 c1	 add	 rax, rcx
  0006d	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 438  : 
; 439  :   if (err==ZIP_OK)

  00072	83 7c 24 2c 00	 cmp	 DWORD PTR err$[rsp], 0
  00077	75 18		 jne	 SHORT $LN8@zip64local@6

; 440  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00079	4c 8d 44 24 28	 lea	 r8, QWORD PTR i$[rsp]
  0007e	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  00083	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00088	e8 00 00 00 00	 call	 zip64local_getByte
  0008d	89 44 24 2c	 mov	 DWORD PTR err$[rsp], eax
$LN8@zip64local@6:

; 441  :   x += ((ZPOS64_T)i)<<16;

  00091	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR i$[rsp]
  00096	48 c1 e1 10	 shl	 rcx, 16
  0009a	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0009f	48 03 c1	 add	 rax, rcx
  000a2	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 442  : 
; 443  :   if (err==ZIP_OK)

  000a7	83 7c 24 2c 00	 cmp	 DWORD PTR err$[rsp], 0
  000ac	75 18		 jne	 SHORT $LN7@zip64local@6

; 444  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  000ae	4c 8d 44 24 28	 lea	 r8, QWORD PTR i$[rsp]
  000b3	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  000b8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  000bd	e8 00 00 00 00	 call	 zip64local_getByte
  000c2	89 44 24 2c	 mov	 DWORD PTR err$[rsp], eax
$LN7@zip64local@6:

; 445  :   x += ((ZPOS64_T)i)<<24;

  000c6	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR i$[rsp]
  000cb	48 c1 e1 18	 shl	 rcx, 24
  000cf	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  000d4	48 03 c1	 add	 rax, rcx
  000d7	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 446  : 
; 447  :   if (err==ZIP_OK)

  000dc	83 7c 24 2c 00	 cmp	 DWORD PTR err$[rsp], 0
  000e1	75 18		 jne	 SHORT $LN6@zip64local@6

; 448  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  000e3	4c 8d 44 24 28	 lea	 r8, QWORD PTR i$[rsp]
  000e8	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  000ed	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  000f2	e8 00 00 00 00	 call	 zip64local_getByte
  000f7	89 44 24 2c	 mov	 DWORD PTR err$[rsp], eax
$LN6@zip64local@6:

; 449  :   x += ((ZPOS64_T)i)<<32;

  000fb	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR i$[rsp]
  00100	48 c1 e1 20	 shl	 rcx, 32			; 00000020H
  00104	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00109	48 03 c1	 add	 rax, rcx
  0010c	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 450  : 
; 451  :   if (err==ZIP_OK)

  00111	83 7c 24 2c 00	 cmp	 DWORD PTR err$[rsp], 0
  00116	75 18		 jne	 SHORT $LN5@zip64local@6

; 452  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00118	4c 8d 44 24 28	 lea	 r8, QWORD PTR i$[rsp]
  0011d	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  00122	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00127	e8 00 00 00 00	 call	 zip64local_getByte
  0012c	89 44 24 2c	 mov	 DWORD PTR err$[rsp], eax
$LN5@zip64local@6:

; 453  :   x += ((ZPOS64_T)i)<<40;

  00130	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR i$[rsp]
  00135	48 c1 e1 28	 shl	 rcx, 40			; 00000028H
  00139	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0013e	48 03 c1	 add	 rax, rcx
  00141	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 454  : 
; 455  :   if (err==ZIP_OK)

  00146	83 7c 24 2c 00	 cmp	 DWORD PTR err$[rsp], 0
  0014b	75 18		 jne	 SHORT $LN4@zip64local@6

; 456  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0014d	4c 8d 44 24 28	 lea	 r8, QWORD PTR i$[rsp]
  00152	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  00157	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0015c	e8 00 00 00 00	 call	 zip64local_getByte
  00161	89 44 24 2c	 mov	 DWORD PTR err$[rsp], eax
$LN4@zip64local@6:

; 457  :   x += ((ZPOS64_T)i)<<48;

  00165	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR i$[rsp]
  0016a	48 c1 e1 30	 shl	 rcx, 48			; 00000030H
  0016e	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00173	48 03 c1	 add	 rax, rcx
  00176	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 458  : 
; 459  :   if (err==ZIP_OK)

  0017b	83 7c 24 2c 00	 cmp	 DWORD PTR err$[rsp], 0
  00180	75 18		 jne	 SHORT $LN3@zip64local@6

; 460  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00182	4c 8d 44 24 28	 lea	 r8, QWORD PTR i$[rsp]
  00187	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  0018c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00191	e8 00 00 00 00	 call	 zip64local_getByte
  00196	89 44 24 2c	 mov	 DWORD PTR err$[rsp], eax
$LN3@zip64local@6:

; 461  :   x += ((ZPOS64_T)i)<<56;

  0019a	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR i$[rsp]
  0019f	48 c1 e1 38	 shl	 rcx, 56			; 00000038H
  001a3	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  001a8	48 03 c1	 add	 rax, rcx
  001ab	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 462  : 
; 463  :   if (err==ZIP_OK)

  001b0	83 7c 24 2c 00	 cmp	 DWORD PTR err$[rsp], 0
  001b5	75 0f		 jne	 SHORT $LN2@zip64local@6

; 464  :     *pX = x;

  001b7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pX$[rsp]
  001bc	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  001c1	48 89 01	 mov	 QWORD PTR [rcx], rax

; 465  :   else

  001c4	eb 0c		 jmp	 SHORT $LN1@zip64local@6
$LN2@zip64local@6:

; 466  :     *pX = 0;

  001c6	48 8b 44 24 50	 mov	 rax, QWORD PTR pX$[rsp]
  001cb	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN1@zip64local@6:

; 467  : 
; 468  :   return err;

  001d2	8b 44 24 2c	 mov	 eax, DWORD PTR err$[rsp]

; 469  : }

  001d6	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001da	c3		 ret	 0
zip64local_getLong64 ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_getLong DD imagerel zip64local_getLong
	DD	imagerel zip64local_getLong+243
	DD	imagerel $unwind$zip64local_getLong
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_getLong DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zip64local_getLong
_TEXT	SEGMENT
x$ = 32
i$ = 36
err$ = 40
pzlib_filefunc_def$ = 64
filestream$ = 72
pX$ = 80
zip64local_getLong PROC					; COMDAT

; 396  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 397  :     uLong x ;
; 398  :     int i = 0;

  00013	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 399  :     int err;
; 400  : 
; 401  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0001b	4c 8d 44 24 24	 lea	 r8, QWORD PTR i$[rsp]
  00020	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  00025	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0002a	e8 00 00 00 00	 call	 zip64local_getByte
  0002f	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax

; 402  :     x = (uLong)i;

  00033	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00037	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 403  : 
; 404  :     if (err==ZIP_OK)

  0003b	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  00040	75 18		 jne	 SHORT $LN5@zip64local@7

; 405  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00042	4c 8d 44 24 24	 lea	 r8, QWORD PTR i$[rsp]
  00047	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  0004c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00051	e8 00 00 00 00	 call	 zip64local_getByte
  00056	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN5@zip64local@7:

; 406  :     x += ((uLong)i)<<8;

  0005a	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  0005e	c1 e1 08	 shl	 ecx, 8
  00061	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  00065	03 c1		 add	 eax, ecx
  00067	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 407  : 
; 408  :     if (err==ZIP_OK)

  0006b	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  00070	75 18		 jne	 SHORT $LN4@zip64local@7

; 409  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00072	4c 8d 44 24 24	 lea	 r8, QWORD PTR i$[rsp]
  00077	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  0007c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00081	e8 00 00 00 00	 call	 zip64local_getByte
  00086	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN4@zip64local@7:

; 410  :     x += ((uLong)i)<<16;

  0008a	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  0008e	c1 e1 10	 shl	 ecx, 16
  00091	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  00095	03 c1		 add	 eax, ecx
  00097	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 411  : 
; 412  :     if (err==ZIP_OK)

  0009b	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  000a0	75 18		 jne	 SHORT $LN3@zip64local@7

; 413  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  000a2	4c 8d 44 24 24	 lea	 r8, QWORD PTR i$[rsp]
  000a7	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  000ac	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  000b1	e8 00 00 00 00	 call	 zip64local_getByte
  000b6	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN3@zip64local@7:

; 414  :     x += ((uLong)i)<<24;

  000ba	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  000be	c1 e1 18	 shl	 ecx, 24
  000c1	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  000c5	03 c1		 add	 eax, ecx
  000c7	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 415  : 
; 416  :     if (err==ZIP_OK)

  000cb	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  000d0	75 0d		 jne	 SHORT $LN2@zip64local@7

; 417  :         *pX = x;

  000d2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pX$[rsp]
  000d7	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  000db	89 01		 mov	 DWORD PTR [rcx], eax

; 418  :     else

  000dd	eb 0b		 jmp	 SHORT $LN1@zip64local@7
$LN2@zip64local@7:

; 419  :         *pX = 0;

  000df	48 8b 44 24 50	 mov	 rax, QWORD PTR pX$[rsp]
  000e4	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN1@zip64local@7:

; 420  :     return err;

  000ea	8b 44 24 28	 mov	 eax, DWORD PTR err$[rsp]

; 421  : }

  000ee	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000f2	c3		 ret	 0
zip64local_getLong ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_getShort DD imagerel zip64local_getShort
	DD	imagerel zip64local_getShort+147
	DD	imagerel $unwind$zip64local_getShort
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_getShort DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zip64local_getShort
_TEXT	SEGMENT
x$ = 32
i$ = 36
err$ = 40
pzlib_filefunc_def$ = 64
filestream$ = 72
pX$ = 80
zip64local_getShort PROC				; COMDAT

; 374  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 375  :     uLong x ;
; 376  :     int i = 0;

  00013	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 377  :     int err;
; 378  : 
; 379  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0001b	4c 8d 44 24 24	 lea	 r8, QWORD PTR i$[rsp]
  00020	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  00025	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0002a	e8 00 00 00 00	 call	 zip64local_getByte
  0002f	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax

; 380  :     x = (uLong)i;

  00033	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00037	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 381  : 
; 382  :     if (err==ZIP_OK)

  0003b	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  00040	75 18		 jne	 SHORT $LN3@zip64local@8

; 383  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00042	4c 8d 44 24 24	 lea	 r8, QWORD PTR i$[rsp]
  00047	48 8b 54 24 48	 mov	 rdx, QWORD PTR filestream$[rsp]
  0004c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00051	e8 00 00 00 00	 call	 zip64local_getByte
  00056	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax
$LN3@zip64local@8:

; 384  :     x += ((uLong)i)<<8;

  0005a	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  0005e	c1 e1 08	 shl	 ecx, 8
  00061	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  00065	03 c1		 add	 eax, ecx
  00067	89 44 24 20	 mov	 DWORD PTR x$[rsp], eax

; 385  : 
; 386  :     if (err==ZIP_OK)

  0006b	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  00070	75 0d		 jne	 SHORT $LN2@zip64local@8

; 387  :         *pX = x;

  00072	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pX$[rsp]
  00077	8b 44 24 20	 mov	 eax, DWORD PTR x$[rsp]
  0007b	89 01		 mov	 DWORD PTR [rcx], eax

; 388  :     else

  0007d	eb 0b		 jmp	 SHORT $LN1@zip64local@8
$LN2@zip64local@8:

; 389  :         *pX = 0;

  0007f	48 8b 44 24 50	 mov	 rax, QWORD PTR pX$[rsp]
  00084	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN1@zip64local@8:

; 390  :     return err;

  0008a	8b 44 24 28	 mov	 eax, DWORD PTR err$[rsp]

; 391  : }

  0008e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00092	c3		 ret	 0
zip64local_getShort ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$add_data_in_datablock DD imagerel add_data_in_datablock
	DD	imagerel add_data_in_datablock+418
	DD	imagerel $unwind$add_data_in_datablock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$add_data_in_datablock DD 011301H
	DD	0a213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT add_data_in_datablock
_TEXT	SEGMENT
from_copy$ = 32
ldi$ = 40
copy_this$80503 = 48
to_copy$80505 = 56
i$80504 = 64
ll$ = 96
buf$ = 104
len$ = 112
add_data_in_datablock PROC				; COMDAT

; 226  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 227  :     linkedlist_datablock_internal* ldi;
; 228  :     const unsigned char* from_copy;
; 229  : 
; 230  :     if (ll==NULL)

  00013	48 83 7c 24 60
	00		 cmp	 QWORD PTR ll$[rsp], 0
  00019	75 0a		 jne	 SHORT $LN12@add_data_i

; 231  :         return ZIP_INTERNALERROR;

  0001b	b8 98 ff ff ff	 mov	 eax, -104		; ffffffffffffff98H
  00020	e9 78 01 00 00	 jmp	 $LN13@add_data_i
$LN12@add_data_i:

; 232  : 
; 233  :     if (ll->last_block == NULL)

  00025	48 8b 44 24 60	 mov	 rax, QWORD PTR ll$[rsp]
  0002a	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0002f	75 37		 jne	 SHORT $LN11@add_data_i

; 234  :     {
; 235  :         ll->first_block = ll->last_block = allocate_new_datablock();

  00031	e8 00 00 00 00	 call	 allocate_new_datablock
  00036	4c 8b d8	 mov	 r11, rax
  00039	48 8b 44 24 60	 mov	 rax, QWORD PTR ll$[rsp]
  0003e	4c 89 58 08	 mov	 QWORD PTR [rax+8], r11
  00042	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ll$[rsp]
  00047	48 8b 44 24 60	 mov	 rax, QWORD PTR ll$[rsp]
  0004c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00050	48 89 01	 mov	 QWORD PTR [rcx], rax

; 236  :         if (ll->first_block == NULL)

  00053	48 8b 44 24 60	 mov	 rax, QWORD PTR ll$[rsp]
  00058	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0005c	75 0a		 jne	 SHORT $LN10@add_data_i

; 237  :             return ZIP_INTERNALERROR;

  0005e	b8 98 ff ff ff	 mov	 eax, -104		; ffffffffffffff98H
  00063	e9 35 01 00 00	 jmp	 $LN13@add_data_i
$LN10@add_data_i:
$LN11@add_data_i:

; 238  :     }
; 239  : 
; 240  :     ldi = ll->last_block;

  00068	48 8b 44 24 60	 mov	 rax, QWORD PTR ll$[rsp]
  0006d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00071	48 89 44 24 28	 mov	 QWORD PTR ldi$[rsp], rax

; 241  :     from_copy = (unsigned char*)buf;

  00076	48 8b 44 24 68	 mov	 rax, QWORD PTR buf$[rsp]
  0007b	48 89 44 24 20	 mov	 QWORD PTR from_copy$[rsp], rax
$LN9@add_data_i:

; 242  : 
; 243  :     while (len>0)

  00080	83 7c 24 70 00	 cmp	 DWORD PTR len$[rsp], 0
  00085	0f 86 10 01 00
	00		 jbe	 $LN8@add_data_i

; 244  :     {
; 245  :         uInt copy_this;
; 246  :         uInt i;
; 247  :         unsigned char* to_copy;
; 248  : 
; 249  :         if (ldi->avail_in_this_block==0)

  0008b	48 8b 44 24 28	 mov	 rax, QWORD PTR ldi$[rsp]
  00090	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  00094	75 40		 jne	 SHORT $LN7@add_data_i

; 250  :         {
; 251  :             ldi->next_datablock = allocate_new_datablock();

  00096	e8 00 00 00 00	 call	 allocate_new_datablock
  0009b	4c 8b d8	 mov	 r11, rax
  0009e	48 8b 44 24 28	 mov	 rax, QWORD PTR ldi$[rsp]
  000a3	4c 89 18	 mov	 QWORD PTR [rax], r11

; 252  :             if (ldi->next_datablock == NULL)

  000a6	48 8b 44 24 28	 mov	 rax, QWORD PTR ldi$[rsp]
  000ab	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000af	75 0a		 jne	 SHORT $LN6@add_data_i

; 253  :                 return ZIP_INTERNALERROR;

  000b1	b8 98 ff ff ff	 mov	 eax, -104		; ffffffffffffff98H
  000b6	e9 e2 00 00 00	 jmp	 $LN13@add_data_i
$LN6@add_data_i:

; 254  :             ldi = ldi->next_datablock ;

  000bb	48 8b 44 24 28	 mov	 rax, QWORD PTR ldi$[rsp]
  000c0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c3	48 89 44 24 28	 mov	 QWORD PTR ldi$[rsp], rax

; 255  :             ll->last_block = ldi;

  000c8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ll$[rsp]
  000cd	48 8b 44 24 28	 mov	 rax, QWORD PTR ldi$[rsp]
  000d2	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
$LN7@add_data_i:

; 256  :         }
; 257  : 
; 258  :         if (ldi->avail_in_this_block < len)

  000d6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ldi$[rsp]
  000db	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  000df	39 41 08	 cmp	 DWORD PTR [rcx+8], eax
  000e2	73 0e		 jae	 SHORT $LN5@add_data_i

; 259  :             copy_this = (uInt)ldi->avail_in_this_block;

  000e4	48 8b 44 24 28	 mov	 rax, QWORD PTR ldi$[rsp]
  000e9	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  000ec	89 44 24 30	 mov	 DWORD PTR copy_this$80503[rsp], eax

; 260  :         else

  000f0	eb 08		 jmp	 SHORT $LN4@add_data_i
$LN5@add_data_i:

; 261  :             copy_this = (uInt)len;

  000f2	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  000f6	89 44 24 30	 mov	 DWORD PTR copy_this$80503[rsp], eax
$LN4@add_data_i:

; 262  : 
; 263  :         to_copy = &(ldi->data[ldi->filled_in_this_block]);

  000fa	48 8b 44 24 28	 mov	 rax, QWORD PTR ldi$[rsp]
  000ff	8b 48 0c	 mov	 ecx, DWORD PTR [rax+12]
  00102	48 8b 44 24 28	 mov	 rax, QWORD PTR ldi$[rsp]
  00107	48 8d 44 08 14	 lea	 rax, QWORD PTR [rax+rcx+20]
  0010c	48 89 44 24 38	 mov	 QWORD PTR to_copy$80505[rsp], rax

; 264  : 
; 265  :         for (i=0;i<copy_this;i++)

  00111	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$80504[rsp], 0
  00119	eb 0b		 jmp	 SHORT $LN3@add_data_i
$LN2@add_data_i:
  0011b	8b 44 24 40	 mov	 eax, DWORD PTR i$80504[rsp]
  0011f	83 c0 01	 add	 eax, 1
  00122	89 44 24 40	 mov	 DWORD PTR i$80504[rsp], eax
$LN3@add_data_i:
  00126	8b 44 24 30	 mov	 eax, DWORD PTR copy_this$80503[rsp]
  0012a	39 44 24 40	 cmp	 DWORD PTR i$80504[rsp], eax
  0012e	73 1d		 jae	 SHORT $LN1@add_data_i

; 266  :             *(to_copy+i)=*(from_copy+i);

  00130	44 8b 44 24 40	 mov	 r8d, DWORD PTR i$80504[rsp]
  00135	8b 54 24 40	 mov	 edx, DWORD PTR i$80504[rsp]
  00139	48 8b 4c 24 38	 mov	 rcx, QWORD PTR to_copy$80505[rsp]
  0013e	48 8b 44 24 20	 mov	 rax, QWORD PTR from_copy$[rsp]
  00143	42 0f b6 04 00	 movzx	 eax, BYTE PTR [rax+r8]
  00148	88 04 11	 mov	 BYTE PTR [rcx+rdx], al
  0014b	eb ce		 jmp	 SHORT $LN2@add_data_i
$LN1@add_data_i:

; 267  : 
; 268  :         ldi->filled_in_this_block += copy_this;

  0014d	48 8b 44 24 28	 mov	 rax, QWORD PTR ldi$[rsp]
  00152	8b 48 0c	 mov	 ecx, DWORD PTR [rax+12]
  00155	03 4c 24 30	 add	 ecx, DWORD PTR copy_this$80503[rsp]
  00159	48 8b 44 24 28	 mov	 rax, QWORD PTR ldi$[rsp]
  0015e	89 48 0c	 mov	 DWORD PTR [rax+12], ecx

; 269  :         ldi->avail_in_this_block -= copy_this;

  00161	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ldi$[rsp]
  00166	8b 44 24 30	 mov	 eax, DWORD PTR copy_this$80503[rsp]
  0016a	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  0016d	2b c8		 sub	 ecx, eax
  0016f	48 8b 44 24 28	 mov	 rax, QWORD PTR ldi$[rsp]
  00174	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 270  :         from_copy += copy_this ;

  00177	8b 4c 24 30	 mov	 ecx, DWORD PTR copy_this$80503[rsp]
  0017b	48 8b 44 24 20	 mov	 rax, QWORD PTR from_copy$[rsp]
  00180	48 03 c1	 add	 rax, rcx
  00183	48 89 44 24 20	 mov	 QWORD PTR from_copy$[rsp], rax

; 271  :         len -= copy_this;

  00188	8b 4c 24 30	 mov	 ecx, DWORD PTR copy_this$80503[rsp]
  0018c	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  00190	2b c1		 sub	 eax, ecx
  00192	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax

; 272  :     }

  00196	e9 e5 fe ff ff	 jmp	 $LN9@add_data_i
$LN8@add_data_i:

; 273  :     return ZIP_OK;

  0019b	33 c0		 xor	 eax, eax
$LN13@add_data_i:

; 274  : }

  0019d	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001a1	c3		 ret	 0
add_data_in_datablock ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$free_linkedlist DD imagerel free_linkedlist
	DD	imagerel free_linkedlist+52
	DD	imagerel $unwind$free_linkedlist
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$free_linkedlist DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT free_linkedlist
_TEXT	SEGMENT
ll$ = 48
free_linkedlist PROC					; COMDAT

; 219  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 220  :     free_datablock(ll->first_block);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ll$[rsp]
  0000e	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00011	e8 00 00 00 00	 call	 free_datablock

; 221  :     ll->first_block = ll->last_block = NULL;

  00016	4c 8b 5c 24 30	 mov	 r11, QWORD PTR ll$[rsp]
  0001b	49 c7 43 08 00
	00 00 00	 mov	 QWORD PTR [r11+8], 0
  00023	48 8b 44 24 30	 mov	 rax, QWORD PTR ll$[rsp]
  00028	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 222  : }

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
free_linkedlist ENDP
_TEXT	ENDS
;	COMDAT pdata
; File d:\lp_solve_5.5\xli\xli_zimpl\ziboptvs10\thirdparty\zlib\contrib\minizip\crypt.h
pdata	SEGMENT
$pdata$init_keys DD imagerel init_keys
	DD	imagerel init_keys+111
	DD	imagerel $unwind$init_keys
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$init_keys DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT init_keys
_TEXT	SEGMENT
passwd$ = 48
pkeys$ = 56
pcrc_32_tab$ = 64
init_keys PROC						; COMDAT

; 66   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 67   :     *(pkeys+0) = 305419896L;

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR pkeys$[rsp]
  00018	c7 00 78 56 34
	12		 mov	 DWORD PTR [rax], 305419896 ; 12345678H

; 68   :     *(pkeys+1) = 591751049L;

  0001e	48 8b 44 24 38	 mov	 rax, QWORD PTR pkeys$[rsp]
  00023	c7 40 04 89 67
	45 23		 mov	 DWORD PTR [rax+4], 591751049 ; 23456789H

; 69   :     *(pkeys+2) = 878082192L;

  0002a	48 8b 44 24 38	 mov	 rax, QWORD PTR pkeys$[rsp]
  0002f	c7 40 08 90 78
	56 34		 mov	 DWORD PTR [rax+8], 878082192 ; 34567890H
$LN2@init_keys:

; 70   :     while (*passwd != '\0') {

  00036	48 8b 44 24 30	 mov	 rax, QWORD PTR passwd$[rsp]
  0003b	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0003e	85 c0		 test	 eax, eax
  00040	74 28		 je	 SHORT $LN1@init_keys

; 71   :         update_keys(pkeys,pcrc_32_tab,(int)*passwd);

  00042	48 8b 44 24 30	 mov	 rax, QWORD PTR passwd$[rsp]
  00047	44 0f be 00	 movsx	 r8d, BYTE PTR [rax]
  0004b	48 8b 54 24 40	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  00050	48 8b 4c 24 38	 mov	 rcx, QWORD PTR pkeys$[rsp]
  00055	e8 00 00 00 00	 call	 update_keys

; 72   :         passwd++;

  0005a	48 8b 44 24 30	 mov	 rax, QWORD PTR passwd$[rsp]
  0005f	48 83 c0 01	 add	 rax, 1
  00063	48 89 44 24 30	 mov	 QWORD PTR passwd$[rsp], rax

; 73   :     }

  00068	eb cc		 jmp	 SHORT $LN2@init_keys
$LN1@init_keys:

; 74   : }

  0006a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006e	c3		 ret	 0
init_keys ENDP
;	COMDAT pdata
; File d:\lp_solve_5.5\xli\xli_zimpl\ziboptvs10\thirdparty\zlib\contrib\minizip\zip.c
pdata	SEGMENT
$pdata$zip64local_SearchCentralDir64 DD imagerel zip64local_SearchCentralDir64
	DD	imagerel zip64local_SearchCentralDir64+872
	DD	imagerel $unwind$zip64local_SearchCentralDir64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_SearchCentralDir64 DD 010e01H
	DD	0e20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zip64local_SearchCentralDir64
_TEXT	SEGMENT
uSizeFile$ = 32
uPosFound$ = 40
uBackRead$ = 48
relativeOffset$ = 56
uL$ = 64
uMaxBack$ = 72
buf$ = 80
i$80752 = 88
uReadPos$80751 = 96
uReadSize$80750 = 104
tv86 = 108
pzlib_filefunc_def$ = 128
filestream$ = 136
zip64local_SearchCentralDir64 PROC			; COMDAT

; 543  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 544  :   unsigned char* buf;
; 545  :   ZPOS64_T uSizeFile;
; 546  :   ZPOS64_T uBackRead;
; 547  :   ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */

  0000e	48 c7 44 24 48
	ff ff 00 00	 mov	 QWORD PTR uMaxBack$[rsp], 65535 ; 0000ffffH

; 548  :   ZPOS64_T uPosFound=0;

  00017	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR uPosFound$[rsp], 0

; 549  :   uLong uL;
; 550  :   ZPOS64_T relativeOffset;
; 551  : 
; 552  :   if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00020	41 b9 02 00 00
	00		 mov	 r9d, 2
  00026	45 33 c0	 xor	 r8d, r8d
  00029	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  00031	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00039	e8 00 00 00 00	 call	 call_zseek64
  0003e	85 c0		 test	 eax, eax
  00040	74 07		 je	 SHORT $LN25@zip64local@9

; 553  :     return 0;

  00042	33 c0		 xor	 eax, eax
  00044	e9 1a 03 00 00	 jmp	 $LN26@zip64local@9
$LN25@zip64local@9:

; 554  : 
; 555  :   uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  00049	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  00051	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00059	e8 00 00 00 00	 call	 call_ztell64
  0005e	48 89 44 24 20	 mov	 QWORD PTR uSizeFile$[rsp], rax

; 556  : 
; 557  :   if (uMaxBack>uSizeFile)

  00063	48 8b 44 24 20	 mov	 rax, QWORD PTR uSizeFile$[rsp]
  00068	48 39 44 24 48	 cmp	 QWORD PTR uMaxBack$[rsp], rax
  0006d	76 0a		 jbe	 SHORT $LN24@zip64local@9

; 558  :     uMaxBack = uSizeFile;

  0006f	48 8b 44 24 20	 mov	 rax, QWORD PTR uSizeFile$[rsp]
  00074	48 89 44 24 48	 mov	 QWORD PTR uMaxBack$[rsp], rax
$LN24@zip64local@9:

; 559  : 
; 560  :   buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00079	b9 04 04 00 00	 mov	 ecx, 1028		; 00000404H
  0007e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00084	48 89 44 24 50	 mov	 QWORD PTR buf$[rsp], rax

; 561  :   if (buf==NULL)

  00089	48 83 7c 24 50
	00		 cmp	 QWORD PTR buf$[rsp], 0
  0008f	75 07		 jne	 SHORT $LN23@zip64local@9

; 562  :     return 0;

  00091	33 c0		 xor	 eax, eax
  00093	e9 cb 02 00 00	 jmp	 $LN26@zip64local@9
$LN23@zip64local@9:

; 563  : 
; 564  :   uBackRead = 4;

  00098	48 c7 44 24 30
	04 00 00 00	 mov	 QWORD PTR uBackRead$[rsp], 4
$LN22@zip64local@9:

; 565  :   while (uBackRead<uMaxBack)

  000a1	48 8b 44 24 48	 mov	 rax, QWORD PTR uMaxBack$[rsp]
  000a6	48 39 44 24 30	 cmp	 QWORD PTR uBackRead$[rsp], rax
  000ab	0f 83 64 01 00
	00		 jae	 $LN21@zip64local@9

; 566  :   {
; 567  :     uLong uReadSize;
; 568  :     ZPOS64_T uReadPos;
; 569  :     int i;
; 570  :     if (uBackRead+BUFREADCOMMENT>uMaxBack)

  000b1	48 8b 44 24 30	 mov	 rax, QWORD PTR uBackRead$[rsp]
  000b6	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  000bc	48 3b 44 24 48	 cmp	 rax, QWORD PTR uMaxBack$[rsp]
  000c1	76 0c		 jbe	 SHORT $LN20@zip64local@9

; 571  :       uBackRead = uMaxBack;

  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR uMaxBack$[rsp]
  000c8	48 89 44 24 30	 mov	 QWORD PTR uBackRead$[rsp], rax

; 572  :     else

  000cd	eb 10		 jmp	 SHORT $LN19@zip64local@9
$LN20@zip64local@9:

; 573  :       uBackRead+=BUFREADCOMMENT;

  000cf	48 8b 44 24 30	 mov	 rax, QWORD PTR uBackRead$[rsp]
  000d4	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  000da	48 89 44 24 30	 mov	 QWORD PTR uBackRead$[rsp], rax
$LN19@zip64local@9:

; 574  :     uReadPos = uSizeFile-uBackRead ;

  000df	48 8b 4c 24 30	 mov	 rcx, QWORD PTR uBackRead$[rsp]
  000e4	48 8b 44 24 20	 mov	 rax, QWORD PTR uSizeFile$[rsp]
  000e9	48 2b c1	 sub	 rax, rcx
  000ec	48 89 44 24 60	 mov	 QWORD PTR uReadPos$80751[rsp], rax

; 575  : 
; 576  :     uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?
; 577  :       (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);

  000f1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR uReadPos$80751[rsp]
  000f6	48 8b 44 24 20	 mov	 rax, QWORD PTR uSizeFile$[rsp]
  000fb	48 2b c1	 sub	 rax, rcx
  000fe	48 3d 04 04 00
	00		 cmp	 rax, 1028		; 00000404H
  00104	76 0a		 jbe	 SHORT $LN28@zip64local@9
  00106	c7 44 24 6c 04
	04 00 00	 mov	 DWORD PTR tv86[rsp], 1028 ; 00000404H
  0010e	eb 11		 jmp	 SHORT $LN29@zip64local@9
$LN28@zip64local@9:
  00110	48 8b 4c 24 60	 mov	 rcx, QWORD PTR uReadPos$80751[rsp]
  00115	48 8b 44 24 20	 mov	 rax, QWORD PTR uSizeFile$[rsp]
  0011a	48 2b c1	 sub	 rax, rcx
  0011d	89 44 24 6c	 mov	 DWORD PTR tv86[rsp], eax
$LN29@zip64local@9:
  00121	8b 44 24 6c	 mov	 eax, DWORD PTR tv86[rsp]
  00125	89 44 24 68	 mov	 DWORD PTR uReadSize$80750[rsp], eax

; 578  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00129	45 33 c9	 xor	 r9d, r9d
  0012c	4c 8b 44 24 60	 mov	 r8, QWORD PTR uReadPos$80751[rsp]
  00131	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  00139	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00141	e8 00 00 00 00	 call	 call_zseek64
  00146	85 c0		 test	 eax, eax
  00148	74 05		 je	 SHORT $LN18@zip64local@9

; 579  :       break;

  0014a	e9 c6 00 00 00	 jmp	 $LN21@zip64local@9
$LN18@zip64local@9:

; 580  : 
; 581  :     if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  0014f	44 8b 4c 24 68	 mov	 r9d, DWORD PTR uReadSize$80750[rsp]
  00154	4c 8b 44 24 50	 mov	 r8, QWORD PTR buf$[rsp]
  00159	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  00161	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00169	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0016d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pzlib_filefunc_def$[rsp]
  00175	ff 50 08	 call	 QWORD PTR [rax+8]
  00178	3b 44 24 68	 cmp	 eax, DWORD PTR uReadSize$80750[rsp]
  0017c	74 05		 je	 SHORT $LN17@zip64local@9

; 582  :       break;

  0017e	e9 92 00 00 00	 jmp	 $LN21@zip64local@9
$LN17@zip64local@9:

; 583  : 
; 584  :     for (i=(int)uReadSize-3; (i--)>0;)

  00183	8b 44 24 68	 mov	 eax, DWORD PTR uReadSize$80750[rsp]
  00187	83 e8 03	 sub	 eax, 3
  0018a	89 44 24 58	 mov	 DWORD PTR i$80752[rsp], eax
$LN16@zip64local@9:
  0018e	8b 4c 24 58	 mov	 ecx, DWORD PTR i$80752[rsp]
  00192	8b 44 24 58	 mov	 eax, DWORD PTR i$80752[rsp]
  00196	83 e8 01	 sub	 eax, 1
  00199	89 44 24 58	 mov	 DWORD PTR i$80752[rsp], eax
  0019d	85 c9		 test	 ecx, ecx
  0019f	7e 65		 jle	 SHORT $LN15@zip64local@9

; 585  :     {
; 586  :       // Signature "0x07064b50" Zip64 end of central directory locater
; 587  :       if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) && ((*(buf+i+2))==0x06) && ((*(buf+i+3))==0x07))

  001a1	48 63 4c 24 58	 movsxd	 rcx, DWORD PTR i$80752[rsp]
  001a6	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  001ab	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  001af	83 f8 50	 cmp	 eax, 80			; 00000050H
  001b2	75 50		 jne	 SHORT $LN14@zip64local@9
  001b4	48 63 4c 24 58	 movsxd	 rcx, DWORD PTR i$80752[rsp]
  001b9	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  001be	0f b6 44 08 01	 movzx	 eax, BYTE PTR [rax+rcx+1]
  001c3	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  001c6	75 3c		 jne	 SHORT $LN14@zip64local@9
  001c8	48 63 4c 24 58	 movsxd	 rcx, DWORD PTR i$80752[rsp]
  001cd	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  001d2	0f b6 44 08 02	 movzx	 eax, BYTE PTR [rax+rcx+2]
  001d7	83 f8 06	 cmp	 eax, 6
  001da	75 28		 jne	 SHORT $LN14@zip64local@9
  001dc	48 63 4c 24 58	 movsxd	 rcx, DWORD PTR i$80752[rsp]
  001e1	48 8b 44 24 50	 mov	 rax, QWORD PTR buf$[rsp]
  001e6	0f b6 44 08 03	 movzx	 eax, BYTE PTR [rax+rcx+3]
  001eb	83 f8 07	 cmp	 eax, 7
  001ee	75 14		 jne	 SHORT $LN14@zip64local@9

; 588  :       {
; 589  :         uPosFound = uReadPos+i;

  001f0	48 63 4c 24 58	 movsxd	 rcx, DWORD PTR i$80752[rsp]
  001f5	48 8b 44 24 60	 mov	 rax, QWORD PTR uReadPos$80751[rsp]
  001fa	48 03 c1	 add	 rax, rcx
  001fd	48 89 44 24 28	 mov	 QWORD PTR uPosFound$[rsp], rax

; 590  :         break;

  00202	eb 02		 jmp	 SHORT $LN15@zip64local@9
$LN14@zip64local@9:

; 591  :       }
; 592  :     }

  00204	eb 88		 jmp	 SHORT $LN16@zip64local@9
$LN15@zip64local@9:

; 593  : 
; 594  :       if (uPosFound!=0)

  00206	48 83 7c 24 28
	00		 cmp	 QWORD PTR uPosFound$[rsp], 0
  0020c	74 02		 je	 SHORT $LN13@zip64local@9

; 595  :         break;

  0020e	eb 05		 jmp	 SHORT $LN21@zip64local@9
$LN13@zip64local@9:

; 596  :   }

  00210	e9 8c fe ff ff	 jmp	 $LN22@zip64local@9
$LN21@zip64local@9:

; 597  : 
; 598  :   TRYFREE(buf);

  00215	48 83 7c 24 50
	00		 cmp	 QWORD PTR buf$[rsp], 0
  0021b	74 0b		 je	 SHORT $LN12@zip64local@9
  0021d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  00222	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN12@zip64local@9:

; 599  :   if (uPosFound == 0)

  00228	48 83 7c 24 28
	00		 cmp	 QWORD PTR uPosFound$[rsp], 0
  0022e	75 07		 jne	 SHORT $LN11@zip64local@9

; 600  :     return 0;

  00230	33 c0		 xor	 eax, eax
  00232	e9 2c 01 00 00	 jmp	 $LN26@zip64local@9
$LN11@zip64local@9:

; 601  : 
; 602  :   /* Zip64 end of central directory locator */
; 603  :   if (ZSEEK64(*pzlib_filefunc_def,filestream, uPosFound,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00237	45 33 c9	 xor	 r9d, r9d
  0023a	4c 8b 44 24 28	 mov	 r8, QWORD PTR uPosFound$[rsp]
  0023f	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  00247	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  0024f	e8 00 00 00 00	 call	 call_zseek64
  00254	85 c0		 test	 eax, eax
  00256	74 07		 je	 SHORT $LN10@zip64local@9

; 604  :     return 0;

  00258	33 c0		 xor	 eax, eax
  0025a	e9 04 01 00 00	 jmp	 $LN26@zip64local@9
$LN10@zip64local@9:

; 605  : 
; 606  :   /* the signature, already checked */
; 607  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  0025f	4c 8d 44 24 40	 lea	 r8, QWORD PTR uL$[rsp]
  00264	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  0026c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00274	e8 00 00 00 00	 call	 zip64local_getLong
  00279	85 c0		 test	 eax, eax
  0027b	74 07		 je	 SHORT $LN9@zip64local@9

; 608  :     return 0;

  0027d	33 c0		 xor	 eax, eax
  0027f	e9 df 00 00 00	 jmp	 $LN26@zip64local@9
$LN9@zip64local@9:

; 609  : 
; 610  :   /* number of the disk with the start of the zip64 end of  central directory */
; 611  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  00284	4c 8d 44 24 40	 lea	 r8, QWORD PTR uL$[rsp]
  00289	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  00291	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00299	e8 00 00 00 00	 call	 zip64local_getLong
  0029e	85 c0		 test	 eax, eax
  002a0	74 07		 je	 SHORT $LN8@zip64local@9

; 612  :     return 0;

  002a2	33 c0		 xor	 eax, eax
  002a4	e9 ba 00 00 00	 jmp	 $LN26@zip64local@9
$LN8@zip64local@9:

; 613  :   if (uL != 0)

  002a9	83 7c 24 40 00	 cmp	 DWORD PTR uL$[rsp], 0
  002ae	74 07		 je	 SHORT $LN7@zip64local@9

; 614  :     return 0;

  002b0	33 c0		 xor	 eax, eax
  002b2	e9 ac 00 00 00	 jmp	 $LN26@zip64local@9
$LN7@zip64local@9:

; 615  : 
; 616  :   /* relative offset of the zip64 end of central directory record */
; 617  :   if (zip64local_getLong64(pzlib_filefunc_def,filestream,&relativeOffset)!=ZIP_OK)

  002b7	4c 8d 44 24 38	 lea	 r8, QWORD PTR relativeOffset$[rsp]
  002bc	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  002c4	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  002cc	e8 00 00 00 00	 call	 zip64local_getLong64
  002d1	85 c0		 test	 eax, eax
  002d3	74 07		 je	 SHORT $LN6@zip64local@9

; 618  :     return 0;

  002d5	33 c0		 xor	 eax, eax
  002d7	e9 87 00 00 00	 jmp	 $LN26@zip64local@9
$LN6@zip64local@9:

; 619  : 
; 620  :   /* total number of disks */
; 621  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  002dc	4c 8d 44 24 40	 lea	 r8, QWORD PTR uL$[rsp]
  002e1	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  002e9	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  002f1	e8 00 00 00 00	 call	 zip64local_getLong
  002f6	85 c0		 test	 eax, eax
  002f8	74 04		 je	 SHORT $LN5@zip64local@9

; 622  :     return 0;

  002fa	33 c0		 xor	 eax, eax
  002fc	eb 65		 jmp	 SHORT $LN26@zip64local@9
$LN5@zip64local@9:

; 623  :   if (uL != 1)

  002fe	83 7c 24 40 01	 cmp	 DWORD PTR uL$[rsp], 1
  00303	74 04		 je	 SHORT $LN4@zip64local@9

; 624  :     return 0;

  00305	33 c0		 xor	 eax, eax
  00307	eb 5a		 jmp	 SHORT $LN26@zip64local@9
$LN4@zip64local@9:

; 625  : 
; 626  :   /* Goto Zip64 end of central directory record */
; 627  :   if (ZSEEK64(*pzlib_filefunc_def,filestream, relativeOffset,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00309	45 33 c9	 xor	 r9d, r9d
  0030c	4c 8b 44 24 38	 mov	 r8, QWORD PTR relativeOffset$[rsp]
  00311	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  00319	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00321	e8 00 00 00 00	 call	 call_zseek64
  00326	85 c0		 test	 eax, eax
  00328	74 04		 je	 SHORT $LN3@zip64local@9

; 628  :     return 0;

  0032a	33 c0		 xor	 eax, eax
  0032c	eb 35		 jmp	 SHORT $LN26@zip64local@9
$LN3@zip64local@9:

; 629  : 
; 630  :   /* the signature */
; 631  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  0032e	4c 8d 44 24 40	 lea	 r8, QWORD PTR uL$[rsp]
  00333	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR filestream$[rsp]
  0033b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pzlib_filefunc_def$[rsp]
  00343	e8 00 00 00 00	 call	 zip64local_getLong
  00348	85 c0		 test	 eax, eax
  0034a	74 04		 je	 SHORT $LN2@zip64local@9

; 632  :     return 0;

  0034c	33 c0		 xor	 eax, eax
  0034e	eb 13		 jmp	 SHORT $LN26@zip64local@9
$LN2@zip64local@9:

; 633  : 
; 634  :   if (uL != 0x06064b50) // signature of 'Zip64 end of central directory'

  00350	81 7c 24 40 50
	4b 06 06	 cmp	 DWORD PTR uL$[rsp], 101075792 ; 06064b50H
  00358	74 04		 je	 SHORT $LN1@zip64local@9

; 635  :     return 0;

  0035a	33 c0		 xor	 eax, eax
  0035c	eb 05		 jmp	 SHORT $LN26@zip64local@9
$LN1@zip64local@9:

; 636  : 
; 637  :   return relativeOffset;

  0035e	48 8b 44 24 38	 mov	 rax, QWORD PTR relativeOffset$[rsp]
$LN26@zip64local@9:

; 638  : }

  00363	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00367	c3		 ret	 0
zip64local_SearchCentralDir64 ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\program files\microsoft visual studio 9.0\vc\include\time.inl
pdata	SEGMENT
$pdata$crypthead DD imagerel crypthead
	DD	imagerel crypthead+532
	DD	imagerel $unwind$crypthead
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$crypthead DD 011801H
	DD	08218H
; Function compile flags: /Odtp
; File d:\lp_solve_5.5\xli\xli_zimpl\ziboptvs10\thirdparty\zlib\contrib\minizip\crypt.h
xdata	ENDS
;	COMDAT crypthead
_TEXT	SEGMENT
n$ = 32
c$ = 36
t$ = 40
header$ = 48
passwd$ = 80
buf$ = 88
bufSize$ = 96
pkeys$ = 104
pcrc_32_tab$ = 112
crcForCrypting$ = 120
crypthead PROC						; COMDAT

; 96   : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 97   :     int n;                       /* index in random header */
; 98   :     int t;                       /* temporary */
; 99   :     int c;                       /* random byte */
; 100  :     unsigned char header[RAND_HEAD_LEN-2]; /* random header */
; 101  :     static unsigned calls = 0;   /* ensure different random header each time */
; 102  : 
; 103  :     if (bufSize<RAND_HEAD_LEN)

  00018	83 7c 24 60 0c	 cmp	 DWORD PTR bufSize$[rsp], 12
  0001d	7d 07		 jge	 SHORT $LN8@crypthead

; 104  :       return 0;

  0001f	33 c0		 xor	 eax, eax
  00021	e9 e9 01 00 00	 jmp	 $LN9@crypthead
$LN8@crypthead:

; 105  : 
; 106  :     /* First generate RAND_HEAD_LEN-2 random bytes. We encrypt the
; 107  :      * output of rand() to get less predictability, since rand() is
; 108  :      * often poorly implemented.
; 109  :      */
; 110  :     if (++calls == 1)

  00026	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?calls@?1??crypthead@@9@9
  0002c	83 c0 01	 add	 eax, 1
  0002f	89 05 00 00 00
	00		 mov	 DWORD PTR ?calls@?1??crypthead@@9@9, eax
  00035	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?calls@?1??crypthead@@9@9, 1
  0003c	75 18		 jne	 SHORT $LN7@crypthead

; 111  :     {
; 112  :         srand((unsigned)(time(NULL) ^ ZCR_SEED2));

  0003e	33 c9		 xor	 ecx, ecx
  00040	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__time64
  00046	b9 4e e6 40 bb	 mov	 ecx, -1153374642	; ffffffffbb40e64eH
  0004b	48 33 c1	 xor	 rax, rcx
  0004e	8b c8		 mov	 ecx, eax
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_srand
$LN7@crypthead:

; 113  :     }
; 114  :     init_keys(passwd, pkeys, pcrc_32_tab);

  00056	4c 8b 44 24 70	 mov	 r8, QWORD PTR pcrc_32_tab$[rsp]
  0005b	48 8b 54 24 68	 mov	 rdx, QWORD PTR pkeys$[rsp]
  00060	48 8b 4c 24 50	 mov	 rcx, QWORD PTR passwd$[rsp]
  00065	e8 00 00 00 00	 call	 init_keys

; 115  :     for (n = 0; n < RAND_HEAD_LEN-2; n++)

  0006a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  00072	eb 0b		 jmp	 SHORT $LN6@crypthead
$LN5@crypthead:
  00074	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  00078	83 c0 01	 add	 eax, 1
  0007b	89 44 24 20	 mov	 DWORD PTR n$[rsp], eax
$LN6@crypthead:
  0007f	83 7c 24 20 0a	 cmp	 DWORD PTR n$[rsp], 10
  00084	7d 50		 jge	 SHORT $LN4@crypthead

; 116  :     {
; 117  :         c = (rand() >> 7) & 0xff;

  00086	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  0008c	c1 f8 07	 sar	 eax, 7
  0008f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00094	89 44 24 24	 mov	 DWORD PTR c$[rsp], eax

; 118  :         header[n] = (unsigned char)zencode(pkeys, pcrc_32_tab, c, t);

  00098	48 8b 54 24 70	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  0009d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR pkeys$[rsp]
  000a2	e8 00 00 00 00	 call	 decrypt_byte
  000a7	89 44 24 28	 mov	 DWORD PTR t$[rsp], eax
  000ab	44 8b 44 24 24	 mov	 r8d, DWORD PTR c$[rsp]
  000b0	48 8b 54 24 70	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  000b5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR pkeys$[rsp]
  000ba	e8 00 00 00 00	 call	 update_keys
  000bf	44 8b 5c 24 24	 mov	 r11d, DWORD PTR c$[rsp]
  000c4	8b 4c 24 28	 mov	 ecx, DWORD PTR t$[rsp]
  000c8	41 33 cb	 xor	 ecx, r11d
  000cb	48 63 44 24 20	 movsxd	 rax, DWORD PTR n$[rsp]
  000d0	88 4c 04 30	 mov	 BYTE PTR header$[rsp+rax], cl

; 119  :     }

  000d4	eb 9e		 jmp	 SHORT $LN5@crypthead
$LN4@crypthead:

; 120  :     /* Encrypt random header (last two bytes is high word of crc) */
; 121  :     init_keys(passwd, pkeys, pcrc_32_tab);

  000d6	4c 8b 44 24 70	 mov	 r8, QWORD PTR pcrc_32_tab$[rsp]
  000db	48 8b 54 24 68	 mov	 rdx, QWORD PTR pkeys$[rsp]
  000e0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR passwd$[rsp]
  000e5	e8 00 00 00 00	 call	 init_keys

; 122  :     for (n = 0; n < RAND_HEAD_LEN-2; n++)

  000ea	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  000f2	eb 0b		 jmp	 SHORT $LN3@crypthead
$LN2@crypthead:
  000f4	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  000f8	83 c0 01	 add	 eax, 1
  000fb	89 44 24 20	 mov	 DWORD PTR n$[rsp], eax
$LN3@crypthead:
  000ff	83 7c 24 20 0a	 cmp	 DWORD PTR n$[rsp], 10
  00104	7d 4d		 jge	 SHORT $LN1@crypthead

; 123  :     {
; 124  :         buf[n] = (unsigned char)zencode(pkeys, pcrc_32_tab, header[n], t);

  00106	48 8b 54 24 70	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  0010b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR pkeys$[rsp]
  00110	e8 00 00 00 00	 call	 decrypt_byte
  00115	89 44 24 28	 mov	 DWORD PTR t$[rsp], eax
  00119	48 63 44 24 20	 movsxd	 rax, DWORD PTR n$[rsp]
  0011e	44 0f b6 44 04
	30		 movzx	 r8d, BYTE PTR header$[rsp+rax]
  00124	48 8b 54 24 70	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  00129	48 8b 4c 24 68	 mov	 rcx, QWORD PTR pkeys$[rsp]
  0012e	e8 00 00 00 00	 call	 update_keys
  00133	4c 63 5c 24 20	 movsxd	 r11, DWORD PTR n$[rsp]
  00138	42 0f b6 44 1c
	30		 movzx	 eax, BYTE PTR header$[rsp+r11]
  0013e	8b 54 24 28	 mov	 edx, DWORD PTR t$[rsp]
  00142	33 d0		 xor	 edx, eax
  00144	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR n$[rsp]
  00149	48 8b 44 24 58	 mov	 rax, QWORD PTR buf$[rsp]
  0014e	88 14 08	 mov	 BYTE PTR [rax+rcx], dl

; 125  :     }

  00151	eb a1		 jmp	 SHORT $LN2@crypthead
$LN1@crypthead:

; 126  :     buf[n++] = (unsigned char)zencode(pkeys, pcrc_32_tab, (int)(crcForCrypting >> 16) & 0xff, t);

  00153	48 8b 54 24 70	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  00158	48 8b 4c 24 68	 mov	 rcx, QWORD PTR pkeys$[rsp]
  0015d	e8 00 00 00 00	 call	 decrypt_byte
  00162	89 44 24 28	 mov	 DWORD PTR t$[rsp], eax
  00166	44 8b 44 24 78	 mov	 r8d, DWORD PTR crcForCrypting$[rsp]
  0016b	41 c1 e8 10	 shr	 r8d, 16
  0016f	41 81 e0 ff 00
	00 00		 and	 r8d, 255		; 000000ffH
  00176	48 8b 54 24 70	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  0017b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR pkeys$[rsp]
  00180	e8 00 00 00 00	 call	 update_keys
  00185	8b 44 24 78	 mov	 eax, DWORD PTR crcForCrypting$[rsp]
  00189	c1 e8 10	 shr	 eax, 16
  0018c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00191	8b 54 24 28	 mov	 edx, DWORD PTR t$[rsp]
  00195	33 d0		 xor	 edx, eax
  00197	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR n$[rsp]
  0019c	48 8b 44 24 58	 mov	 rax, QWORD PTR buf$[rsp]
  001a1	88 14 08	 mov	 BYTE PTR [rax+rcx], dl
  001a4	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  001a8	83 c0 01	 add	 eax, 1
  001ab	89 44 24 20	 mov	 DWORD PTR n$[rsp], eax

; 127  :     buf[n++] = (unsigned char)zencode(pkeys, pcrc_32_tab, (int)(crcForCrypting >> 24) & 0xff, t);

  001af	48 8b 54 24 70	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  001b4	48 8b 4c 24 68	 mov	 rcx, QWORD PTR pkeys$[rsp]
  001b9	e8 00 00 00 00	 call	 decrypt_byte
  001be	89 44 24 28	 mov	 DWORD PTR t$[rsp], eax
  001c2	44 8b 44 24 78	 mov	 r8d, DWORD PTR crcForCrypting$[rsp]
  001c7	41 c1 e8 18	 shr	 r8d, 24
  001cb	41 81 e0 ff 00
	00 00		 and	 r8d, 255		; 000000ffH
  001d2	48 8b 54 24 70	 mov	 rdx, QWORD PTR pcrc_32_tab$[rsp]
  001d7	48 8b 4c 24 68	 mov	 rcx, QWORD PTR pkeys$[rsp]
  001dc	e8 00 00 00 00	 call	 update_keys
  001e1	8b 44 24 78	 mov	 eax, DWORD PTR crcForCrypting$[rsp]
  001e5	c1 e8 18	 shr	 eax, 24
  001e8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001ed	8b 54 24 28	 mov	 edx, DWORD PTR t$[rsp]
  001f1	33 d0		 xor	 edx, eax
  001f3	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR n$[rsp]
  001f8	48 8b 44 24 58	 mov	 rax, QWORD PTR buf$[rsp]
  001fd	88 14 08	 mov	 BYTE PTR [rax+rcx], dl
  00200	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  00204	83 c0 01	 add	 eax, 1
  00207	89 44 24 20	 mov	 DWORD PTR n$[rsp], eax

; 128  :     return n;

  0020b	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
$LN9@crypthead:

; 129  : }

  0020f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00213	c3		 ret	 0
crypthead ENDP
PUBLIC	LoadCentralDirectoryRecord
;	COMDAT pdata
; File d:\lp_solve_5.5\xli\xli_zimpl\ziboptvs10\thirdparty\zlib\contrib\minizip\zip.c
pdata	SEGMENT
$pdata$LoadCentralDirectoryRecord DD imagerel $LN48
	DD	imagerel $LN48+1858
	DD	imagerel $unwind$LoadCentralDirectoryRecord
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$LoadCentralDirectoryRecord DD 020c01H
	DD	015010cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT LoadCentralDirectoryRecord
_TEXT	SEGMENT
size_comment$ = 32
VersionNeeded$ = 36
number_disk$ = 40
VersionMadeBy$ = 44
number_entry$ = 48
uL$ = 56
offset_central_dir$ = 64
byte_before_the_zipfile$ = 72
hasZIP64Record$ = 80
size_central_dir$ = 88
number_entry_CD$ = 96
number_disk_with_CD$ = 104
err$ = 108
central_pos$ = 112
sizeEndOfCentralDirectory$80798 = 120
buf_size$80834 = 128
size_central_dir_to_read$80833 = 136
buf_read$80835 = 144
read_this$80841 = 152
pziinit$ = 176
LoadCentralDirectoryRecord PROC				; COMDAT

; 641  : {

$LN48:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 642  :   int err=ZIP_OK;

  0000c	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 643  :   ZPOS64_T byte_before_the_zipfile;/* byte before the zipfile, (>0 for sfx)*/
; 644  : 
; 645  :   ZPOS64_T size_central_dir;     /* size of the central directory  */
; 646  :   ZPOS64_T offset_central_dir;   /* offset of start of central directory */
; 647  :   ZPOS64_T central_pos;
; 648  :   uLong uL;
; 649  : 
; 650  :   uLong number_disk;          /* number of the current dist, used for
; 651  :                               spaning ZIP, unsupported, always 0*/
; 652  :   uLong number_disk_with_CD;  /* number the the disk with central dir, used
; 653  :                               for spaning ZIP, unsupported, always 0*/
; 654  :   ZPOS64_T number_entry;
; 655  :   ZPOS64_T number_entry_CD;      /* total number of entries in
; 656  :                                 the central dir
; 657  :                                 (same than number_entry on nospan) */
; 658  :   uLong VersionMadeBy;
; 659  :   uLong VersionNeeded;
; 660  :   uLong size_comment;
; 661  : 
; 662  :   int hasZIP64Record = 0;

  00014	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR hasZIP64Record$[rsp], 0

; 663  : 
; 664  :   // check first if we find a ZIP64 record
; 665  :   central_pos = zip64local_SearchCentralDir64(&pziinit->z_filefunc,pziinit->filestream);

  0001c	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  00024	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00028	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  00030	e8 00 00 00 00	 call	 zip64local_SearchCentralDir64
  00035	48 89 44 24 70	 mov	 QWORD PTR central_pos$[rsp], rax

; 666  :   if(central_pos > 0)

  0003a	48 83 7c 24 70
	00		 cmp	 QWORD PTR central_pos$[rsp], 0
  00040	76 0a		 jbe	 SHORT $LN45@LoadCentra

; 667  :   {
; 668  :     hasZIP64Record = 1;

  00042	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR hasZIP64Record$[rsp], 1
  0004a	eb 26		 jmp	 SHORT $LN44@LoadCentra
$LN45@LoadCentra:

; 669  :   }
; 670  :   else if(central_pos == 0)

  0004c	48 83 7c 24 70
	00		 cmp	 QWORD PTR central_pos$[rsp], 0
  00052	75 1e		 jne	 SHORT $LN43@LoadCentra

; 671  :   {
; 672  :     central_pos = zip64local_SearchCentralDir(&pziinit->z_filefunc,pziinit->filestream);

  00054	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  0005c	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00060	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  00068	e8 00 00 00 00	 call	 zip64local_SearchCentralDir
  0006d	48 89 44 24 70	 mov	 QWORD PTR central_pos$[rsp], rax
$LN43@LoadCentra:
$LN44@LoadCentra:

; 673  :   }
; 674  : 
; 675  : /* disable to allow appending to empty ZIP archive
; 676  :         if (central_pos==0)
; 677  :             err=ZIP_ERRNO;
; 678  : */
; 679  : 
; 680  :   if(hasZIP64Record)

  00072	83 7c 24 50 00	 cmp	 DWORD PTR hasZIP64Record$[rsp], 0
  00077	0f 84 00 02 00
	00		 je	 $LN42@LoadCentra

; 681  :   {
; 682  :     ZPOS64_T sizeEndOfCentralDirectory;
; 683  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, central_pos, ZLIB_FILEFUNC_SEEK_SET) != 0)

  0007d	45 33 c9	 xor	 r9d, r9d
  00080	4c 8b 44 24 70	 mov	 r8, QWORD PTR central_pos$[rsp]
  00085	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  0008d	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00091	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  00099	e8 00 00 00 00	 call	 call_zseek64
  0009e	85 c0		 test	 eax, eax
  000a0	74 08		 je	 SHORT $LN41@LoadCentra

; 684  :       err=ZIP_ERRNO;

  000a2	c7 44 24 6c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN41@LoadCentra:

; 685  : 
; 686  :     /* the signature, already checked */
; 687  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&uL)!=ZIP_OK)

  000aa	4c 8d 44 24 38	 lea	 r8, QWORD PTR uL$[rsp]
  000af	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  000b7	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  000bb	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  000c3	e8 00 00 00 00	 call	 zip64local_getLong
  000c8	85 c0		 test	 eax, eax
  000ca	74 08		 je	 SHORT $LN40@LoadCentra

; 688  :       err=ZIP_ERRNO;

  000cc	c7 44 24 6c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN40@LoadCentra:

; 689  : 
; 690  :     /* size of zip64 end of central directory record */
; 691  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream, &sizeEndOfCentralDirectory)!=ZIP_OK)

  000d4	4c 8d 44 24 78	 lea	 r8, QWORD PTR sizeEndOfCentralDirectory$80798[rsp]
  000d9	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  000e1	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  000e5	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  000ed	e8 00 00 00 00	 call	 zip64local_getLong64
  000f2	85 c0		 test	 eax, eax
  000f4	74 08		 je	 SHORT $LN39@LoadCentra

; 692  :       err=ZIP_ERRNO;

  000f6	c7 44 24 6c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN39@LoadCentra:

; 693  : 
; 694  :     /* version made by */
; 695  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &VersionMadeBy)!=ZIP_OK)

  000fe	4c 8d 44 24 2c	 lea	 r8, QWORD PTR VersionMadeBy$[rsp]
  00103	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  0010b	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  0010f	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  00117	e8 00 00 00 00	 call	 zip64local_getShort
  0011c	85 c0		 test	 eax, eax
  0011e	74 08		 je	 SHORT $LN38@LoadCentra

; 696  :       err=ZIP_ERRNO;

  00120	c7 44 24 6c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN38@LoadCentra:

; 697  : 
; 698  :     /* version needed to extract */
; 699  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &VersionNeeded)!=ZIP_OK)

  00128	4c 8d 44 24 24	 lea	 r8, QWORD PTR VersionNeeded$[rsp]
  0012d	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  00135	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00139	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  00141	e8 00 00 00 00	 call	 zip64local_getShort
  00146	85 c0		 test	 eax, eax
  00148	74 08		 je	 SHORT $LN37@LoadCentra

; 700  :       err=ZIP_ERRNO;

  0014a	c7 44 24 6c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN37@LoadCentra:

; 701  : 
; 702  :     /* number of this disk */
; 703  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&number_disk)!=ZIP_OK)

  00152	4c 8d 44 24 28	 lea	 r8, QWORD PTR number_disk$[rsp]
  00157	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  0015f	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00163	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  0016b	e8 00 00 00 00	 call	 zip64local_getLong
  00170	85 c0		 test	 eax, eax
  00172	74 08		 je	 SHORT $LN36@LoadCentra

; 704  :       err=ZIP_ERRNO;

  00174	c7 44 24 6c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN36@LoadCentra:

; 705  : 
; 706  :     /* number of the disk with the start of the central directory */
; 707  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&number_disk_with_CD)!=ZIP_OK)

  0017c	4c 8d 44 24 68	 lea	 r8, QWORD PTR number_disk_with_CD$[rsp]
  00181	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  00189	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  0018d	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  00195	e8 00 00 00 00	 call	 zip64local_getLong
  0019a	85 c0		 test	 eax, eax
  0019c	74 08		 je	 SHORT $LN35@LoadCentra

; 708  :       err=ZIP_ERRNO;

  0019e	c7 44 24 6c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN35@LoadCentra:

; 709  : 
; 710  :     /* total number of entries in the central directory on this disk */
; 711  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream, &number_entry)!=ZIP_OK)

  001a6	4c 8d 44 24 30	 lea	 r8, QWORD PTR number_entry$[rsp]
  001ab	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  001b3	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  001b7	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  001bf	e8 00 00 00 00	 call	 zip64local_getLong64
  001c4	85 c0		 test	 eax, eax
  001c6	74 08		 je	 SHORT $LN34@LoadCentra

; 712  :       err=ZIP_ERRNO;

  001c8	c7 44 24 6c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN34@LoadCentra:

; 713  : 
; 714  :     /* total number of entries in the central directory */
; 715  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&number_entry_CD)!=ZIP_OK)

  001d0	4c 8d 44 24 60	 lea	 r8, QWORD PTR number_entry_CD$[rsp]
  001d5	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  001dd	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  001e1	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  001e9	e8 00 00 00 00	 call	 zip64local_getLong64
  001ee	85 c0		 test	 eax, eax
  001f0	74 08		 je	 SHORT $LN33@LoadCentra

; 716  :       err=ZIP_ERRNO;

  001f2	c7 44 24 6c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN33@LoadCentra:

; 717  : 
; 718  :     if ((number_entry_CD!=number_entry) || (number_disk_with_CD!=0) || (number_disk!=0))

  001fa	48 8b 44 24 30	 mov	 rax, QWORD PTR number_entry$[rsp]
  001ff	48 39 44 24 60	 cmp	 QWORD PTR number_entry_CD$[rsp], rax
  00204	75 0e		 jne	 SHORT $LN31@LoadCentra
  00206	83 7c 24 68 00	 cmp	 DWORD PTR number_disk_with_CD$[rsp], 0
  0020b	75 07		 jne	 SHORT $LN31@LoadCentra
  0020d	83 7c 24 28 00	 cmp	 DWORD PTR number_disk$[rsp], 0
  00212	74 08		 je	 SHORT $LN32@LoadCentra
$LN31@LoadCentra:

; 719  :       err=ZIP_BADZIPFILE;

  00214	c7 44 24 6c 99
	ff ff ff	 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN32@LoadCentra:

; 720  : 
; 721  :     /* size of the central directory */
; 722  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&size_central_dir)!=ZIP_OK)

  0021c	4c 8d 44 24 58	 lea	 r8, QWORD PTR size_central_dir$[rsp]
  00221	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  00229	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  0022d	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  00235	e8 00 00 00 00	 call	 zip64local_getLong64
  0023a	85 c0		 test	 eax, eax
  0023c	74 08		 je	 SHORT $LN30@LoadCentra

; 723  :       err=ZIP_ERRNO;

  0023e	c7 44 24 6c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN30@LoadCentra:

; 724  : 
; 725  :     /* offset of start of central directory with respect to the
; 726  :     starting disk number */
; 727  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&offset_central_dir)!=ZIP_OK)

  00246	4c 8d 44 24 40	 lea	 r8, QWORD PTR offset_central_dir$[rsp]
  0024b	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  00253	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00257	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  0025f	e8 00 00 00 00	 call	 zip64local_getLong64
  00264	85 c0		 test	 eax, eax
  00266	74 08		 je	 SHORT $LN29@LoadCentra

; 728  :       err=ZIP_ERRNO;

  00268	c7 44 24 6c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN29@LoadCentra:

; 729  : 
; 730  :     // TODO..
; 731  :     // read the comment from the standard central header.
; 732  :     size_comment = 0;

  00270	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR size_comment$[rsp], 0

; 733  :   }
; 734  :   else

  00278	e9 ef 01 00 00	 jmp	 $LN28@LoadCentra
$LN42@LoadCentra:

; 735  :   {
; 736  :     // Read End of central Directory info
; 737  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0027d	45 33 c9	 xor	 r9d, r9d
  00280	4c 8b 44 24 70	 mov	 r8, QWORD PTR central_pos$[rsp]
  00285	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  0028d	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00291	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  00299	e8 00 00 00 00	 call	 call_zseek64
  0029e	85 c0		 test	 eax, eax
  002a0	74 08		 je	 SHORT $LN27@LoadCentra

; 738  :       err=ZIP_ERRNO;

  002a2	c7 44 24 6c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN27@LoadCentra:

; 739  : 
; 740  :     /* the signature, already checked */
; 741  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&uL)!=ZIP_OK)

  002aa	4c 8d 44 24 38	 lea	 r8, QWORD PTR uL$[rsp]
  002af	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  002b7	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  002bb	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  002c3	e8 00 00 00 00	 call	 zip64local_getLong
  002c8	85 c0		 test	 eax, eax
  002ca	74 08		 je	 SHORT $LN26@LoadCentra

; 742  :       err=ZIP_ERRNO;

  002cc	c7 44 24 6c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN26@LoadCentra:

; 743  : 
; 744  :     /* number of this disk */
; 745  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream,&number_disk)!=ZIP_OK)

  002d4	4c 8d 44 24 28	 lea	 r8, QWORD PTR number_disk$[rsp]
  002d9	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  002e1	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  002e5	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  002ed	e8 00 00 00 00	 call	 zip64local_getShort
  002f2	85 c0		 test	 eax, eax
  002f4	74 08		 je	 SHORT $LN25@LoadCentra

; 746  :       err=ZIP_ERRNO;

  002f6	c7 44 24 6c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN25@LoadCentra:

; 747  : 
; 748  :     /* number of the disk with the start of the central directory */
; 749  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream,&number_disk_with_CD)!=ZIP_OK)

  002fe	4c 8d 44 24 68	 lea	 r8, QWORD PTR number_disk_with_CD$[rsp]
  00303	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  0030b	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  0030f	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  00317	e8 00 00 00 00	 call	 zip64local_getShort
  0031c	85 c0		 test	 eax, eax
  0031e	74 08		 je	 SHORT $LN24@LoadCentra

; 750  :       err=ZIP_ERRNO;

  00320	c7 44 24 6c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN24@LoadCentra:

; 751  : 
; 752  :     /* total number of entries in the central dir on this disk */
; 753  :     number_entry = 0;

  00328	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR number_entry$[rsp], 0

; 754  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  00331	4c 8d 44 24 38	 lea	 r8, QWORD PTR uL$[rsp]
  00336	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  0033e	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00342	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  0034a	e8 00 00 00 00	 call	 zip64local_getShort
  0034f	85 c0		 test	 eax, eax
  00351	74 0a		 je	 SHORT $LN23@LoadCentra

; 755  :       err=ZIP_ERRNO;

  00353	c7 44 24 6c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1

; 756  :     else

  0035b	eb 09		 jmp	 SHORT $LN22@LoadCentra
$LN23@LoadCentra:

; 757  :       number_entry = uL;

  0035d	8b 44 24 38	 mov	 eax, DWORD PTR uL$[rsp]
  00361	48 89 44 24 30	 mov	 QWORD PTR number_entry$[rsp], rax
$LN22@LoadCentra:

; 758  : 
; 759  :     /* total number of entries in the central dir */
; 760  :     number_entry_CD = 0;

  00366	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR number_entry_CD$[rsp], 0

; 761  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  0036f	4c 8d 44 24 38	 lea	 r8, QWORD PTR uL$[rsp]
  00374	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  0037c	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00380	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  00388	e8 00 00 00 00	 call	 zip64local_getShort
  0038d	85 c0		 test	 eax, eax
  0038f	74 0a		 je	 SHORT $LN21@LoadCentra

; 762  :       err=ZIP_ERRNO;

  00391	c7 44 24 6c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1

; 763  :     else

  00399	eb 09		 jmp	 SHORT $LN20@LoadCentra
$LN21@LoadCentra:

; 764  :       number_entry_CD = uL;

  0039b	8b 44 24 38	 mov	 eax, DWORD PTR uL$[rsp]
  0039f	48 89 44 24 60	 mov	 QWORD PTR number_entry_CD$[rsp], rax
$LN20@LoadCentra:

; 765  : 
; 766  :     if ((number_entry_CD!=number_entry) || (number_disk_with_CD!=0) || (number_disk!=0))

  003a4	48 8b 44 24 30	 mov	 rax, QWORD PTR number_entry$[rsp]
  003a9	48 39 44 24 60	 cmp	 QWORD PTR number_entry_CD$[rsp], rax
  003ae	75 0e		 jne	 SHORT $LN18@LoadCentra
  003b0	83 7c 24 68 00	 cmp	 DWORD PTR number_disk_with_CD$[rsp], 0
  003b5	75 07		 jne	 SHORT $LN18@LoadCentra
  003b7	83 7c 24 28 00	 cmp	 DWORD PTR number_disk$[rsp], 0
  003bc	74 08		 je	 SHORT $LN19@LoadCentra
$LN18@LoadCentra:

; 767  :       err=ZIP_BADZIPFILE;

  003be	c7 44 24 6c 99
	ff ff ff	 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN19@LoadCentra:

; 768  : 
; 769  :     /* size of the central directory */
; 770  :     size_central_dir = 0;

  003c6	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR size_central_dir$[rsp], 0

; 771  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  003cf	4c 8d 44 24 38	 lea	 r8, QWORD PTR uL$[rsp]
  003d4	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  003dc	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  003e0	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  003e8	e8 00 00 00 00	 call	 zip64local_getLong
  003ed	85 c0		 test	 eax, eax
  003ef	74 0a		 je	 SHORT $LN17@LoadCentra

; 772  :       err=ZIP_ERRNO;

  003f1	c7 44 24 6c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1

; 773  :     else

  003f9	eb 09		 jmp	 SHORT $LN16@LoadCentra
$LN17@LoadCentra:

; 774  :       size_central_dir = uL;

  003fb	8b 44 24 38	 mov	 eax, DWORD PTR uL$[rsp]
  003ff	48 89 44 24 58	 mov	 QWORD PTR size_central_dir$[rsp], rax
$LN16@LoadCentra:

; 775  : 
; 776  :     /* offset of start of central directory with respect to the starting disk number */
; 777  :     offset_central_dir = 0;

  00404	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR offset_central_dir$[rsp], 0

; 778  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  0040d	4c 8d 44 24 38	 lea	 r8, QWORD PTR uL$[rsp]
  00412	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  0041a	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  0041e	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  00426	e8 00 00 00 00	 call	 zip64local_getLong
  0042b	85 c0		 test	 eax, eax
  0042d	74 0a		 je	 SHORT $LN15@LoadCentra

; 779  :       err=ZIP_ERRNO;

  0042f	c7 44 24 6c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1

; 780  :     else

  00437	eb 09		 jmp	 SHORT $LN14@LoadCentra
$LN15@LoadCentra:

; 781  :       offset_central_dir = uL;

  00439	8b 44 24 38	 mov	 eax, DWORD PTR uL$[rsp]
  0043d	48 89 44 24 40	 mov	 QWORD PTR offset_central_dir$[rsp], rax
$LN14@LoadCentra:

; 782  : 
; 783  : 
; 784  :     /* zipfile global comment length */
; 785  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &size_comment)!=ZIP_OK)

  00442	4c 8d 44 24 20	 lea	 r8, QWORD PTR size_comment$[rsp]
  00447	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  0044f	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00453	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  0045b	e8 00 00 00 00	 call	 zip64local_getShort
  00460	85 c0		 test	 eax, eax
  00462	74 08		 je	 SHORT $LN13@LoadCentra

; 786  :       err=ZIP_ERRNO;

  00464	c7 44 24 6c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN13@LoadCentra:
$LN28@LoadCentra:

; 787  :   }
; 788  : 
; 789  :   if ((central_pos<offset_central_dir+size_central_dir) &&
; 790  :     (err==ZIP_OK))

  0046c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR size_central_dir$[rsp]
  00471	48 8b 44 24 40	 mov	 rax, QWORD PTR offset_central_dir$[rsp]
  00476	48 03 c1	 add	 rax, rcx
  00479	48 39 44 24 70	 cmp	 QWORD PTR central_pos$[rsp], rax
  0047e	73 0f		 jae	 SHORT $LN12@LoadCentra
  00480	83 7c 24 6c 00	 cmp	 DWORD PTR err$[rsp], 0
  00485	75 08		 jne	 SHORT $LN12@LoadCentra

; 791  :     err=ZIP_BADZIPFILE;

  00487	c7 44 24 6c 99
	ff ff ff	 mov	 DWORD PTR err$[rsp], -103 ; ffffffffffffff99H
$LN12@LoadCentra:

; 792  : 
; 793  :   if (err!=ZIP_OK)

  0048f	83 7c 24 6c 00	 cmp	 DWORD PTR err$[rsp], 0
  00494	74 2d		 je	 SHORT $LN11@LoadCentra

; 794  :   {
; 795  :     ZCLOSE64(pziinit->z_filefunc, pziinit->filestream);

  00496	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  0049e	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  004a2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  004aa	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  004ae	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  004b6	ff 50 28	 call	 QWORD PTR [rax+40]

; 796  :     return ZIP_ERRNO;

  004b9	b8 ff ff ff ff	 mov	 eax, -1
  004be	e9 77 02 00 00	 jmp	 $LN46@LoadCentra
$LN11@LoadCentra:

; 797  :   }
; 798  : 
; 799  :   if (size_comment>0)

  004c3	83 7c 24 20 00	 cmp	 DWORD PTR size_comment$[rsp], 0
  004c8	0f 86 85 00 00
	00		 jbe	 $LN10@LoadCentra

; 800  :   {
; 801  :     pziinit->globalcomment = (char*)ALLOC(size_comment+1);

  004ce	8b 44 24 20	 mov	 eax, DWORD PTR size_comment$[rsp]
  004d2	83 c0 01	 add	 eax, 1
  004d5	8b c8		 mov	 ecx, eax
  004d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  004dd	4c 8b d8	 mov	 r11, rax
  004e0	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  004e8	4c 89 98 60 01
	01 00		 mov	 QWORD PTR [rax+65888], r11

; 802  :     if (pziinit->globalcomment)

  004ef	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  004f7	48 83 b8 60 01
	01 00 00	 cmp	 QWORD PTR [rax+65888], 0
  004ff	74 52		 je	 SHORT $LN9@LoadCentra

; 803  :     {
; 804  :       size_comment = ZREAD64(pziinit->z_filefunc, pziinit->filestream, pziinit->globalcomment,size_comment);

  00501	44 8b 4c 24 20	 mov	 r9d, DWORD PTR size_comment$[rsp]
  00506	4c 8b 84 24 b0
	00 00 00	 mov	 r8, QWORD PTR pziinit$[rsp]
  0050e	4d 8b 80 60 01
	01 00		 mov	 r8, QWORD PTR [r8+65888]
  00515	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  0051d	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00521	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  00529	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0052d	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  00535	ff 50 08	 call	 QWORD PTR [rax+8]
  00538	89 44 24 20	 mov	 DWORD PTR size_comment$[rsp], eax

; 805  :       pziinit->globalcomment[size_comment]=0;

  0053c	8b 4c 24 20	 mov	 ecx, DWORD PTR size_comment$[rsp]
  00540	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  00548	48 8b 80 60 01
	01 00		 mov	 rax, QWORD PTR [rax+65888]
  0054f	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0
$LN9@LoadCentra:
$LN10@LoadCentra:

; 806  :     }
; 807  :   }
; 808  : 
; 809  :   byte_before_the_zipfile = central_pos - (offset_central_dir+size_central_dir);

  00553	48 8b 44 24 58	 mov	 rax, QWORD PTR size_central_dir$[rsp]
  00558	48 8b 4c 24 40	 mov	 rcx, QWORD PTR offset_central_dir$[rsp]
  0055d	48 03 c8	 add	 rcx, rax
  00560	48 8b 44 24 70	 mov	 rax, QWORD PTR central_pos$[rsp]
  00565	48 2b c1	 sub	 rax, rcx
  00568	48 89 44 24 48	 mov	 QWORD PTR byte_before_the_zipfile$[rsp], rax

; 810  :   pziinit->add_position_when_writting_offset = byte_before_the_zipfile;

  0056d	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  00575	48 8b 44 24 48	 mov	 rax, QWORD PTR byte_before_the_zipfile$[rsp]
  0057a	48 89 81 50 01
	01 00		 mov	 QWORD PTR [rcx+65872], rax

; 811  : 
; 812  :   {
; 813  :     ZPOS64_T size_central_dir_to_read = size_central_dir;

  00581	48 8b 44 24 58	 mov	 rax, QWORD PTR size_central_dir$[rsp]
  00586	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR size_central_dir_to_read$80833[rsp], rax

; 814  :     size_t buf_size = SIZEDATA_INDATABLOCK;

  0058e	48 c7 84 24 80
	00 00 00 f0 0f
	00 00		 mov	 QWORD PTR buf_size$80834[rsp], 4080 ; 00000ff0H

; 815  :     void* buf_read = (void*)ALLOC(buf_size);

  0059a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR buf_size$80834[rsp]
  005a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  005a8	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR buf_read$80835[rsp], rax

; 816  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, offset_central_dir + byte_before_the_zipfile, ZLIB_FILEFUNC_SEEK_SET) != 0)

  005b0	48 8b 44 24 48	 mov	 rax, QWORD PTR byte_before_the_zipfile$[rsp]
  005b5	4c 8b 44 24 40	 mov	 r8, QWORD PTR offset_central_dir$[rsp]
  005ba	4c 03 c0	 add	 r8, rax
  005bd	45 33 c9	 xor	 r9d, r9d
  005c0	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  005c8	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  005cc	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  005d4	e8 00 00 00 00	 call	 call_zseek64
  005d9	85 c0		 test	 eax, eax
  005db	74 08		 je	 SHORT $LN8@LoadCentra

; 817  :       err=ZIP_ERRNO;

  005dd	c7 44 24 6c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN8@LoadCentra:
$LN7@LoadCentra:

; 818  : 
; 819  :     while ((size_central_dir_to_read>0) && (err==ZIP_OK))

  005e5	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR size_central_dir_to_read$80833[rsp], 0
  005ee	0f 86 cc 00 00
	00		 jbe	 $LN6@LoadCentra
  005f4	83 7c 24 6c 00	 cmp	 DWORD PTR err$[rsp], 0
  005f9	0f 85 c1 00 00
	00		 jne	 $LN6@LoadCentra

; 820  :     {
; 821  :       ZPOS64_T read_this = SIZEDATA_INDATABLOCK;

  005ff	48 c7 84 24 98
	00 00 00 f0 0f
	00 00		 mov	 QWORD PTR read_this$80841[rsp], 4080 ; 00000ff0H

; 822  :       if (read_this > size_central_dir_to_read)

  0060b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR size_central_dir_to_read$80833[rsp]
  00613	48 39 84 24 98
	00 00 00	 cmp	 QWORD PTR read_this$80841[rsp], rax
  0061b	76 10		 jbe	 SHORT $LN5@LoadCentra

; 823  :         read_this = size_central_dir_to_read;

  0061d	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR size_central_dir_to_read$80833[rsp]
  00625	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR read_this$80841[rsp], rax
$LN5@LoadCentra:

; 824  : 
; 825  :       if (ZREAD64(pziinit->z_filefunc, pziinit->filestream,buf_read,(uLong)read_this) != read_this)

  0062d	44 8b 8c 24 98
	00 00 00	 mov	 r9d, DWORD PTR read_this$80841[rsp]
  00635	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR buf_read$80835[rsp]
  0063d	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  00645	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00649	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  00651	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00655	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR pziinit$[rsp]
  0065d	ff 50 08	 call	 QWORD PTR [rax+8]
  00660	8b c0		 mov	 eax, eax
  00662	48 3b 84 24 98
	00 00 00	 cmp	 rax, QWORD PTR read_this$80841[rsp]
  0066a	74 08		 je	 SHORT $LN4@LoadCentra

; 826  :         err=ZIP_ERRNO;

  0066c	c7 44 24 6c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN4@LoadCentra:

; 827  : 
; 828  :       if (err==ZIP_OK)

  00674	83 7c 24 6c 00	 cmp	 DWORD PTR err$[rsp], 0
  00679	75 25		 jne	 SHORT $LN3@LoadCentra

; 829  :         err = add_data_in_datablock(&pziinit->central_dir,buf_read, (uLong)read_this);

  0067b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  00683	48 83 c1 60	 add	 rcx, 96			; 00000060H
  00687	44 8b 84 24 98
	00 00 00	 mov	 r8d, DWORD PTR read_this$80841[rsp]
  0068f	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR buf_read$80835[rsp]
  00697	e8 00 00 00 00	 call	 add_data_in_datablock
  0069c	89 44 24 6c	 mov	 DWORD PTR err$[rsp], eax
$LN3@LoadCentra:

; 830  : 
; 831  :       size_central_dir_to_read-=read_this;

  006a0	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR read_this$80841[rsp]
  006a8	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR size_central_dir_to_read$80833[rsp]
  006b0	48 2b c1	 sub	 rax, rcx
  006b3	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR size_central_dir_to_read$80833[rsp], rax

; 832  :     }

  006bb	e9 25 ff ff ff	 jmp	 $LN7@LoadCentra
$LN6@LoadCentra:

; 833  :     TRYFREE(buf_read);

  006c0	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR buf_read$80835[rsp], 0
  006c9	74 0e		 je	 SHORT $LN2@LoadCentra
  006cb	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR buf_read$80835[rsp]
  006d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN2@LoadCentra:

; 834  :   }
; 835  :   pziinit->begin_pos = byte_before_the_zipfile;

  006d9	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  006e1	48 8b 44 24 48	 mov	 rax, QWORD PTR byte_before_the_zipfile$[rsp]
  006e6	48 89 81 48 01
	01 00		 mov	 QWORD PTR [rcx+65864], rax

; 836  :   pziinit->number_entry = number_entry_CD;

  006ed	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  006f5	48 8b 44 24 60	 mov	 rax, QWORD PTR number_entry_CD$[rsp]
  006fa	48 89 81 58 01
	01 00		 mov	 QWORD PTR [rcx+65880], rax

; 837  : 
; 838  :   if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, offset_central_dir+byte_before_the_zipfile,ZLIB_FILEFUNC_SEEK_SET) != 0)

  00701	48 8b 44 24 48	 mov	 rax, QWORD PTR byte_before_the_zipfile$[rsp]
  00706	4c 8b 44 24 40	 mov	 r8, QWORD PTR offset_central_dir$[rsp]
  0070b	4c 03 c0	 add	 r8, rax
  0070e	45 33 c9	 xor	 r9d, r9d
  00711	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pziinit$[rsp]
  00719	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  0071d	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pziinit$[rsp]
  00725	e8 00 00 00 00	 call	 call_zseek64
  0072a	85 c0		 test	 eax, eax
  0072c	74 08		 je	 SHORT $LN1@LoadCentra

; 839  :     err=ZIP_ERRNO;

  0072e	c7 44 24 6c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN1@LoadCentra:

; 840  : 
; 841  :   return err;

  00736	8b 44 24 6c	 mov	 eax, DWORD PTR err$[rsp]
$LN46@LoadCentra:

; 842  : }

  0073a	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00741	c3		 ret	 0
LoadCentralDirectoryRecord ENDP
PUBLIC	zipCloseFileInZipRaw64
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipCloseFileInZipRaw64 DD imagerel $LN46
	DD	imagerel $LN46+1956
	DD	imagerel $unwind$zipCloseFileInZipRaw64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipCloseFileInZipRaw64 DD 011301H
	DD	0c213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipCloseFileInZipRaw64
_TEXT	SEGMENT
datasize$ = 32
compressed_size$ = 40
err$ = 48
zi$ = 56
invalidValue$ = 64
uTotalOutBefore$81392 = 68
tmp_err$81403 = 72
p$81421 = 80
cur_pos_inzip$81432 = 88
file$ = 112
uncompressed_size$ = 120
crc32$ = 128
zipCloseFileInZipRaw64 PROC				; COMDAT

; 1514 : {

$LN46:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1515 :     zip64_internal* zi;
; 1516 :     ZPOS64_T compressed_size;
; 1517 :     uLong invalidValue = 0xffffffff;

  00013	c7 44 24 40 ff
	ff ff ff	 mov	 DWORD PTR invalidValue$[rsp], -1 ; ffffffffH

; 1518 :     short datasize = 0;

  0001b	33 c0		 xor	 eax, eax
  0001d	66 89 44 24 20	 mov	 WORD PTR datasize$[rsp], ax

; 1519 :     int err=ZIP_OK;

  00022	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1520 : 
; 1521 :     if (file == NULL)

  0002a	48 83 7c 24 70
	00		 cmp	 QWORD PTR file$[rsp], 0
  00030	75 0a		 jne	 SHORT $LN43@zipCloseFi

; 1522 :         return ZIP_PARAMERROR;

  00032	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00037	e9 63 07 00 00	 jmp	 $LN44@zipCloseFi
$LN43@zipCloseFi:

; 1523 :     zi = (zip64_internal*)file;

  0003c	48 8b 44 24 70	 mov	 rax, QWORD PTR file$[rsp]
  00041	48 89 44 24 38	 mov	 QWORD PTR zi$[rsp], rax

; 1524 : 
; 1525 :     if (zi->in_opened_file_inzip == 0)

  00046	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  0004b	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  0004f	75 0a		 jne	 SHORT $LN42@zipCloseFi

; 1526 :         return ZIP_PARAMERROR;

  00051	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00056	e9 44 07 00 00	 jmp	 $LN44@zipCloseFi
$LN42@zipCloseFi:

; 1527 :     zi->ci.stream.avail_in = 0;

  0005b	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  00060	c7 80 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+128], 0

; 1528 : 
; 1529 :     if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  0006a	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  0006f	83 b8 f8 00 00
	00 08		 cmp	 DWORD PTR [rax+248], 8
  00076	0f 85 bd 00 00
	00		 jne	 $LN41@zipCloseFi
  0007c	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  00081	83 b8 fc 00 00
	00 00		 cmp	 DWORD PTR [rax+252], 0
  00088	0f 85 ab 00 00
	00		 jne	 $LN41@zipCloseFi
$LN40@zipCloseFi:

; 1530 :                 {
; 1531 :                         while (err==ZIP_OK)

  0008e	83 7c 24 30 00	 cmp	 DWORD PTR err$[rsp], 0
  00093	0f 85 9e 00 00
	00		 jne	 $LN39@zipCloseFi

; 1532 :                         {
; 1533 :                                 uLong uTotalOutBefore;
; 1534 :                                 if (zi->ci.stream.avail_out == 0)

  00099	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  0009e	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [rax+144], 0
  000a5	75 3e		 jne	 SHORT $LN38@zipCloseFi

; 1535 :                                 {
; 1536 :                                         if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)

  000a7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  000ac	e8 00 00 00 00	 call	 zip64FlushWriteBuffer
  000b1	83 f8 ff	 cmp	 eax, -1
  000b4	75 08		 jne	 SHORT $LN37@zipCloseFi

; 1537 :                                                 err = ZIP_ERRNO;

  000b6	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN37@zipCloseFi:

; 1538 :                                         zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  000be	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  000c3	c7 80 90 00 00
	00 00 00 01 00	 mov	 DWORD PTR [rax+144], 65536 ; 00010000H

; 1539 :                                         zi->ci.stream.next_out = zi->ci.buffered_data;

  000cd	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  000d2	48 81 c1 00 01
	00 00		 add	 rcx, 256		; 00000100H
  000d9	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  000de	48 89 88 88 00
	00 00		 mov	 QWORD PTR [rax+136], rcx
$LN38@zipCloseFi:

; 1540 :                                 }
; 1541 :                                 uTotalOutBefore = zi->ci.stream.total_out;

  000e5	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  000ea	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  000f0	89 44 24 44	 mov	 DWORD PTR uTotalOutBefore$81392[rsp], eax

; 1542 :                                 err=deflate(&zi->ci.stream,  Z_FINISH);

  000f4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  000f9	48 83 c1 78	 add	 rcx, 120		; 00000078H
  000fd	ba 04 00 00 00	 mov	 edx, 4
  00102	e8 00 00 00 00	 call	 deflate
  00107	89 44 24 30	 mov	 DWORD PTR err$[rsp], eax

; 1543 :                                 zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  0010b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  00110	8b 44 24 44	 mov	 eax, DWORD PTR uTotalOutBefore$81392[rsp]
  00114	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [rcx+148]
  0011a	2b c8		 sub	 ecx, eax
  0011c	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  00121	03 88 d4 00 00
	00		 add	 ecx, DWORD PTR [rax+212]
  00127	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  0012c	89 88 d4 00 00
	00		 mov	 DWORD PTR [rax+212], ecx

; 1544 :                         }

  00132	e9 57 ff ff ff	 jmp	 $LN40@zipCloseFi
$LN39@zipCloseFi:

; 1545 :                 }
; 1546 :     else if ((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))

  00137	eb 13		 jmp	 SHORT $LN36@zipCloseFi
$LN41@zipCloseFi:
  00139	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  0013e	83 b8 f8 00 00
	00 0c		 cmp	 DWORD PTR [rax+248], 12
  00145	75 05		 jne	 SHORT $LN35@zipCloseFi
  00147	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
$LN35@zipCloseFi:
$LN36@zipCloseFi:

; 1547 :     {
; 1548 : #ifdef HAVE_BZIP2
; 1549 :       err = BZ_FINISH_OK;
; 1550 :       while (err==BZ_FINISH_OK)
; 1551 :       {
; 1552 :         uLong uTotalOutBefore;
; 1553 :         if (zi->ci.bstream.avail_out == 0)
; 1554 :         {
; 1555 :           if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)
; 1556 :             err = ZIP_ERRNO;
; 1557 :           zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1558 :           zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1559 :         }
; 1560 :         uTotalOutBefore = zi->ci.bstream.total_out_lo32;
; 1561 :         err=BZ2_bzCompress(&zi->ci.bstream,  BZ_FINISH);
; 1562 :         if(err == BZ_STREAM_END)
; 1563 :           err = Z_STREAM_END;
; 1564 : 
; 1565 :         zi->ci.pos_in_buffered_data += (uInt)(zi->ci.bstream.total_out_lo32 - uTotalOutBefore);
; 1566 :       }
; 1567 : 
; 1568 :       if(err == BZ_FINISH_OK)
; 1569 :         err = ZIP_OK;
; 1570 : #endif
; 1571 :     }
; 1572 : 
; 1573 :     if (err==Z_STREAM_END)

  0014c	83 7c 24 30 01	 cmp	 DWORD PTR err$[rsp], 1
  00151	75 08		 jne	 SHORT $LN34@zipCloseFi

; 1574 :         err=ZIP_OK; /* this is normal */

  00153	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0
$LN34@zipCloseFi:

; 1575 : 
; 1576 :     if ((zi->ci.pos_in_buffered_data>0) && (err==ZIP_OK))

  0015b	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  00160	83 b8 d4 00 00
	00 00		 cmp	 DWORD PTR [rax+212], 0
  00167	76 1e		 jbe	 SHORT $LN33@zipCloseFi
  00169	83 7c 24 30 00	 cmp	 DWORD PTR err$[rsp], 0
  0016e	75 17		 jne	 SHORT $LN33@zipCloseFi

; 1577 :                 {
; 1578 :         if (zip64FlushWriteBuffer(zi)==ZIP_ERRNO)

  00170	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  00175	e8 00 00 00 00	 call	 zip64FlushWriteBuffer
  0017a	83 f8 ff	 cmp	 eax, -1
  0017d	75 08		 jne	 SHORT $LN32@zipCloseFi

; 1579 :             err = ZIP_ERRNO;

  0017f	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN32@zipCloseFi:
$LN33@zipCloseFi:

; 1580 :                 }
; 1581 : 
; 1582 :     if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  00187	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  0018c	83 b8 f8 00 00
	00 08		 cmp	 DWORD PTR [rax+248], 8
  00193	75 3e		 jne	 SHORT $LN31@zipCloseFi
  00195	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  0019a	83 b8 fc 00 00
	00 00		 cmp	 DWORD PTR [rax+252], 0
  001a1	75 30		 jne	 SHORT $LN31@zipCloseFi

; 1583 :     {
; 1584 :         int tmp_err = deflateEnd(&zi->ci.stream);

  001a3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  001a8	48 83 c1 78	 add	 rcx, 120		; 00000078H
  001ac	e8 00 00 00 00	 call	 deflateEnd
  001b1	89 44 24 48	 mov	 DWORD PTR tmp_err$81403[rsp], eax

; 1585 :         if (err == ZIP_OK)

  001b5	83 7c 24 30 00	 cmp	 DWORD PTR err$[rsp], 0
  001ba	75 08		 jne	 SHORT $LN30@zipCloseFi

; 1586 :             err = tmp_err;

  001bc	8b 44 24 48	 mov	 eax, DWORD PTR tmp_err$81403[rsp]
  001c0	89 44 24 30	 mov	 DWORD PTR err$[rsp], eax
$LN30@zipCloseFi:

; 1587 :         zi->ci.stream_initialised = 0;

  001c4	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  001c9	c7 80 d0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+208], 0
$LN31@zipCloseFi:

; 1588 :     }
; 1589 : #ifdef HAVE_BZIP2
; 1590 :     else if((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1591 :     {
; 1592 :       int tmperr = BZ2_bzCompressEnd(&zi->ci.bstream);
; 1593 :                         if (err==ZIP_OK)
; 1594 :                                 err = tmperr;
; 1595 :                         zi->ci.stream_initialised = 0;
; 1596 :     }
; 1597 : #endif
; 1598 : 
; 1599 :     if (!zi->ci.raw)

  001d3	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  001d8	83 b8 fc 00 00
	00 00		 cmp	 DWORD PTR [rax+252], 0
  001df	75 23		 jne	 SHORT $LN29@zipCloseFi

; 1600 :     {
; 1601 :         crc32 = (uLong)zi->ci.crc32;

  001e1	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  001e6	8b 80 04 01 01
	00		 mov	 eax, DWORD PTR [rax+65796]
  001ec	89 84 24 80 00
	00 00		 mov	 DWORD PTR crc32$[rsp], eax

; 1602 :         uncompressed_size = zi->ci.totalUncompressedData;

  001f3	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  001f8	48 8b 80 20 01
	01 00		 mov	 rax, QWORD PTR [rax+65824]
  001ff	48 89 44 24 78	 mov	 QWORD PTR uncompressed_size$[rsp], rax
$LN29@zipCloseFi:

; 1603 :     }
; 1604 :     compressed_size = zi->ci.totalCompressedData;

  00204	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  00209	48 8b 80 18 01
	01 00		 mov	 rax, QWORD PTR [rax+65816]
  00210	48 89 44 24 28	 mov	 QWORD PTR compressed_size$[rsp], rax

; 1605 : 
; 1606 : #    ifndef NOCRYPT
; 1607 :     compressed_size += zi->ci.crypt_header_size;

  00215	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  0021a	48 63 88 40 01
	01 00		 movsxd	 rcx, DWORD PTR [rax+65856]
  00221	48 8b 44 24 28	 mov	 rax, QWORD PTR compressed_size$[rsp]
  00226	48 03 c1	 add	 rax, rcx
  00229	48 89 44 24 28	 mov	 QWORD PTR compressed_size$[rsp], rax

; 1608 : #    endif
; 1609 : 
; 1610 :     // update Current Item crc and sizes,
; 1611 :     if(compressed_size >= 0xffffffff || uncompressed_size >= 0xffffffff || zi->ci.pos_local_header >= 0xffffffff)

  0022e	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  00233	48 39 44 24 28	 cmp	 QWORD PTR compressed_size$[rsp], rax
  00238	73 1f		 jae	 SHORT $LN27@zipCloseFi
  0023a	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  0023f	48 39 44 24 78	 cmp	 QWORD PTR uncompressed_size$[rsp], rax
  00244	73 13		 jae	 SHORT $LN27@zipCloseFi
  00246	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  0024b	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  00250	48 39 81 d8 00
	00 00		 cmp	 QWORD PTR [rcx+216], rax
  00257	72 40		 jb	 SHORT $LN28@zipCloseFi
$LN27@zipCloseFi:

; 1612 :     {
; 1613 :       /*version Made by*/
; 1614 :       zip64local_putValue_inmemory(zi->ci.central_header+4,(uLong)45,2);

  00259	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  0025e	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00265	48 83 c1 04	 add	 rcx, 4
  00269	41 b8 02 00 00
	00		 mov	 r8d, 2
  0026f	ba 2d 00 00 00	 mov	 edx, 45			; 0000002dH
  00274	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1615 :       /*version needed*/
; 1616 :       zip64local_putValue_inmemory(zi->ci.central_header+6,(uLong)45,2);

  00279	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  0027e	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00285	48 83 c1 06	 add	 rcx, 6
  00289	41 b8 02 00 00
	00		 mov	 r8d, 2
  0028f	ba 2d 00 00 00	 mov	 edx, 45			; 0000002dH
  00294	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
$LN28@zipCloseFi:

; 1617 : 
; 1618 :     }
; 1619 : 
; 1620 :     zip64local_putValue_inmemory(zi->ci.central_header+16,crc32,4); /*crc*/

  00299	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR crc32$[rsp]
  002a0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  002a5	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  002ac	48 83 c1 10	 add	 rcx, 16
  002b0	41 b8 04 00 00
	00		 mov	 r8d, 4
  002b6	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1621 : 
; 1622 : 
; 1623 :     if(compressed_size >= 0xffffffff)

  002bb	41 bb ff ff ff
	ff		 mov	 r11d, -1		; ffffffffH
  002c1	4c 39 5c 24 28	 cmp	 QWORD PTR compressed_size$[rsp], r11
  002c6	72 21		 jb	 SHORT $LN26@zipCloseFi

; 1624 :       zip64local_putValue_inmemory(zi->ci.central_header+20, invalidValue,4); /*compr size*/

  002c8	8b 54 24 40	 mov	 edx, DWORD PTR invalidValue$[rsp]
  002cc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  002d1	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  002d8	48 83 c1 14	 add	 rcx, 20
  002dc	41 b8 04 00 00
	00		 mov	 r8d, 4
  002e2	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1625 :     else

  002e7	eb 20		 jmp	 SHORT $LN25@zipCloseFi
$LN26@zipCloseFi:

; 1626 :       zip64local_putValue_inmemory(zi->ci.central_header+20, compressed_size,4); /*compr size*/

  002e9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  002ee	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  002f5	48 83 c1 14	 add	 rcx, 20
  002f9	41 b8 04 00 00
	00		 mov	 r8d, 4
  002ff	48 8b 54 24 28	 mov	 rdx, QWORD PTR compressed_size$[rsp]
  00304	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
$LN25@zipCloseFi:

; 1627 : 
; 1628 :     /// set internal file attributes field
; 1629 :     if (zi->ci.stream.data_type == Z_ASCII)

  00309	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  0030e	83 b8 c0 00 00
	00 01		 cmp	 DWORD PTR [rax+192], 1
  00315	75 20		 jne	 SHORT $LN24@zipCloseFi

; 1630 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)Z_ASCII,2);

  00317	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  0031c	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00323	48 83 c1 24	 add	 rcx, 36			; 00000024H
  00327	41 b8 02 00 00
	00		 mov	 r8d, 2
  0032d	ba 01 00 00 00	 mov	 edx, 1
  00332	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
$LN24@zipCloseFi:

; 1631 : 
; 1632 :     if(uncompressed_size >= 0xffffffff)

  00337	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  0033c	48 39 44 24 78	 cmp	 QWORD PTR uncompressed_size$[rsp], rax
  00341	72 21		 jb	 SHORT $LN23@zipCloseFi

; 1633 :       zip64local_putValue_inmemory(zi->ci.central_header+24, invalidValue,4); /*uncompr size*/

  00343	8b 54 24 40	 mov	 edx, DWORD PTR invalidValue$[rsp]
  00347	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  0034c	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00353	48 83 c1 18	 add	 rcx, 24
  00357	41 b8 04 00 00
	00		 mov	 r8d, 4
  0035d	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1634 :     else

  00362	eb 20		 jmp	 SHORT $LN22@zipCloseFi
$LN23@zipCloseFi:

; 1635 :       zip64local_putValue_inmemory(zi->ci.central_header+24, uncompressed_size,4); /*uncompr size*/

  00364	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  00369	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00370	48 83 c1 18	 add	 rcx, 24
  00374	41 b8 04 00 00
	00		 mov	 r8d, 4
  0037a	48 8b 54 24 78	 mov	 rdx, QWORD PTR uncompressed_size$[rsp]
  0037f	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
$LN22@zipCloseFi:

; 1636 : 
; 1637 :     // Add ZIP64 extra info field for uncompressed size
; 1638 :     if(uncompressed_size >= 0xffffffff)

  00384	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  00389	48 39 44 24 78	 cmp	 QWORD PTR uncompressed_size$[rsp], rax
  0038e	72 0d		 jb	 SHORT $LN21@zipCloseFi

; 1639 :       datasize += 8;

  00390	0f bf 44 24 20	 movsx	 eax, WORD PTR datasize$[rsp]
  00395	83 c0 08	 add	 eax, 8
  00398	66 89 44 24 20	 mov	 WORD PTR datasize$[rsp], ax
$LN21@zipCloseFi:

; 1640 : 
; 1641 :     // Add ZIP64 extra info field for compressed size
; 1642 :     if(compressed_size >= 0xffffffff)

  0039d	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  003a2	48 39 44 24 28	 cmp	 QWORD PTR compressed_size$[rsp], rax
  003a7	72 0d		 jb	 SHORT $LN20@zipCloseFi

; 1643 :       datasize += 8;

  003a9	0f bf 44 24 20	 movsx	 eax, WORD PTR datasize$[rsp]
  003ae	83 c0 08	 add	 eax, 8
  003b1	66 89 44 24 20	 mov	 WORD PTR datasize$[rsp], ax
$LN20@zipCloseFi:

; 1644 : 
; 1645 :     // Add ZIP64 extra info field for relative offset to local file header of current file
; 1646 :     if(zi->ci.pos_local_header >= 0xffffffff)

  003b6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  003bb	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  003c0	48 39 81 d8 00
	00 00		 cmp	 QWORD PTR [rcx+216], rax
  003c7	72 0d		 jb	 SHORT $LN19@zipCloseFi

; 1647 :       datasize += 8;

  003c9	0f bf 44 24 20	 movsx	 eax, WORD PTR datasize$[rsp]
  003ce	83 c0 08	 add	 eax, 8
  003d1	66 89 44 24 20	 mov	 WORD PTR datasize$[rsp], ax
$LN19@zipCloseFi:

; 1648 : 
; 1649 :     if(datasize > 0)

  003d6	0f bf 44 24 20	 movsx	 eax, WORD PTR datasize$[rsp]
  003db	85 c0		 test	 eax, eax
  003dd	0f 8e aa 01 00
	00		 jle	 $LN18@zipCloseFi

; 1650 :     {
; 1651 :       char* p = NULL;

  003e3	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR p$81421[rsp], 0

; 1652 : 
; 1653 :       if((uLong)(datasize + 4) > zi->ci.size_centralExtraFree)

  003ec	0f bf 4c 24 20	 movsx	 ecx, WORD PTR datasize$[rsp]
  003f1	83 c1 04	 add	 ecx, 4
  003f4	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  003f9	3b 88 f0 00 00
	00		 cmp	 ecx, DWORD PTR [rax+240]
  003ff	76 0a		 jbe	 SHORT $LN17@zipCloseFi

; 1654 :       {
; 1655 :         // we can not write more data to the buffer that we have room for.
; 1656 :         return ZIP_BADZIPFILE;

  00401	b8 99 ff ff ff	 mov	 eax, -103		; ffffffffffffff99H
  00406	e9 94 03 00 00	 jmp	 $LN44@zipCloseFi
$LN17@zipCloseFi:

; 1657 :       }
; 1658 : 
; 1659 :       p = zi->ci.central_header + zi->ci.size_centralheader;

  0040b	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  00410	8b 80 ec 00 00
	00		 mov	 eax, DWORD PTR [rax+236]
  00416	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  0041b	48 03 81 e0 00
	00 00		 add	 rax, QWORD PTR [rcx+224]
  00422	48 89 44 24 50	 mov	 QWORD PTR p$81421[rsp], rax

; 1660 : 
; 1661 :       // Add Extra Information Header for 'ZIP64 information'
; 1662 :       zip64local_putValue_inmemory(p, 0x0001, 2); // HeaderID

  00427	41 b8 02 00 00
	00		 mov	 r8d, 2
  0042d	ba 01 00 00 00	 mov	 edx, 1
  00432	48 8b 4c 24 50	 mov	 rcx, QWORD PTR p$81421[rsp]
  00437	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1663 :       p += 2;

  0043c	48 8b 44 24 50	 mov	 rax, QWORD PTR p$81421[rsp]
  00441	48 83 c0 02	 add	 rax, 2
  00445	48 89 44 24 50	 mov	 QWORD PTR p$81421[rsp], rax

; 1664 :       zip64local_putValue_inmemory(p, datasize, 2); // DataSize

  0044a	48 0f bf 54 24
	20		 movsx	 rdx, WORD PTR datasize$[rsp]
  00450	41 b8 02 00 00
	00		 mov	 r8d, 2
  00456	48 8b 4c 24 50	 mov	 rcx, QWORD PTR p$81421[rsp]
  0045b	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1665 :       p += 2;

  00460	48 8b 44 24 50	 mov	 rax, QWORD PTR p$81421[rsp]
  00465	48 83 c0 02	 add	 rax, 2
  00469	48 89 44 24 50	 mov	 QWORD PTR p$81421[rsp], rax

; 1666 : 
; 1667 :       if(uncompressed_size >= 0xffffffff)

  0046e	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  00473	48 39 44 24 78	 cmp	 QWORD PTR uncompressed_size$[rsp], rax
  00478	72 23		 jb	 SHORT $LN16@zipCloseFi

; 1668 :       {
; 1669 :         zip64local_putValue_inmemory(p, uncompressed_size, 8);

  0047a	41 b8 08 00 00
	00		 mov	 r8d, 8
  00480	48 8b 54 24 78	 mov	 rdx, QWORD PTR uncompressed_size$[rsp]
  00485	48 8b 4c 24 50	 mov	 rcx, QWORD PTR p$81421[rsp]
  0048a	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1670 :         p += 8;

  0048f	48 8b 44 24 50	 mov	 rax, QWORD PTR p$81421[rsp]
  00494	48 83 c0 08	 add	 rax, 8
  00498	48 89 44 24 50	 mov	 QWORD PTR p$81421[rsp], rax
$LN16@zipCloseFi:

; 1671 :       }
; 1672 : 
; 1673 :       if(compressed_size >= 0xffffffff)

  0049d	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  004a2	48 39 44 24 28	 cmp	 QWORD PTR compressed_size$[rsp], rax
  004a7	72 23		 jb	 SHORT $LN15@zipCloseFi

; 1674 :       {
; 1675 :         zip64local_putValue_inmemory(p, compressed_size, 8);

  004a9	41 b8 08 00 00
	00		 mov	 r8d, 8
  004af	48 8b 54 24 28	 mov	 rdx, QWORD PTR compressed_size$[rsp]
  004b4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR p$81421[rsp]
  004b9	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1676 :         p += 8;

  004be	48 8b 44 24 50	 mov	 rax, QWORD PTR p$81421[rsp]
  004c3	48 83 c0 08	 add	 rax, 8
  004c7	48 89 44 24 50	 mov	 QWORD PTR p$81421[rsp], rax
$LN15@zipCloseFi:

; 1677 :       }
; 1678 : 
; 1679 :       if(zi->ci.pos_local_header >= 0xffffffff)

  004cc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  004d1	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  004d6	48 39 81 d8 00
	00 00		 cmp	 QWORD PTR [rcx+216], rax
  004dd	72 2a		 jb	 SHORT $LN14@zipCloseFi

; 1680 :       {
; 1681 :         zip64local_putValue_inmemory(p, zi->ci.pos_local_header, 8);

  004df	41 b8 08 00 00
	00		 mov	 r8d, 8
  004e5	48 8b 54 24 38	 mov	 rdx, QWORD PTR zi$[rsp]
  004ea	48 8b 92 d8 00
	00 00		 mov	 rdx, QWORD PTR [rdx+216]
  004f1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR p$81421[rsp]
  004f6	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1682 :         p += 8;

  004fb	48 8b 44 24 50	 mov	 rax, QWORD PTR p$81421[rsp]
  00500	48 83 c0 08	 add	 rax, 8
  00504	48 89 44 24 50	 mov	 QWORD PTR p$81421[rsp], rax
$LN14@zipCloseFi:

; 1683 :       }
; 1684 : 
; 1685 :       // Update how much extra free space we got in the memory buffer
; 1686 :       // and increase the centralheader size so the new ZIP64 fields are included
; 1687 :       // ( 4 below is the size of HeaderID and DataSize field )
; 1688 :       zi->ci.size_centralExtraFree -= datasize + 4;

  00509	0f bf 54 24 20	 movsx	 edx, WORD PTR datasize$[rsp]
  0050e	83 c2 04	 add	 edx, 4
  00511	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  00516	8b 88 f0 00 00
	00		 mov	 ecx, DWORD PTR [rax+240]
  0051c	2b ca		 sub	 ecx, edx
  0051e	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  00523	89 88 f0 00 00
	00		 mov	 DWORD PTR [rax+240], ecx

; 1689 :       zi->ci.size_centralheader += datasize + 4;

  00529	0f bf 4c 24 20	 movsx	 ecx, WORD PTR datasize$[rsp]
  0052e	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  00533	8b 80 ec 00 00
	00		 mov	 eax, DWORD PTR [rax+236]
  00539	8d 4c 01 04	 lea	 ecx, DWORD PTR [rcx+rax+4]
  0053d	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  00542	89 88 ec 00 00
	00		 mov	 DWORD PTR [rax+236], ecx

; 1690 : 
; 1691 :       // Update the extra info size field
; 1692 :       zi->ci.size_centralExtra += datasize + 4;

  00548	0f bf 4c 24 20	 movsx	 ecx, WORD PTR datasize$[rsp]
  0054d	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  00552	8b 80 e8 00 00
	00		 mov	 eax, DWORD PTR [rax+232]
  00558	8d 4c 01 04	 lea	 ecx, DWORD PTR [rcx+rax+4]
  0055c	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  00561	89 88 e8 00 00
	00		 mov	 DWORD PTR [rax+232], ecx

; 1693 :       zip64local_putValue_inmemory(zi->ci.central_header+30,(uLong)zi->ci.size_centralExtra,2);

  00567	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  0056c	8b 90 e8 00 00
	00		 mov	 edx, DWORD PTR [rax+232]
  00572	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  00577	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  0057e	48 83 c1 1e	 add	 rcx, 30
  00582	41 b8 02 00 00
	00		 mov	 r8d, 2
  00588	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
$LN18@zipCloseFi:

; 1694 :     }
; 1695 : 
; 1696 :     if (err==ZIP_OK)

  0058d	83 7c 24 30 00	 cmp	 DWORD PTR err$[rsp], 0
  00592	75 2a		 jne	 SHORT $LN13@zipCloseFi

; 1697 :         err = add_data_in_datablock(&zi->central_dir, zi->ci.central_header, (uLong)zi->ci.size_centralheader);

  00594	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  00599	48 83 c1 60	 add	 rcx, 96			; 00000060H
  0059d	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  005a2	44 8b 80 ec 00
	00 00		 mov	 r8d, DWORD PTR [rax+236]
  005a9	48 8b 54 24 38	 mov	 rdx, QWORD PTR zi$[rsp]
  005ae	48 8b 92 e0 00
	00 00		 mov	 rdx, QWORD PTR [rdx+224]
  005b5	e8 00 00 00 00	 call	 add_data_in_datablock
  005ba	89 44 24 30	 mov	 DWORD PTR err$[rsp], eax
$LN13@zipCloseFi:

; 1698 : 
; 1699 :     free(zi->ci.central_header);

  005be	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  005c3	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  005ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1700 : 
; 1701 :     if (err==ZIP_OK)

  005d0	83 7c 24 30 00	 cmp	 DWORD PTR err$[rsp], 0
  005d5	0f 85 98 01 00
	00		 jne	 $LN12@zipCloseFi

; 1702 :     {
; 1703 :         // Update the LocalFileHeader with the new values.
; 1704 : 
; 1705 :         ZPOS64_T cur_pos_inzip = ZTELL64(zi->z_filefunc,zi->filestream);

  005db	48 8b 54 24 38	 mov	 rdx, QWORD PTR zi$[rsp]
  005e0	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  005e4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  005e9	e8 00 00 00 00	 call	 call_ztell64
  005ee	48 89 44 24 58	 mov	 QWORD PTR cur_pos_inzip$81432[rsp], rax

; 1706 : 
; 1707 :         if (ZSEEK64(zi->z_filefunc,zi->filestream, zi->ci.pos_local_header + 14,ZLIB_FILEFUNC_SEEK_SET)!=0)

  005f3	4c 8b 44 24 38	 mov	 r8, QWORD PTR zi$[rsp]
  005f8	4d 8b 80 d8 00
	00 00		 mov	 r8, QWORD PTR [r8+216]
  005ff	49 83 c0 0e	 add	 r8, 14
  00603	45 33 c9	 xor	 r9d, r9d
  00606	48 8b 54 24 38	 mov	 rdx, QWORD PTR zi$[rsp]
  0060b	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  0060f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  00614	e8 00 00 00 00	 call	 call_zseek64
  00619	85 c0		 test	 eax, eax
  0061b	74 08		 je	 SHORT $LN11@zipCloseFi

; 1708 :             err = ZIP_ERRNO;

  0061d	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN11@zipCloseFi:

; 1709 : 
; 1710 :         if (err==ZIP_OK)

  00625	83 7c 24 30 00	 cmp	 DWORD PTR err$[rsp], 0
  0062a	75 25		 jne	 SHORT $LN10@zipCloseFi

; 1711 :             err = zip64local_putValue(&zi->z_filefunc,zi->filestream,crc32,4); /* crc 32, unknown */

  0062c	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR crc32$[rsp]
  00634	41 b9 04 00 00
	00		 mov	 r9d, 4
  0063a	48 8b 54 24 38	 mov	 rdx, QWORD PTR zi$[rsp]
  0063f	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00643	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  00648	e8 00 00 00 00	 call	 zip64local_putValue
  0064d	89 44 24 30	 mov	 DWORD PTR err$[rsp], eax
$LN10@zipCloseFi:

; 1712 : 
; 1713 :         if(uncompressed_size >= 0xffffffff)

  00651	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  00656	48 39 44 24 78	 cmp	 QWORD PTR uncompressed_size$[rsp], rax
  0065b	0f 82 99 00 00
	00		 jb	 $LN9@zipCloseFi

; 1714 :         {
; 1715 :           if(zi->ci.pos_zip64extrainfo > 0)

  00661	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  00666	48 83 b8 10 01
	01 00 00	 cmp	 QWORD PTR [rax+65808], 0
  0066e	0f 86 84 00 00
	00		 jbe	 $LN8@zipCloseFi

; 1716 :           {
; 1717 :             // Update the size in the ZIP64 extended field.
; 1718 :             if (ZSEEK64(zi->z_filefunc,zi->filestream, zi->ci.pos_zip64extrainfo + 4,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00674	4c 8b 44 24 38	 mov	 r8, QWORD PTR zi$[rsp]
  00679	4d 8b 80 10 01
	01 00		 mov	 r8, QWORD PTR [r8+65808]
  00680	49 83 c0 04	 add	 r8, 4
  00684	45 33 c9	 xor	 r9d, r9d
  00687	48 8b 54 24 38	 mov	 rdx, QWORD PTR zi$[rsp]
  0068c	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00690	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  00695	e8 00 00 00 00	 call	 call_zseek64
  0069a	85 c0		 test	 eax, eax
  0069c	74 08		 je	 SHORT $LN7@zipCloseFi

; 1719 :               err = ZIP_ERRNO;

  0069e	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN7@zipCloseFi:

; 1720 : 
; 1721 :             if (err==ZIP_OK) /* compressed size, unknown */

  006a6	83 7c 24 30 00	 cmp	 DWORD PTR err$[rsp], 0
  006ab	75 22		 jne	 SHORT $LN6@zipCloseFi

; 1722 :               err = zip64local_putValue(&zi->z_filefunc, zi->filestream, uncompressed_size, 8);

  006ad	41 b9 08 00 00
	00		 mov	 r9d, 8
  006b3	4c 8b 44 24 78	 mov	 r8, QWORD PTR uncompressed_size$[rsp]
  006b8	48 8b 54 24 38	 mov	 rdx, QWORD PTR zi$[rsp]
  006bd	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  006c1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  006c6	e8 00 00 00 00	 call	 zip64local_putValue
  006cb	89 44 24 30	 mov	 DWORD PTR err$[rsp], eax
$LN6@zipCloseFi:

; 1723 : 
; 1724 :             if (err==ZIP_OK) /* uncompressed size, unknown */

  006cf	83 7c 24 30 00	 cmp	 DWORD PTR err$[rsp], 0
  006d4	75 22		 jne	 SHORT $LN5@zipCloseFi

; 1725 :               err = zip64local_putValue(&zi->z_filefunc, zi->filestream, compressed_size, 8);

  006d6	41 b9 08 00 00
	00		 mov	 r9d, 8
  006dc	4c 8b 44 24 28	 mov	 r8, QWORD PTR compressed_size$[rsp]
  006e1	48 8b 54 24 38	 mov	 rdx, QWORD PTR zi$[rsp]
  006e6	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  006ea	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  006ef	e8 00 00 00 00	 call	 zip64local_putValue
  006f4	89 44 24 30	 mov	 DWORD PTR err$[rsp], eax
$LN5@zipCloseFi:
$LN8@zipCloseFi:

; 1726 :           }
; 1727 :         }
; 1728 :         else

  006f8	eb 52		 jmp	 SHORT $LN4@zipCloseFi
$LN9@zipCloseFi:

; 1729 :         {
; 1730 :           if (err==ZIP_OK) /* compressed size, unknown */

  006fa	83 7c 24 30 00	 cmp	 DWORD PTR err$[rsp], 0
  006ff	75 22		 jne	 SHORT $LN3@zipCloseFi

; 1731 :               err = zip64local_putValue(&zi->z_filefunc,zi->filestream,compressed_size,4);

  00701	41 b9 04 00 00
	00		 mov	 r9d, 4
  00707	4c 8b 44 24 28	 mov	 r8, QWORD PTR compressed_size$[rsp]
  0070c	48 8b 54 24 38	 mov	 rdx, QWORD PTR zi$[rsp]
  00711	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00715	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  0071a	e8 00 00 00 00	 call	 zip64local_putValue
  0071f	89 44 24 30	 mov	 DWORD PTR err$[rsp], eax
$LN3@zipCloseFi:

; 1732 : 
; 1733 :           if (err==ZIP_OK) /* uncompressed size, unknown */

  00723	83 7c 24 30 00	 cmp	 DWORD PTR err$[rsp], 0
  00728	75 22		 jne	 SHORT $LN2@zipCloseFi

; 1734 :               err = zip64local_putValue(&zi->z_filefunc,zi->filestream,uncompressed_size,4);

  0072a	41 b9 04 00 00
	00		 mov	 r9d, 4
  00730	4c 8b 44 24 78	 mov	 r8, QWORD PTR uncompressed_size$[rsp]
  00735	48 8b 54 24 38	 mov	 rdx, QWORD PTR zi$[rsp]
  0073a	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  0073e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  00743	e8 00 00 00 00	 call	 zip64local_putValue
  00748	89 44 24 30	 mov	 DWORD PTR err$[rsp], eax
$LN2@zipCloseFi:
$LN4@zipCloseFi:

; 1735 :         }
; 1736 : 
; 1737 :         if (ZSEEK64(zi->z_filefunc,zi->filestream, cur_pos_inzip,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0074c	45 33 c9	 xor	 r9d, r9d
  0074f	4c 8b 44 24 58	 mov	 r8, QWORD PTR cur_pos_inzip$81432[rsp]
  00754	48 8b 54 24 38	 mov	 rdx, QWORD PTR zi$[rsp]
  00759	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  0075d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  00762	e8 00 00 00 00	 call	 call_zseek64
  00767	85 c0		 test	 eax, eax
  00769	74 08		 je	 SHORT $LN1@zipCloseFi

; 1738 :             err = ZIP_ERRNO;

  0076b	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN1@zipCloseFi:
$LN12@zipCloseFi:

; 1739 :     }
; 1740 : 
; 1741 :     zi->number_entry ++;

  00773	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zi$[rsp]
  00778	48 8b 89 58 01
	01 00		 mov	 rcx, QWORD PTR [rcx+65880]
  0077f	48 83 c1 01	 add	 rcx, 1
  00783	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  00788	48 89 88 58 01
	01 00		 mov	 QWORD PTR [rax+65880], rcx

; 1742 :     zi->in_opened_file_inzip = 0;

  0078f	48 8b 44 24 38	 mov	 rax, QWORD PTR zi$[rsp]
  00794	c7 40 70 00 00
	00 00		 mov	 DWORD PTR [rax+112], 0

; 1743 : 
; 1744 :     return err;

  0079b	8b 44 24 30	 mov	 eax, DWORD PTR err$[rsp]
$LN44@zipCloseFi:

; 1745 : }

  0079f	48 83 c4 68	 add	 rsp, 104		; 00000068H
  007a3	c3		 ret	 0
zipCloseFileInZipRaw64 ENDP
_TEXT	ENDS
PUBLIC	zipCloseFileInZipRaw
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipCloseFileInZipRaw DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$zipCloseFileInZipRaw
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipCloseFileInZipRaw DD 011201H
	DD	04212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipCloseFileInZipRaw
_TEXT	SEGMENT
file$ = 48
uncompressed_size$ = 56
crc32$ = 64
zipCloseFileInZipRaw PROC				; COMDAT

; 1509 : {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1510 :     return zipCloseFileInZipRaw64 (file, uncompressed_size, crc32);

  00012	8b 54 24 38	 mov	 edx, DWORD PTR uncompressed_size$[rsp]
  00016	44 8b 44 24 40	 mov	 r8d, DWORD PTR crc32$[rsp]
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR file$[rsp]
  00020	e8 00 00 00 00	 call	 zipCloseFileInZipRaw64

; 1511 : }

  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
zipCloseFileInZipRaw ENDP
_TEXT	ENDS
PUBLIC	zipWriteInFileInZip
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipWriteInFileInZip DD imagerel $LN18
	DD	imagerel $LN18+735
	DD	imagerel $unwind$zipWriteInFileInZip
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipWriteInFileInZip DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipWriteInFileInZip
_TEXT	SEGMENT
err$ = 32
zi$ = 40
uTotalOutBefore$81351 = 48
bBreak$81353 = 52
copy_this$81356 = 56
i$81357 = 60
file$ = 80
buf$ = 88
len$ = 96
zipWriteInFileInZip PROC				; COMDAT

; 1402 : {

$LN18:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1403 :     zip64_internal* zi;
; 1404 :     int err=ZIP_OK;

  00013	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1405 : 
; 1406 :     if (file == NULL)

  0001b	48 83 7c 24 50
	00		 cmp	 QWORD PTR file$[rsp], 0
  00021	75 0a		 jne	 SHORT $LN15@zipWriteIn

; 1407 :         return ZIP_PARAMERROR;

  00023	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00028	e9 ad 02 00 00	 jmp	 $LN16@zipWriteIn
$LN15@zipWriteIn:

; 1408 :     zi = (zip64_internal*)file;

  0002d	48 8b 44 24 50	 mov	 rax, QWORD PTR file$[rsp]
  00032	48 89 44 24 28	 mov	 QWORD PTR zi$[rsp], rax

; 1409 : 
; 1410 :     if (zi->in_opened_file_inzip == 0)

  00037	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  0003c	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00040	75 0a		 jne	 SHORT $LN14@zipWriteIn

; 1411 :         return ZIP_PARAMERROR;

  00042	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00047	e9 8e 02 00 00	 jmp	 $LN16@zipWriteIn
$LN14@zipWriteIn:

; 1412 : 
; 1413 :     zi->ci.crc32 = crc32(zi->ci.crc32,buf,(uInt)len);

  0004c	44 8b 44 24 60	 mov	 r8d, DWORD PTR len$[rsp]
  00051	48 8b 54 24 58	 mov	 rdx, QWORD PTR buf$[rsp]
  00056	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  0005b	8b 88 04 01 01
	00		 mov	 ecx, DWORD PTR [rax+65796]
  00061	e8 00 00 00 00	 call	 crc32
  00066	44 8b d8	 mov	 r11d, eax
  00069	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  0006e	44 89 98 04 01
	01 00		 mov	 DWORD PTR [rax+65796], r11d

; 1414 : 
; 1415 : #ifdef HAVE_BZIP2
; 1416 :     if(zi->ci.method == Z_BZIP2ED && (!zi->ci.raw))
; 1417 :     {
; 1418 :       zi->ci.bstream.next_in = (void*)buf;
; 1419 :       zi->ci.bstream.avail_in = len;
; 1420 :       err = BZ_RUN_OK;
; 1421 : 
; 1422 :       while ((err==BZ_RUN_OK) && (zi->ci.bstream.avail_in>0))
; 1423 :       {
; 1424 :         if (zi->ci.bstream.avail_out == 0)
; 1425 :         {
; 1426 :           if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)
; 1427 :             err = ZIP_ERRNO;
; 1428 :           zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1429 :           zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1430 :         }
; 1431 : 
; 1432 : 
; 1433 :         if(err != BZ_RUN_OK)
; 1434 :           break;
; 1435 : 
; 1436 :         if ((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1437 :         {
; 1438 :           uLong uTotalOutBefore_lo = zi->ci.bstream.total_out_lo32;
; 1439 : //          uLong uTotalOutBefore_hi = zi->ci.bstream.total_out_hi32;
; 1440 :           err=BZ2_bzCompress(&zi->ci.bstream,  BZ_RUN);
; 1441 : 
; 1442 :           zi->ci.pos_in_buffered_data += (uInt)(zi->ci.bstream.total_out_lo32 - uTotalOutBefore_lo) ;
; 1443 :         }
; 1444 :       }
; 1445 : 
; 1446 :       if(err == BZ_RUN_OK)
; 1447 :         err = ZIP_OK;
; 1448 :     }
; 1449 :     else
; 1450 : #endif
; 1451 :     {
; 1452 :       zi->ci.stream.next_in = (Bytef*)buf;

  00075	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  0007a	48 8b 44 24 58	 mov	 rax, QWORD PTR buf$[rsp]
  0007f	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 1453 :       zi->ci.stream.avail_in = len;

  00083	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  00088	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  0008c	89 81 80 00 00
	00		 mov	 DWORD PTR [rcx+128], eax
$LN13@zipWriteIn:

; 1454 : 
; 1455 :       while ((err==ZIP_OK) && (zi->ci.stream.avail_in>0))

  00092	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  00097	0f 85 39 02 00
	00		 jne	 $LN12@zipWriteIn
  0009d	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  000a2	83 b8 80 00 00
	00 00		 cmp	 DWORD PTR [rax+128], 0
  000a9	0f 86 27 02 00
	00		 jbe	 $LN12@zipWriteIn

; 1456 :       {
; 1457 :           if (zi->ci.stream.avail_out == 0)

  000af	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  000b4	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [rax+144], 0
  000bb	75 3e		 jne	 SHORT $LN11@zipWriteIn

; 1458 :           {
; 1459 :               if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)

  000bd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  000c2	e8 00 00 00 00	 call	 zip64FlushWriteBuffer
  000c7	83 f8 ff	 cmp	 eax, -1
  000ca	75 08		 jne	 SHORT $LN10@zipWriteIn

; 1460 :                   err = ZIP_ERRNO;

  000cc	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN10@zipWriteIn:

; 1461 :               zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  000d4	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  000d9	c7 80 90 00 00
	00 00 00 01 00	 mov	 DWORD PTR [rax+144], 65536 ; 00010000H

; 1462 :               zi->ci.stream.next_out = zi->ci.buffered_data;

  000e3	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  000e8	48 81 c1 00 01
	00 00		 add	 rcx, 256		; 00000100H
  000ef	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  000f4	48 89 88 88 00
	00 00		 mov	 QWORD PTR [rax+136], rcx
$LN11@zipWriteIn:

; 1463 :           }
; 1464 : 
; 1465 : 
; 1466 :           if(err != ZIP_OK)

  000fb	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  00100	74 05		 je	 SHORT $LN9@zipWriteIn

; 1467 :               break;

  00102	e9 cf 01 00 00	 jmp	 $LN12@zipWriteIn
$LN9@zipWriteIn:

; 1468 : 
; 1469 :           if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  00107	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  0010c	83 b8 f8 00 00
	00 08		 cmp	 DWORD PTR [rax+248], 8
  00113	0f 85 81 00 00
	00		 jne	 $LN8@zipWriteIn
  00119	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  0011e	83 b8 fc 00 00
	00 00		 cmp	 DWORD PTR [rax+252], 0
  00125	75 73		 jne	 SHORT $LN8@zipWriteIn

; 1470 :           {
; 1471 :               uLong uTotalOutBefore = zi->ci.stream.total_out;

  00127	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  0012c	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  00132	89 44 24 30	 mov	 DWORD PTR uTotalOutBefore$81351[rsp], eax

; 1472 :               err=deflate(&zi->ci.stream,  Z_NO_FLUSH);

  00136	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  0013b	48 83 c1 78	 add	 rcx, 120		; 00000078H
  0013f	33 d2		 xor	 edx, edx
  00141	e8 00 00 00 00	 call	 deflate
  00146	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax

; 1473 :               if(uTotalOutBefore > zi->ci.stream.total_out)

  0014a	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  0014f	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  00155	39 44 24 30	 cmp	 DWORD PTR uTotalOutBefore$81351[rsp], eax
  00159	76 13		 jbe	 SHORT $LN7@zipWriteIn

; 1474 :               {
; 1475 :                 int bBreak = 0;

  0015b	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR bBreak$81353[rsp], 0

; 1476 :                 bBreak++;

  00163	8b 44 24 34	 mov	 eax, DWORD PTR bBreak$81353[rsp]
  00167	83 c0 01	 add	 eax, 1
  0016a	89 44 24 34	 mov	 DWORD PTR bBreak$81353[rsp], eax
$LN7@zipWriteIn:

; 1477 :               }
; 1478 : 
; 1479 :               zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  0016e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  00173	8b 44 24 30	 mov	 eax, DWORD PTR uTotalOutBefore$81351[rsp]
  00177	8b 89 94 00 00
	00		 mov	 ecx, DWORD PTR [rcx+148]
  0017d	2b c8		 sub	 ecx, eax
  0017f	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00184	03 88 d4 00 00
	00		 add	 ecx, DWORD PTR [rax+212]
  0018a	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  0018f	89 88 d4 00 00
	00		 mov	 DWORD PTR [rax+212], ecx

; 1480 :           }
; 1481 :           else

  00195	e9 37 01 00 00	 jmp	 $LN6@zipWriteIn
$LN8@zipWriteIn:

; 1482 :           {
; 1483 :               uInt copy_this,i;
; 1484 :               if (zi->ci.stream.avail_in < zi->ci.stream.avail_out)

  0019a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  0019f	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  001a4	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  001aa	39 81 80 00 00
	00		 cmp	 DWORD PTR [rcx+128], eax
  001b0	73 11		 jae	 SHORT $LN5@zipWriteIn

; 1485 :                   copy_this = zi->ci.stream.avail_in;

  001b2	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  001b7	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  001bd	89 44 24 38	 mov	 DWORD PTR copy_this$81356[rsp], eax

; 1486 :               else

  001c1	eb 0f		 jmp	 SHORT $LN4@zipWriteIn
$LN5@zipWriteIn:

; 1487 :                   copy_this = zi->ci.stream.avail_out;

  001c3	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  001c8	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  001ce	89 44 24 38	 mov	 DWORD PTR copy_this$81356[rsp], eax
$LN4@zipWriteIn:

; 1488 : 
; 1489 :               for (i = 0; i < copy_this; i++)

  001d2	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR i$81357[rsp], 0
  001da	eb 0b		 jmp	 SHORT $LN3@zipWriteIn
$LN2@zipWriteIn:
  001dc	8b 44 24 3c	 mov	 eax, DWORD PTR i$81357[rsp]
  001e0	83 c0 01	 add	 eax, 1
  001e3	89 44 24 3c	 mov	 DWORD PTR i$81357[rsp], eax
$LN3@zipWriteIn:
  001e7	8b 44 24 38	 mov	 eax, DWORD PTR copy_this$81356[rsp]
  001eb	39 44 24 3c	 cmp	 DWORD PTR i$81357[rsp], eax
  001ef	73 28		 jae	 SHORT $LN1@zipWriteIn

; 1490 :                   *(((char*)zi->ci.stream.next_out)+i) =
; 1491 :                       *(((const char*)zi->ci.stream.next_in)+i);

  001f1	44 8b 44 24 3c	 mov	 r8d, DWORD PTR i$81357[rsp]
  001f6	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  001fb	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  001ff	8b 54 24 3c	 mov	 edx, DWORD PTR i$81357[rsp]
  00203	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  00208	48 8b 89 88 00
	00 00		 mov	 rcx, QWORD PTR [rcx+136]
  0020f	41 0f b6 04 00	 movzx	 eax, BYTE PTR [r8+rax]
  00214	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00217	eb c3		 jmp	 SHORT $LN2@zipWriteIn
$LN1@zipWriteIn:

; 1492 :               {
; 1493 :                   zi->ci.stream.avail_in -= copy_this;

  00219	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  0021e	8b 44 24 38	 mov	 eax, DWORD PTR copy_this$81356[rsp]
  00222	8b 89 80 00 00
	00		 mov	 ecx, DWORD PTR [rcx+128]
  00228	2b c8		 sub	 ecx, eax
  0022a	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  0022f	89 88 80 00 00
	00		 mov	 DWORD PTR [rax+128], ecx

; 1494 :                   zi->ci.stream.avail_out-= copy_this;

  00235	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  0023a	8b 44 24 38	 mov	 eax, DWORD PTR copy_this$81356[rsp]
  0023e	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [rcx+144]
  00244	2b c8		 sub	 ecx, eax
  00246	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  0024b	89 88 90 00 00
	00		 mov	 DWORD PTR [rax+144], ecx

; 1495 :                   zi->ci.stream.next_in+= copy_this;

  00251	8b 4c 24 38	 mov	 ecx, DWORD PTR copy_this$81356[rsp]
  00255	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  0025a	48 03 48 78	 add	 rcx, QWORD PTR [rax+120]
  0025e	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00263	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 1496 :                   zi->ci.stream.next_out+= copy_this;

  00267	8b 4c 24 38	 mov	 ecx, DWORD PTR copy_this$81356[rsp]
  0026b	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00270	48 03 88 88 00
	00 00		 add	 rcx, QWORD PTR [rax+136]
  00277	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  0027c	48 89 88 88 00
	00 00		 mov	 QWORD PTR [rax+136], rcx

; 1497 :                   zi->ci.stream.total_in+= copy_this;

  00283	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00288	8b 88 84 00 00
	00		 mov	 ecx, DWORD PTR [rax+132]
  0028e	03 4c 24 38	 add	 ecx, DWORD PTR copy_this$81356[rsp]
  00292	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  00297	89 88 84 00 00
	00		 mov	 DWORD PTR [rax+132], ecx

; 1498 :                   zi->ci.stream.total_out+= copy_this;

  0029d	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  002a2	8b 88 94 00 00
	00		 mov	 ecx, DWORD PTR [rax+148]
  002a8	03 4c 24 38	 add	 ecx, DWORD PTR copy_this$81356[rsp]
  002ac	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  002b1	89 88 94 00 00
	00		 mov	 DWORD PTR [rax+148], ecx

; 1499 :                   zi->ci.pos_in_buffered_data += copy_this;

  002b7	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  002bc	8b 88 d4 00 00
	00		 mov	 ecx, DWORD PTR [rax+212]
  002c2	03 4c 24 38	 add	 ecx, DWORD PTR copy_this$81356[rsp]
  002c6	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
  002cb	89 88 d4 00 00
	00		 mov	 DWORD PTR [rax+212], ecx
$LN6@zipWriteIn:

; 1500 :               }
; 1501 :           }
; 1502 :       }// while(...)

  002d1	e9 bc fd ff ff	 jmp	 $LN13@zipWriteIn
$LN12@zipWriteIn:

; 1503 :     }
; 1504 : 
; 1505 :     return err;

  002d6	8b 44 24 20	 mov	 eax, DWORD PTR err$[rsp]
$LN16@zipWriteIn:

; 1506 : }

  002da	48 83 c4 48	 add	 rsp, 72			; 00000048H
  002de	c3		 ret	 0
zipWriteInFileInZip ENDP
_TEXT	ENDS
PUBLIC	$T84323
PUBLIC	zipOpen3
EXTRN	__chkstk:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpen3 DD imagerel $LN16
	DD	imagerel $LN16+540
	DD	imagerel $unwind$zipOpen3
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpen3 DD 042201H
	DD	020410122H
	DD	060147015H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipOpen3
_TEXT	SEGMENT
err$ = 32
zi$ = 40
ziinit$ = 48
$T84323 = 65952
tv69 = 66040
pathname$ = 66080
append$ = 66088
globalcomment$ = 66096
pzlib_filefunc64_32_def$ = 66104
zipOpen3 PROC						; COMDAT

; 850  : {

$LN16:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	b8 08 02 01 00	 mov	 eax, 66056		; 00010208H
  0001a	e8 00 00 00 00	 call	 __chkstk
  0001f	48 2b e0	 sub	 rsp, rax

; 851  :     zip64_internal ziinit;
; 852  :     zip64_internal* zi;
; 853  :     int err=ZIP_OK;

  00022	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 854  : 
; 855  :     ziinit.z_filefunc.zseek32_file = NULL;

  0002a	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR ziinit$[rsp+80], 0

; 856  :     ziinit.z_filefunc.ztell32_file = NULL;

  00036	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR ziinit$[rsp+72], 0

; 857  :     if (pzlib_filefunc64_32_def==NULL)

  0003f	48 83 bc 24 38
	02 01 00 00	 cmp	 QWORD PTR pzlib_filefunc64_32_def$[rsp], 0
  00048	75 0c		 jne	 SHORT $LN11@zipOpen3

; 858  :         fill_fopen64_filefunc(&ziinit.z_filefunc.zfile_func64);

  0004a	48 8d 4c 24 30	 lea	 rcx, QWORD PTR ziinit$[rsp]
  0004f	e8 00 00 00 00	 call	 fill_fopen64_filefunc

; 859  :     else

  00054	eb 2b		 jmp	 SHORT $LN10@zipOpen3
$LN11@zipOpen3:

; 860  :         ziinit.z_filefunc = *pzlib_filefunc64_32_def;

  00056	48 8d bc 24 a0
	01 01 00	 lea	 rdi, QWORD PTR $T84323[rsp]
  0005e	48 8b b4 24 38
	02 01 00	 mov	 rsi, QWORD PTR pzlib_filefunc64_32_def$[rsp]
  00066	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  0006b	f3 a4		 rep movsb
  0006d	48 8d 7c 24 30	 lea	 rdi, QWORD PTR ziinit$[rsp]
  00072	48 8d b4 24 a0
	01 01 00	 lea	 rsi, QWORD PTR $T84323[rsp]
  0007a	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  0007f	f3 a4		 rep movsb
$LN10@zipOpen3:

; 861  : 
; 862  :     ziinit.filestream = ZOPEN64(ziinit.z_filefunc,
; 863  :                   pathname,
; 864  :                   (append == APPEND_STATUS_CREATE) ?
; 865  :                   (ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_CREATE) :
; 866  :                     (ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_EXISTING));

  00081	83 bc 24 28 02
	01 00 00	 cmp	 DWORD PTR append$[rsp], 0
  00089	75 0d		 jne	 SHORT $LN14@zipOpen3
  0008b	c7 84 24 f8 01
	01 00 0b 00 00
	00		 mov	 DWORD PTR tv69[rsp], 11
  00096	eb 0b		 jmp	 SHORT $LN15@zipOpen3
$LN14@zipOpen3:
  00098	c7 84 24 f8 01
	01 00 07 00 00
	00		 mov	 DWORD PTR tv69[rsp], 7
$LN15@zipOpen3:
  000a3	44 8b 84 24 f8
	01 01 00	 mov	 r8d, DWORD PTR tv69[rsp]
  000ab	48 8b 94 24 20
	02 01 00	 mov	 rdx, QWORD PTR pathname$[rsp]
  000b3	48 8d 4c 24 30	 lea	 rcx, QWORD PTR ziinit$[rsp]
  000b8	e8 00 00 00 00	 call	 call_zopen64
  000bd	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR ziinit$[rsp+88], rax

; 867  : 
; 868  :     if (ziinit.filestream == NULL)

  000c5	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR ziinit$[rsp+88], 0
  000ce	75 07		 jne	 SHORT $LN9@zipOpen3

; 869  :         return NULL;

  000d0	33 c0		 xor	 eax, eax
  000d2	e9 3b 01 00 00	 jmp	 $LN12@zipOpen3
$LN9@zipOpen3:

; 870  : 
; 871  :     if (append == APPEND_STATUS_CREATEAFTER)

  000d7	83 bc 24 28 02
	01 00 01	 cmp	 DWORD PTR append$[rsp], 1
  000df	75 1b		 jne	 SHORT $LN8@zipOpen3

; 872  :         ZSEEK64(ziinit.z_filefunc,ziinit.filestream,0,SEEK_END);

  000e1	41 b9 02 00 00
	00		 mov	 r9d, 2
  000e7	45 33 c0	 xor	 r8d, r8d
  000ea	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR ziinit$[rsp+88]
  000f2	48 8d 4c 24 30	 lea	 rcx, QWORD PTR ziinit$[rsp]
  000f7	e8 00 00 00 00	 call	 call_zseek64
$LN8@zipOpen3:

; 873  : 
; 874  :     ziinit.begin_pos = ZTELL64(ziinit.z_filefunc,ziinit.filestream);

  000fc	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR ziinit$[rsp+88]
  00104	48 8d 4c 24 30	 lea	 rcx, QWORD PTR ziinit$[rsp]
  00109	e8 00 00 00 00	 call	 call_ztell64
  0010e	48 89 84 24 78
	01 01 00	 mov	 QWORD PTR ziinit$[rsp+65864], rax

; 875  :     ziinit.in_opened_file_inzip = 0;

  00116	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ziinit$[rsp+112], 0

; 876  :     ziinit.ci.stream_initialised = 0;

  00121	c7 84 24 00 01
	00 00 00 00 00
	00		 mov	 DWORD PTR ziinit$[rsp+208], 0

; 877  :     ziinit.number_entry = 0;

  0012c	48 c7 84 24 88
	01 01 00 00 00
	00 00		 mov	 QWORD PTR ziinit$[rsp+65880], 0

; 878  :     ziinit.add_position_when_writting_offset = 0;

  00138	48 c7 84 24 80
	01 01 00 00 00
	00 00		 mov	 QWORD PTR ziinit$[rsp+65872], 0

; 879  :     init_linkedlist(&(ziinit.central_dir));

  00144	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR ziinit$[rsp+96]
  0014c	e8 00 00 00 00	 call	 init_linkedlist

; 880  : 
; 881  : 
; 882  : 
; 883  :     zi = (zip64_internal*)ALLOC(sizeof(zip64_internal));

  00151	b9 68 01 01 00	 mov	 ecx, 65896		; 00010168H
  00156	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0015c	48 89 44 24 28	 mov	 QWORD PTR zi$[rsp], rax

; 884  :     if (zi==NULL)

  00161	48 83 7c 24 28
	00		 cmp	 QWORD PTR zi$[rsp], 0
  00167	75 18		 jne	 SHORT $LN7@zipOpen3

; 885  :     {
; 886  :         ZCLOSE64(ziinit.z_filefunc,ziinit.filestream);

  00169	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR ziinit$[rsp+88]
  00171	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ziinit$[rsp+56]
  00176	ff 54 24 58	 call	 QWORD PTR ziinit$[rsp+40]

; 887  :         return NULL;

  0017a	33 c0		 xor	 eax, eax
  0017c	e9 91 00 00 00	 jmp	 $LN12@zipOpen3
$LN7@zipOpen3:

; 888  :     }
; 889  : 
; 890  :     /* now we add file in a zipfile */
; 891  : #    ifndef NO_ADDFILEINEXISTINGZIP
; 892  :     ziinit.globalcomment = NULL;

  00181	48 c7 84 24 90
	01 01 00 00 00
	00 00		 mov	 QWORD PTR ziinit$[rsp+65888], 0

; 893  :     if (append == APPEND_STATUS_ADDINZIP)

  0018d	83 bc 24 28 02
	01 00 02	 cmp	 DWORD PTR append$[rsp], 2
  00195	75 0e		 jne	 SHORT $LN6@zipOpen3

; 894  :     {
; 895  :       // Read and Cache Central Directory Records
; 896  :       err = LoadCentralDirectoryRecord(&ziinit);

  00197	48 8d 4c 24 30	 lea	 rcx, QWORD PTR ziinit$[rsp]
  0019c	e8 00 00 00 00	 call	 LoadCentralDirectoryRecord
  001a1	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax
$LN6@zipOpen3:

; 897  :     }
; 898  : 
; 899  :     if (globalcomment)

  001a5	48 83 bc 24 30
	02 01 00 00	 cmp	 QWORD PTR globalcomment$[rsp], 0
  001ae	74 13		 je	 SHORT $LN5@zipOpen3

; 900  :     {
; 901  :       *globalcomment = ziinit.globalcomment;

  001b0	48 8b 8c 24 30
	02 01 00	 mov	 rcx, QWORD PTR globalcomment$[rsp]
  001b8	48 8b 84 24 90
	01 01 00	 mov	 rax, QWORD PTR ziinit$[rsp+65888]
  001c0	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN5@zipOpen3:

; 902  :     }
; 903  : #    endif /* !NO_ADDFILEINEXISTINGZIP*/
; 904  : 
; 905  :     if (err != ZIP_OK)

  001c3	83 7c 24 20 00	 cmp	 DWORD PTR err$[rsp], 0
  001c8	74 32		 je	 SHORT $LN4@zipOpen3

; 906  :     {
; 907  : #    ifndef NO_ADDFILEINEXISTINGZIP
; 908  :         TRYFREE(ziinit.globalcomment);

  001ca	48 83 bc 24 90
	01 01 00 00	 cmp	 QWORD PTR ziinit$[rsp+65888], 0
  001d3	74 0e		 je	 SHORT $LN3@zipOpen3
  001d5	48 8b 8c 24 90
	01 01 00	 mov	 rcx, QWORD PTR ziinit$[rsp+65888]
  001dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN3@zipOpen3:

; 909  : #    endif /* !NO_ADDFILEINEXISTINGZIP*/
; 910  :         TRYFREE(zi);

  001e3	48 83 7c 24 28
	00		 cmp	 QWORD PTR zi$[rsp], 0
  001e9	74 0b		 je	 SHORT $LN2@zipOpen3
  001eb	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zi$[rsp]
  001f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN2@zipOpen3:

; 911  :         return NULL;

  001f6	33 c0		 xor	 eax, eax
  001f8	eb 18		 jmp	 SHORT $LN12@zipOpen3

; 912  :     }
; 913  :     else

  001fa	eb 16		 jmp	 SHORT $LN1@zipOpen3
$LN4@zipOpen3:

; 914  :     {
; 915  :         *zi = ziinit;

  001fc	48 8d 74 24 30	 lea	 rsi, QWORD PTR ziinit$[rsp]
  00201	48 8b 7c 24 28	 mov	 rdi, QWORD PTR zi$[rsp]
  00206	b9 68 01 01 00	 mov	 ecx, 65896		; 00010168H
  0020b	f3 a4		 rep movsb

; 916  :         return (zipFile)zi;

  0020d	48 8b 44 24 28	 mov	 rax, QWORD PTR zi$[rsp]
$LN1@zipOpen3:
$LN12@zipOpen3:

; 917  :     }
; 918  : }

  00212	48 81 c4 08 02
	01 00		 add	 rsp, 66056		; 00010208H
  00219	5f		 pop	 rdi
  0021a	5e		 pop	 rsi
  0021b	c3		 ret	 0
zipOpen3 ENDP
PUBLIC	zipCloseFileInZip
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipCloseFileInZip DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$zipCloseFileInZip
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipCloseFileInZip DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipCloseFileInZip
_TEXT	SEGMENT
file$ = 48
zipCloseFileInZip PROC					; COMDAT

; 1748 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1749 :     return zipCloseFileInZipRaw (file,0,0);

  00009	45 33 c0	 xor	 r8d, r8d
  0000c	33 d2		 xor	 edx, edx
  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR file$[rsp]
  00013	e8 00 00 00 00	 call	 zipCloseFileInZipRaw

; 1750 : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
zipCloseFileInZip ENDP
_TEXT	ENDS
PUBLIC	zipOpenNewFileInZip4_64
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip4_64 DD imagerel $LN44
	DD	imagerel $LN44+2364
	DD	imagerel $unwind$zipOpenNewFileInZip4_64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip4_64 DD 011801H
	DD	0e218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipOpenNewFileInZip4_64
_TEXT	SEGMENT
size_comment$ = 64
i$ = 68
err$ = 72
size_filename$ = 76
zi$ = 80
sizeHead$81112 = 88
bufHead$81111 = 96
file$ = 128
filename$ = 136
zipfi$ = 144
extrafield_local$ = 152
size_extrafield_local$ = 160
extrafield_global$ = 168
size_extrafield_global$ = 176
comment$ = 184
method$ = 192
level$ = 200
raw$ = 208
windowBits$ = 216
memLevel$ = 224
strategy$ = 232
password$ = 240
crcForCrypting$ = 248
versionMadeBy$ = 256
flagBase$ = 264
zip64$ = 272
zipOpenNewFileInZip4_64 PROC				; COMDAT

; 1062 : {

$LN44:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1063 :     zip64_internal* zi;
; 1064 :     uInt size_filename;
; 1065 :     uInt size_comment;
; 1066 :     uInt i;
; 1067 :     int err = ZIP_OK;

  00018	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1068 : 
; 1069 : #    ifdef NOCRYPT
; 1070 :     if (password != NULL)
; 1071 :         return ZIP_PARAMERROR;
; 1072 : #    endif
; 1073 : 
; 1074 :     if (file == NULL)

  00020	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR file$[rsp], 0
  00029	75 0a		 jne	 SHORT $LN41@zipOpenNew

; 1075 :         return ZIP_PARAMERROR;

  0002b	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00030	e9 02 09 00 00	 jmp	 $LN42@zipOpenNew
$LN41@zipOpenNew:

; 1076 : 
; 1077 : #ifdef HAVE_BZIP2
; 1078 :     if ((method!=0) && (method!=Z_DEFLATED) && (method!=Z_BZIP2ED))
; 1079 :       return ZIP_PARAMERROR;
; 1080 : #else
; 1081 :     if ((method!=0) && (method!=Z_DEFLATED))

  00035	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR method$[rsp], 0
  0003d	74 14		 je	 SHORT $LN40@zipOpenNew
  0003f	83 bc 24 c0 00
	00 00 08	 cmp	 DWORD PTR method$[rsp], 8
  00047	74 0a		 je	 SHORT $LN40@zipOpenNew

; 1082 :       return ZIP_PARAMERROR;

  00049	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  0004e	e9 e4 08 00 00	 jmp	 $LN42@zipOpenNew
$LN40@zipOpenNew:

; 1083 : #endif
; 1084 : 
; 1085 :     zi = (zip64_internal*)file;

  00053	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR file$[rsp]
  0005b	48 89 44 24 50	 mov	 QWORD PTR zi$[rsp], rax

; 1086 : 
; 1087 :     if (zi->in_opened_file_inzip == 1)

  00060	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00065	83 78 70 01	 cmp	 DWORD PTR [rax+112], 1
  00069	75 21		 jne	 SHORT $LN39@zipOpenNew

; 1088 :     {
; 1089 :         err = zipCloseFileInZip (file);

  0006b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  00073	e8 00 00 00 00	 call	 zipCloseFileInZip
  00078	89 44 24 48	 mov	 DWORD PTR err$[rsp], eax

; 1090 :         if (err != ZIP_OK)

  0007c	83 7c 24 48 00	 cmp	 DWORD PTR err$[rsp], 0
  00081	74 09		 je	 SHORT $LN38@zipOpenNew

; 1091 :             return err;

  00083	8b 44 24 48	 mov	 eax, DWORD PTR err$[rsp]
  00087	e9 ab 08 00 00	 jmp	 $LN42@zipOpenNew
$LN38@zipOpenNew:
$LN39@zipOpenNew:

; 1092 :     }
; 1093 : 
; 1094 :     if (filename==NULL)

  0008c	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR filename$[rsp], 0
  00095	75 0f		 jne	 SHORT $LN37@zipOpenNew

; 1095 :         filename="-";

  00097	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_01JOAMLHOP@?9?$AA@
  0009e	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR filename$[rsp], rax
$LN37@zipOpenNew:

; 1096 : 
; 1097 :     if (comment==NULL)

  000a6	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR comment$[rsp], 0
  000af	75 0a		 jne	 SHORT $LN36@zipOpenNew

; 1098 :         size_comment = 0;

  000b1	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR size_comment$[rsp], 0

; 1099 :     else

  000b9	eb 11		 jmp	 SHORT $LN35@zipOpenNew
$LN36@zipOpenNew:

; 1100 :         size_comment = (uInt)strlen(comment);

  000bb	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR comment$[rsp]
  000c3	e8 00 00 00 00	 call	 strlen
  000c8	89 44 24 40	 mov	 DWORD PTR size_comment$[rsp], eax
$LN35@zipOpenNew:

; 1101 : 
; 1102 :     size_filename = (uInt)strlen(filename);

  000cc	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  000d4	e8 00 00 00 00	 call	 strlen
  000d9	89 44 24 4c	 mov	 DWORD PTR size_filename$[rsp], eax

; 1103 : 
; 1104 :     if (zipfi == NULL)

  000dd	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR zipfi$[rsp], 0
  000e6	75 11		 jne	 SHORT $LN34@zipOpenNew

; 1105 :         zi->ci.dosDate = 0;

  000e8	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  000ed	c7 80 00 01 01
	00 00 00 00 00	 mov	 DWORD PTR [rax+65792], 0

; 1106 :     else

  000f7	eb 42		 jmp	 SHORT $LN33@zipOpenNew
$LN34@zipOpenNew:

; 1107 :     {
; 1108 :         if (zipfi->dosDate != 0)

  000f9	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR zipfi$[rsp]
  00101	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  00105	74 18		 je	 SHORT $LN32@zipOpenNew

; 1109 :             zi->ci.dosDate = zipfi->dosDate;

  00107	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  0010c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR zipfi$[rsp]
  00114	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00117	89 81 00 01 01
	00		 mov	 DWORD PTR [rcx+65792], eax

; 1110 :         else

  0011d	eb 1c		 jmp	 SHORT $LN31@zipOpenNew
$LN32@zipOpenNew:

; 1111 :           zi->ci.dosDate = zip64local_TmzDateToDosDate(&zipfi->tmz_date);

  0011f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR zipfi$[rsp]
  00127	e8 00 00 00 00	 call	 zip64local_TmzDateToDosDate
  0012c	44 8b d8	 mov	 r11d, eax
  0012f	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00134	44 89 98 00 01
	01 00		 mov	 DWORD PTR [rax+65792], r11d
$LN31@zipOpenNew:
$LN33@zipOpenNew:

; 1112 :     }
; 1113 : 
; 1114 :     zi->ci.flag = flagBase;

  0013b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00140	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR flagBase$[rsp]
  00147	89 81 f4 00 00
	00		 mov	 DWORD PTR [rcx+244], eax

; 1115 :     if ((level==8) || (level==9))

  0014d	83 bc 24 c8 00
	00 00 08	 cmp	 DWORD PTR level$[rsp], 8
  00155	74 0a		 je	 SHORT $LN29@zipOpenNew
  00157	83 bc 24 c8 00
	00 00 09	 cmp	 DWORD PTR level$[rsp], 9
  0015f	75 19		 jne	 SHORT $LN30@zipOpenNew
$LN29@zipOpenNew:

; 1116 :       zi->ci.flag |= 2;

  00161	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00166	8b 88 f4 00 00
	00		 mov	 ecx, DWORD PTR [rax+244]
  0016c	83 c9 02	 or	 ecx, 2
  0016f	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00174	89 88 f4 00 00
	00		 mov	 DWORD PTR [rax+244], ecx
$LN30@zipOpenNew:

; 1117 :     if ((level==2))

  0017a	83 bc 24 c8 00
	00 00 02	 cmp	 DWORD PTR level$[rsp], 2
  00182	75 19		 jne	 SHORT $LN28@zipOpenNew

; 1118 :       zi->ci.flag |= 4;

  00184	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00189	8b 88 f4 00 00
	00		 mov	 ecx, DWORD PTR [rax+244]
  0018f	83 c9 04	 or	 ecx, 4
  00192	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00197	89 88 f4 00 00
	00		 mov	 DWORD PTR [rax+244], ecx
$LN28@zipOpenNew:

; 1119 :     if ((level==1))

  0019d	83 bc 24 c8 00
	00 00 01	 cmp	 DWORD PTR level$[rsp], 1
  001a5	75 19		 jne	 SHORT $LN27@zipOpenNew

; 1120 :       zi->ci.flag |= 6;

  001a7	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  001ac	8b 88 f4 00 00
	00		 mov	 ecx, DWORD PTR [rax+244]
  001b2	83 c9 06	 or	 ecx, 6
  001b5	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  001ba	89 88 f4 00 00
	00		 mov	 DWORD PTR [rax+244], ecx
$LN27@zipOpenNew:

; 1121 :     if (password != NULL)

  001c0	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR password$[rsp], 0
  001c9	74 19		 je	 SHORT $LN26@zipOpenNew

; 1122 :       zi->ci.flag |= 1;

  001cb	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  001d0	8b 88 f4 00 00
	00		 mov	 ecx, DWORD PTR [rax+244]
  001d6	83 c9 01	 or	 ecx, 1
  001d9	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  001de	89 88 f4 00 00
	00		 mov	 DWORD PTR [rax+244], ecx
$LN26@zipOpenNew:

; 1123 : 
; 1124 :     zi->ci.crc32 = 0;

  001e4	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  001e9	c7 80 04 01 01
	00 00 00 00 00	 mov	 DWORD PTR [rax+65796], 0

; 1125 :     zi->ci.method = method;

  001f3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  001f8	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  001ff	89 81 f8 00 00
	00		 mov	 DWORD PTR [rcx+248], eax

; 1126 :     zi->ci.encrypt = 0;

  00205	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  0020a	c7 80 08 01 01
	00 00 00 00 00	 mov	 DWORD PTR [rax+65800], 0

; 1127 :     zi->ci.stream_initialised = 0;

  00214	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00219	c7 80 d0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+208], 0

; 1128 :     zi->ci.pos_in_buffered_data = 0;

  00223	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00228	c7 80 d4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+212], 0

; 1129 :     zi->ci.raw = raw;

  00232	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00237	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR raw$[rsp]
  0023e	89 81 fc 00 00
	00		 mov	 DWORD PTR [rcx+252], eax

; 1130 :     zi->ci.pos_local_header = ZTELL64(zi->z_filefunc,zi->filestream);

  00244	48 8b 54 24 50	 mov	 rdx, QWORD PTR zi$[rsp]
  00249	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  0024d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00252	e8 00 00 00 00	 call	 call_ztell64
  00257	4c 8b d8	 mov	 r11, rax
  0025a	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  0025f	4c 89 98 d8 00
	00 00		 mov	 QWORD PTR [rax+216], r11

; 1131 : 
; 1132 :     zi->ci.size_centralheader = SIZECENTRALHEADER + size_filename + size_extrafield_global + size_comment;

  00266	8b 4c 24 4c	 mov	 ecx, DWORD PTR size_filename$[rsp]
  0026a	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  00271	8d 4c 01 2e	 lea	 ecx, DWORD PTR [rcx+rax+46]
  00275	03 4c 24 40	 add	 ecx, DWORD PTR size_comment$[rsp]
  00279	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  0027e	89 88 ec 00 00
	00		 mov	 DWORD PTR [rax+236], ecx

; 1133 :     zi->ci.size_centralExtraFree = 32; // Extra space we have reserved in case we need to add ZIP64 extra info data

  00284	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00289	c7 80 f0 00 00
	00 20 00 00 00	 mov	 DWORD PTR [rax+240], 32	; 00000020H

; 1134 : 
; 1135 :     zi->ci.central_header = (char*)ALLOC((uInt)zi->ci.size_centralheader + zi->ci.size_centralExtraFree);

  00293	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00298	8b 80 ec 00 00
	00		 mov	 eax, DWORD PTR [rax+236]
  0029e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  002a3	03 81 f0 00 00
	00		 add	 eax, DWORD PTR [rcx+240]
  002a9	8b c8		 mov	 ecx, eax
  002ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  002b1	4c 8b d8	 mov	 r11, rax
  002b4	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  002b9	4c 89 98 e0 00
	00 00		 mov	 QWORD PTR [rax+224], r11

; 1136 : 
; 1137 :     zi->ci.size_centralExtra = size_extrafield_global;

  002c0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  002c5	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  002cc	89 81 e8 00 00
	00		 mov	 DWORD PTR [rcx+232], eax

; 1138 :     zip64local_putValue_inmemory(zi->ci.central_header,(uLong)CENTRALHEADERMAGIC,4);

  002d2	41 b8 04 00 00
	00		 mov	 r8d, 4
  002d8	ba 50 4b 01 02	 mov	 edx, 33639248		; 02014b50H
  002dd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  002e2	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  002e9	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1139 :     /* version info */
; 1140 :     zip64local_putValue_inmemory(zi->ci.central_header+4,(uLong)versionMadeBy,2);

  002ee	8b 94 24 00 01
	00 00		 mov	 edx, DWORD PTR versionMadeBy$[rsp]
  002f5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  002fa	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00301	48 83 c1 04	 add	 rcx, 4
  00305	41 b8 02 00 00
	00		 mov	 r8d, 2
  0030b	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1141 :     zip64local_putValue_inmemory(zi->ci.central_header+6,(uLong)20,2);

  00310	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00315	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  0031c	48 83 c1 06	 add	 rcx, 6
  00320	41 b8 02 00 00
	00		 mov	 r8d, 2
  00326	ba 14 00 00 00	 mov	 edx, 20
  0032b	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1142 :     zip64local_putValue_inmemory(zi->ci.central_header+8,(uLong)zi->ci.flag,2);

  00330	4c 8b 5c 24 50	 mov	 r11, QWORD PTR zi$[rsp]
  00335	41 8b 93 f4 00
	00 00		 mov	 edx, DWORD PTR [r11+244]
  0033c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00341	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00348	48 83 c1 08	 add	 rcx, 8
  0034c	41 b8 02 00 00
	00		 mov	 r8d, 2
  00352	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1143 :     zip64local_putValue_inmemory(zi->ci.central_header+10,(uLong)zi->ci.method,2);

  00357	4c 8b 5c 24 50	 mov	 r11, QWORD PTR zi$[rsp]
  0035c	41 8b 93 f8 00
	00 00		 mov	 edx, DWORD PTR [r11+248]
  00363	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00368	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  0036f	48 83 c1 0a	 add	 rcx, 10
  00373	41 b8 02 00 00
	00		 mov	 r8d, 2
  00379	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1144 :     zip64local_putValue_inmemory(zi->ci.central_header+12,(uLong)zi->ci.dosDate,4);

  0037e	4c 8b 5c 24 50	 mov	 r11, QWORD PTR zi$[rsp]
  00383	41 8b 93 00 01
	01 00		 mov	 edx, DWORD PTR [r11+65792]
  0038a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  0038f	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00396	48 83 c1 0c	 add	 rcx, 12
  0039a	41 b8 04 00 00
	00		 mov	 r8d, 4
  003a0	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1145 :     zip64local_putValue_inmemory(zi->ci.central_header+16,(uLong)0,4); /*crc*/

  003a5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  003aa	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  003b1	48 83 c1 10	 add	 rcx, 16
  003b5	41 b8 04 00 00
	00		 mov	 r8d, 4
  003bb	33 d2		 xor	 edx, edx
  003bd	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1146 :     zip64local_putValue_inmemory(zi->ci.central_header+20,(uLong)0,4); /*compr size*/

  003c2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  003c7	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  003ce	48 83 c1 14	 add	 rcx, 20
  003d2	41 b8 04 00 00
	00		 mov	 r8d, 4
  003d8	33 d2		 xor	 edx, edx
  003da	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1147 :     zip64local_putValue_inmemory(zi->ci.central_header+24,(uLong)0,4); /*uncompr size*/

  003df	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  003e4	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  003eb	48 83 c1 18	 add	 rcx, 24
  003ef	41 b8 04 00 00
	00		 mov	 r8d, 4
  003f5	33 d2		 xor	 edx, edx
  003f7	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1148 :     zip64local_putValue_inmemory(zi->ci.central_header+28,(uLong)size_filename,2);

  003fc	8b 54 24 4c	 mov	 edx, DWORD PTR size_filename$[rsp]
  00400	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00405	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  0040c	48 83 c1 1c	 add	 rcx, 28
  00410	41 b8 02 00 00
	00		 mov	 r8d, 2
  00416	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1149 :     zip64local_putValue_inmemory(zi->ci.central_header+30,(uLong)size_extrafield_global,2);

  0041b	8b 94 24 b0 00
	00 00		 mov	 edx, DWORD PTR size_extrafield_global$[rsp]
  00422	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00427	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  0042e	48 83 c1 1e	 add	 rcx, 30
  00432	41 b8 02 00 00
	00		 mov	 r8d, 2
  00438	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1150 :     zip64local_putValue_inmemory(zi->ci.central_header+32,(uLong)size_comment,2);

  0043d	8b 54 24 40	 mov	 edx, DWORD PTR size_comment$[rsp]
  00441	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00446	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  0044d	48 83 c1 20	 add	 rcx, 32			; 00000020H
  00451	41 b8 02 00 00
	00		 mov	 r8d, 2
  00457	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1151 :     zip64local_putValue_inmemory(zi->ci.central_header+34,(uLong)0,2); /*disk nm start*/

  0045c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00461	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00468	48 83 c1 22	 add	 rcx, 34			; 00000022H
  0046c	41 b8 02 00 00
	00		 mov	 r8d, 2
  00472	33 d2		 xor	 edx, edx
  00474	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1152 : 
; 1153 :     if (zipfi==NULL)

  00479	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR zipfi$[rsp], 0
  00482	75 1f		 jne	 SHORT $LN25@zipOpenNew

; 1154 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)0,2);

  00484	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00489	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00490	48 83 c1 24	 add	 rcx, 36			; 00000024H
  00494	41 b8 02 00 00
	00		 mov	 r8d, 2
  0049a	33 d2		 xor	 edx, edx
  0049c	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1155 :     else

  004a1	eb 26		 jmp	 SHORT $LN24@zipOpenNew
$LN25@zipOpenNew:

; 1156 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)zipfi->internal_fa,2);

  004a3	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR zipfi$[rsp]
  004ab	8b 50 1c	 mov	 edx, DWORD PTR [rax+28]
  004ae	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  004b3	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  004ba	48 83 c1 24	 add	 rcx, 36			; 00000024H
  004be	41 b8 02 00 00
	00		 mov	 r8d, 2
  004c4	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
$LN24@zipOpenNew:

; 1157 : 
; 1158 :     if (zipfi==NULL)

  004c9	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR zipfi$[rsp], 0
  004d2	75 1f		 jne	 SHORT $LN23@zipOpenNew

; 1159 :         zip64local_putValue_inmemory(zi->ci.central_header+38,(uLong)0,4);

  004d4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  004d9	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  004e0	48 83 c1 26	 add	 rcx, 38			; 00000026H
  004e4	41 b8 04 00 00
	00		 mov	 r8d, 4
  004ea	33 d2		 xor	 edx, edx
  004ec	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1160 :     else

  004f1	eb 26		 jmp	 SHORT $LN22@zipOpenNew
$LN23@zipOpenNew:

; 1161 :         zip64local_putValue_inmemory(zi->ci.central_header+38,(uLong)zipfi->external_fa,4);

  004f3	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR zipfi$[rsp]
  004fb	8b 50 20	 mov	 edx, DWORD PTR [rax+32]
  004fe	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00503	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  0050a	48 83 c1 26	 add	 rcx, 38			; 00000026H
  0050e	41 b8 04 00 00
	00		 mov	 r8d, 4
  00514	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
$LN22@zipOpenNew:

; 1162 : 
; 1163 :     if(zi->ci.pos_local_header >= 0xffffffff)

  00519	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  0051e	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  00523	48 39 81 d8 00
	00 00		 cmp	 QWORD PTR [rcx+216], rax
  0052a	72 22		 jb	 SHORT $LN21@zipOpenNew

; 1164 :       zip64local_putValue_inmemory(zi->ci.central_header+42,(uLong)0xffffffff,4);

  0052c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00531	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00538	48 83 c1 2a	 add	 rcx, 42			; 0000002aH
  0053c	41 b8 04 00 00
	00		 mov	 r8d, 4
  00542	ba ff ff ff ff	 mov	 edx, -1			; ffffffffH
  00547	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1165 :     else

  0054c	eb 32		 jmp	 SHORT $LN20@zipOpenNew
$LN21@zipOpenNew:

; 1166 :       zip64local_putValue_inmemory(zi->ci.central_header+42,(uLong)zi->ci.pos_local_header - zi->add_position_when_writting_offset,4);

  0054e	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00553	8b 90 d8 00 00
	00		 mov	 edx, DWORD PTR [rax+216]
  00559	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  0055e	48 2b 90 50 01
	01 00		 sub	 rdx, QWORD PTR [rax+65872]
  00565	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  0056a	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00571	48 83 c1 2a	 add	 rcx, 42			; 0000002aH
  00575	41 b8 04 00 00
	00		 mov	 r8d, 4
  0057b	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
$LN20@zipOpenNew:

; 1167 : 
; 1168 :     for (i=0;i<size_filename;i++)

  00580	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00588	eb 0b		 jmp	 SHORT $LN19@zipOpenNew
$LN18@zipOpenNew:
  0058a	8b 44 24 44	 mov	 eax, DWORD PTR i$[rsp]
  0058e	83 c0 01	 add	 eax, 1
  00591	89 44 24 44	 mov	 DWORD PTR i$[rsp], eax
$LN19@zipOpenNew:
  00595	8b 44 24 4c	 mov	 eax, DWORD PTR size_filename$[rsp]
  00599	39 44 24 44	 cmp	 DWORD PTR i$[rsp], eax
  0059d	73 28		 jae	 SHORT $LN17@zipOpenNew

; 1169 :         *(zi->ci.central_header+SIZECENTRALHEADER+i) = *(filename+i);

  0059f	44 8b 44 24 44	 mov	 r8d, DWORD PTR i$[rsp]
  005a4	48 8b 54 24 50	 mov	 rdx, QWORD PTR zi$[rsp]
  005a9	48 8b 92 e0 00
	00 00		 mov	 rdx, QWORD PTR [rdx+224]
  005b0	8b 4c 24 44	 mov	 ecx, DWORD PTR i$[rsp]
  005b4	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  005bc	42 0f b6 04 00	 movzx	 eax, BYTE PTR [rax+r8]
  005c1	88 44 0a 2e	 mov	 BYTE PTR [rdx+rcx+46], al
  005c5	eb c3		 jmp	 SHORT $LN18@zipOpenNew
$LN17@zipOpenNew:

; 1170 : 
; 1171 :     for (i=0;i<size_extrafield_global;i++)

  005c7	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  005cf	eb 0b		 jmp	 SHORT $LN16@zipOpenNew
$LN15@zipOpenNew:
  005d1	8b 44 24 44	 mov	 eax, DWORD PTR i$[rsp]
  005d5	83 c0 01	 add	 eax, 1
  005d8	89 44 24 44	 mov	 DWORD PTR i$[rsp], eax
$LN16@zipOpenNew:
  005dc	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  005e3	39 44 24 44	 cmp	 DWORD PTR i$[rsp], eax
  005e7	73 30		 jae	 SHORT $LN14@zipOpenNew

; 1172 :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+i) =
; 1173 :               *(((const char*)extrafield_global)+i);

  005e9	44 8b 44 24 44	 mov	 r8d, DWORD PTR i$[rsp]
  005ee	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  005f3	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  005fa	8b 44 24 4c	 mov	 eax, DWORD PTR size_filename$[rsp]
  005fe	48 8d 54 01 2e	 lea	 rdx, QWORD PTR [rcx+rax+46]
  00603	8b 4c 24 44	 mov	 ecx, DWORD PTR i$[rsp]
  00607	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  0060f	42 0f b6 04 00	 movzx	 eax, BYTE PTR [rax+r8]
  00614	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00617	eb b8		 jmp	 SHORT $LN15@zipOpenNew
$LN14@zipOpenNew:

; 1174 : 
; 1175 :     for (i=0;i<size_comment;i++)

  00619	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00621	eb 0b		 jmp	 SHORT $LN13@zipOpenNew
$LN12@zipOpenNew:
  00623	8b 44 24 44	 mov	 eax, DWORD PTR i$[rsp]
  00627	83 c0 01	 add	 eax, 1
  0062a	89 44 24 44	 mov	 DWORD PTR i$[rsp], eax
$LN13@zipOpenNew:
  0062e	8b 44 24 40	 mov	 eax, DWORD PTR size_comment$[rsp]
  00632	39 44 24 44	 cmp	 DWORD PTR i$[rsp], eax
  00636	73 3a		 jae	 SHORT $LN11@zipOpenNew

; 1176 :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+
; 1177 :               size_extrafield_global+i) = *(comment+i);

  00638	44 8b 44 24 44	 mov	 r8d, DWORD PTR i$[rsp]
  0063d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00642	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00649	8b 44 24 4c	 mov	 eax, DWORD PTR size_filename$[rsp]
  0064d	48 8d 54 01 2e	 lea	 rdx, QWORD PTR [rcx+rax+46]
  00652	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  00659	48 03 d0	 add	 rdx, rax
  0065c	8b 4c 24 44	 mov	 ecx, DWORD PTR i$[rsp]
  00660	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  00668	42 0f b6 04 00	 movzx	 eax, BYTE PTR [rax+r8]
  0066d	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00670	eb b1		 jmp	 SHORT $LN12@zipOpenNew
$LN11@zipOpenNew:

; 1178 :     if (zi->ci.central_header == NULL)

  00672	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00677	48 83 b8 e0 00
	00 00 00	 cmp	 QWORD PTR [rax+224], 0
  0067f	75 0a		 jne	 SHORT $LN10@zipOpenNew

; 1179 :         return ZIP_INTERNALERROR;

  00681	b8 98 ff ff ff	 mov	 eax, -104		; ffffffffffffff98H
  00686	e9 ac 02 00 00	 jmp	 $LN42@zipOpenNew
$LN10@zipOpenNew:

; 1180 : 
; 1181 :     zi->ci.zip64 = zip64;

  0068b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00690	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR zip64$[rsp]
  00697	89 81 0c 01 01
	00		 mov	 DWORD PTR [rcx+65804], eax

; 1182 :     zi->ci.totalCompressedData = 0;

  0069d	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  006a2	48 c7 80 18 01
	01 00 00 00 00
	00		 mov	 QWORD PTR [rax+65816], 0

; 1183 :     zi->ci.totalUncompressedData = 0;

  006ad	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  006b2	48 c7 80 20 01
	01 00 00 00 00
	00		 mov	 QWORD PTR [rax+65824], 0

; 1184 :     zi->ci.pos_zip64extrainfo = 0;

  006bd	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  006c2	48 c7 80 10 01
	01 00 00 00 00
	00		 mov	 QWORD PTR [rax+65808], 0

; 1185 : 
; 1186 :     err = Write_LocalFileHeader(zi, filename, size_extrafield_local, extrafield_local);

  006cd	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR extrafield_local$[rsp]
  006d5	44 8b 84 24 a0
	00 00 00	 mov	 r8d, DWORD PTR size_extrafield_local$[rsp]
  006dd	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  006e5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  006ea	e8 00 00 00 00	 call	 Write_LocalFileHeader
  006ef	89 44 24 48	 mov	 DWORD PTR err$[rsp], eax

; 1187 : 
; 1188 : #ifdef HAVE_BZIP2
; 1189 :     zi->ci.bstream.avail_in = (uInt)0;
; 1190 :     zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1191 :     zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1192 :     zi->ci.bstream.total_in_hi32 = 0;
; 1193 :     zi->ci.bstream.total_in_lo32 = 0;
; 1194 :     zi->ci.bstream.total_out_hi32 = 0;
; 1195 :     zi->ci.bstream.total_out_lo32 = 0;
; 1196 : #endif
; 1197 : 
; 1198 :     zi->ci.stream.avail_in = (uInt)0;

  006f3	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  006f8	c7 80 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+128], 0

; 1199 :     zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  00702	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00707	c7 80 90 00 00
	00 00 00 01 00	 mov	 DWORD PTR [rax+144], 65536 ; 00010000H

; 1200 :     zi->ci.stream.next_out = zi->ci.buffered_data;

  00711	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00716	48 81 c1 00 01
	00 00		 add	 rcx, 256		; 00000100H
  0071d	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00722	48 89 88 88 00
	00 00		 mov	 QWORD PTR [rax+136], rcx

; 1201 :     zi->ci.stream.total_in = 0;

  00729	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  0072e	c7 80 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+132], 0

; 1202 :     zi->ci.stream.total_out = 0;

  00738	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  0073d	c7 80 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+148], 0

; 1203 :     zi->ci.stream.data_type = Z_BINARY;

  00747	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  0074c	c7 80 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+192], 0

; 1204 : 
; 1205 : #ifdef HAVE_BZIP2
; 1206 :     if ((err==ZIP_OK) && (zi->ci.method == Z_DEFLATED || zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1207 : #else
; 1208 :     if ((err==ZIP_OK) && (zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  00756	83 7c 24 48 00	 cmp	 DWORD PTR err$[rsp], 0
  0075b	0f 85 ee 00 00
	00		 jne	 $LN9@zipOpenNew
  00761	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00766	83 b8 f8 00 00
	00 08		 cmp	 DWORD PTR [rax+248], 8
  0076d	0f 85 dc 00 00
	00		 jne	 $LN9@zipOpenNew
  00773	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00778	83 b8 fc 00 00
	00 00		 cmp	 DWORD PTR [rax+252], 0
  0077f	0f 85 ca 00 00
	00		 jne	 $LN9@zipOpenNew

; 1209 : #endif
; 1210 :     {
; 1211 :         if(zi->ci.method == Z_DEFLATED)

  00785	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  0078a	83 b8 f8 00 00
	00 08		 cmp	 DWORD PTR [rax+248], 8
  00791	0f 85 b3 00 00
	00		 jne	 $LN8@zipOpenNew

; 1212 :         {
; 1213 :           zi->ci.stream.zalloc = (alloc_func)0;

  00797	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  0079c	48 c7 80 a8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+168], 0

; 1214 :           zi->ci.stream.zfree = (free_func)0;

  007a7	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  007ac	48 c7 80 b0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+176], 0

; 1215 :           zi->ci.stream.opaque = (voidpf)0;

  007b7	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  007bc	48 c7 80 b8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+184], 0

; 1216 : 
; 1217 :           if (windowBits>0)

  007c7	83 bc 24 d8 00
	00 00 00	 cmp	 DWORD PTR windowBits$[rsp], 0
  007cf	7e 10		 jle	 SHORT $LN7@zipOpenNew

; 1218 :               windowBits = -windowBits;

  007d1	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR windowBits$[rsp]
  007d8	f7 d8		 neg	 eax
  007da	89 84 24 d8 00
	00 00		 mov	 DWORD PTR windowBits$[rsp], eax
$LN7@zipOpenNew:

; 1219 : 
; 1220 :           err = deflateInit2(&zi->ci.stream, level, Z_DEFLATED, windowBits, memLevel, strategy);

  007e1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  007e6	48 83 c1 78	 add	 rcx, 120		; 00000078H
  007ea	c7 44 24 38 58
	00 00 00	 mov	 DWORD PTR [rsp+56], 88	; 00000058H
  007f2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05DFCKICEH@1?42?45?$AA@
  007f9	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  007fe	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR strategy$[rsp]
  00805	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00809	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR memLevel$[rsp]
  00810	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00814	44 8b 8c 24 d8
	00 00 00	 mov	 r9d, DWORD PTR windowBits$[rsp]
  0081c	41 b8 08 00 00
	00		 mov	 r8d, 8
  00822	8b 94 24 c8 00
	00 00		 mov	 edx, DWORD PTR level$[rsp]
  00829	e8 00 00 00 00	 call	 deflateInit2_
  0082e	89 44 24 48	 mov	 DWORD PTR err$[rsp], eax

; 1221 : 
; 1222 :           if (err==Z_OK)

  00832	83 7c 24 48 00	 cmp	 DWORD PTR err$[rsp], 0
  00837	75 0f		 jne	 SHORT $LN6@zipOpenNew

; 1223 :               zi->ci.stream_initialised = Z_DEFLATED;

  00839	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  0083e	c7 80 d0 00 00
	00 08 00 00 00	 mov	 DWORD PTR [rax+208], 8
$LN6@zipOpenNew:

; 1224 :         }
; 1225 :         else if(zi->ci.method == Z_BZIP2ED)

  00848	eb 05		 jmp	 SHORT $LN5@zipOpenNew
$LN8@zipOpenNew:
  0084a	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
$LN5@zipOpenNew:
$LN9@zipOpenNew:

; 1226 :         {
; 1227 : #ifdef HAVE_BZIP2
; 1228 :             // Init BZip stuff here
; 1229 :           zi->ci.bstream.bzalloc = 0;
; 1230 :           zi->ci.bstream.bzfree = 0;
; 1231 :           zi->ci.bstream.opaque = (voidpf)0;
; 1232 : 
; 1233 :           err = BZ2_bzCompressInit(&zi->ci.bstream, level, 0,35);
; 1234 :           if(err == BZ_OK)
; 1235 :             zi->ci.stream_initialised = Z_BZIP2ED;
; 1236 : #endif
; 1237 :         }
; 1238 : 
; 1239 :     }
; 1240 : 
; 1241 : #    ifndef NOCRYPT
; 1242 :     zi->ci.crypt_header_size = 0;

  0084f	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00854	c7 80 40 01 01
	00 00 00 00 00	 mov	 DWORD PTR [rax+65856], 0

; 1243 :     if ((err==Z_OK) && (password != NULL))

  0085e	83 7c 24 48 00	 cmp	 DWORD PTR err$[rsp], 0
  00863	0f 85 b7 00 00
	00		 jne	 $LN3@zipOpenNew
  00869	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR password$[rsp], 0
  00872	0f 84 a8 00 00
	00		 je	 $LN3@zipOpenNew

; 1244 :     {
; 1245 :         unsigned char bufHead[RAND_HEAD_LEN];
; 1246 :         unsigned int sizeHead;
; 1247 :         zi->ci.encrypt = 1;

  00878	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  0087d	c7 80 08 01 01
	00 01 00 00 00	 mov	 DWORD PTR [rax+65800], 1

; 1248 :         zi->ci.pcrc_32_tab = get_crc_table();

  00887	e8 00 00 00 00	 call	 get_crc_table
  0088c	4c 8b d8	 mov	 r11, rax
  0088f	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  00894	4c 89 98 38 01
	01 00		 mov	 QWORD PTR [rax+65848], r11

; 1249 :         /*init_keys(password,zi->ci.keys,zi->ci.pcrc_32_tab);*/
; 1250 : 
; 1251 :         sizeHead=crypthead(password,bufHead,RAND_HEAD_LEN,zi->ci.keys,zi->ci.pcrc_32_tab,crcForCrypting);

  0089b	4c 8b 4c 24 50	 mov	 r9, QWORD PTR zi$[rsp]
  008a0	49 81 c1 28 01
	01 00		 add	 r9, 65832		; 00010128H
  008a7	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR crcForCrypting$[rsp]
  008ae	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  008b2	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  008b7	48 8b 80 38 01
	01 00		 mov	 rax, QWORD PTR [rax+65848]
  008be	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008c3	41 b8 0c 00 00
	00		 mov	 r8d, 12
  008c9	48 8d 54 24 60	 lea	 rdx, QWORD PTR bufHead$81111[rsp]
  008ce	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR password$[rsp]
  008d6	e8 00 00 00 00	 call	 crypthead
  008db	89 44 24 58	 mov	 DWORD PTR sizeHead$81112[rsp], eax

; 1252 :         zi->ci.crypt_header_size = sizeHead;

  008df	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  008e4	8b 44 24 58	 mov	 eax, DWORD PTR sizeHead$81112[rsp]
  008e8	89 81 40 01 01
	00		 mov	 DWORD PTR [rcx+65856], eax

; 1253 : 
; 1254 :         if (ZWRITE64(zi->z_filefunc,zi->filestream,bufHead,sizeHead) != sizeHead)

  008ee	44 8b 4c 24 58	 mov	 r9d, DWORD PTR sizeHead$81112[rsp]
  008f3	4c 8d 44 24 60	 lea	 r8, QWORD PTR bufHead$81111[rsp]
  008f8	48 8b 54 24 50	 mov	 rdx, QWORD PTR zi$[rsp]
  008fd	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00901	48 8b 4c 24 50	 mov	 rcx, QWORD PTR zi$[rsp]
  00906	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0090a	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  0090f	ff 50 10	 call	 QWORD PTR [rax+16]
  00912	3b 44 24 58	 cmp	 eax, DWORD PTR sizeHead$81112[rsp]
  00916	74 08		 je	 SHORT $LN2@zipOpenNew

; 1255 :                 err = ZIP_ERRNO;

  00918	c7 44 24 48 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN2@zipOpenNew:
$LN3@zipOpenNew:

; 1256 :     }
; 1257 : #    endif
; 1258 : 
; 1259 :     if (err==Z_OK)

  00920	83 7c 24 48 00	 cmp	 DWORD PTR err$[rsp], 0
  00925	75 0c		 jne	 SHORT $LN1@zipOpenNew

; 1260 :         zi->in_opened_file_inzip = 1;

  00927	48 8b 44 24 50	 mov	 rax, QWORD PTR zi$[rsp]
  0092c	c7 40 70 01 00
	00 00		 mov	 DWORD PTR [rax+112], 1
$LN1@zipOpenNew:

; 1261 :     return err;

  00933	8b 44 24 48	 mov	 eax, DWORD PTR err$[rsp]
$LN42@zipOpenNew:

; 1262 : }

  00937	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0093b	c3		 ret	 0
zipOpenNewFileInZip4_64 ENDP
_TEXT	ENDS
PUBLIC	zipOpen64
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpen64 DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$zipOpen64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpen64 DD 010d01H
	DD	0420dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipOpen64
_TEXT	SEGMENT
pathname$ = 48
append$ = 56
zipOpen64 PROC						; COMDAT

; 954  : {

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 955  :     return zipOpen3(pathname,append,NULL,NULL);

  0000d	45 33 c9	 xor	 r9d, r9d
  00010	45 33 c0	 xor	 r8d, r8d
  00013	8b 54 24 38	 mov	 edx, DWORD PTR append$[rsp]
  00017	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pathname$[rsp]
  0001c	e8 00 00 00 00	 call	 zipOpen3

; 956  : }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
zipOpen64 ENDP
_TEXT	ENDS
PUBLIC	zipOpen
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpen DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$zipOpen
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpen DD 010d01H
	DD	0420dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipOpen
_TEXT	SEGMENT
pathname$ = 48
append$ = 56
zipOpen	PROC						; COMDAT

; 949  : {

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 950  :     return zipOpen3((const void*)pathname,append,NULL,NULL);

  0000d	45 33 c9	 xor	 r9d, r9d
  00010	45 33 c0	 xor	 r8d, r8d
  00013	8b 54 24 38	 mov	 edx, DWORD PTR append$[rsp]
  00017	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pathname$[rsp]
  0001c	e8 00 00 00 00	 call	 zipOpen3

; 951  : }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
zipOpen	ENDP
_TEXT	ENDS
PUBLIC	$T84441
PUBLIC	zipOpen2_64
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpen2_64 DD imagerel $LN5
	DD	imagerel $LN5+178
	DD	imagerel $unwind$zipOpen2_64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpen2_64 DD 041c01H
	DD	019011cH
	DD	060147015H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipOpen2_64
_TEXT	SEGMENT
zlib_filefunc64_32_def_fill$80910 = 32
$T84441 = 128
pathname$ = 224
append$ = 232
globalcomment$ = 240
pzlib_filefunc_def$ = 248
zipOpen2_64 PROC					; COMDAT

; 933  : {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 934  :     if (pzlib_filefunc_def != NULL)

  0001c	48 83 bc 24 f8
	00 00 00 00	 cmp	 QWORD PTR pzlib_filefunc_def$[rsp], 0
  00025	74 62		 je	 SHORT $LN2@zipOpen2_6

; 935  :     {
; 936  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 937  :         zlib_filefunc64_32_def_fill.zfile_func64 = *pzlib_filefunc_def;

  00027	48 8d bc 24 80
	00 00 00	 lea	 rdi, QWORD PTR $T84441[rsp]
  0002f	48 8b b4 24 f8
	00 00 00	 mov	 rsi, QWORD PTR pzlib_filefunc_def$[rsp]
  00037	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0003c	f3 a4		 rep movsb
  0003e	48 8d 7c 24 20	 lea	 rdi, QWORD PTR zlib_filefunc64_32_def_fill$80910[rsp]
  00043	48 8d b4 24 80
	00 00 00	 lea	 rsi, QWORD PTR $T84441[rsp]
  0004b	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00050	f3 a4		 rep movsb

; 938  :         zlib_filefunc64_32_def_fill.ztell32_file = NULL;

  00052	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR zlib_filefunc64_32_def_fill$80910[rsp+72], 0

; 939  :         zlib_filefunc64_32_def_fill.zseek32_file = NULL;

  0005b	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR zlib_filefunc64_32_def_fill$80910[rsp+80], 0

; 940  :         return zipOpen3(pathname, append, globalcomment, &zlib_filefunc64_32_def_fill);

  00064	4c 8d 4c 24 20	 lea	 r9, QWORD PTR zlib_filefunc64_32_def_fill$80910[rsp]
  00069	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR globalcomment$[rsp]
  00071	8b 94 24 e8 00
	00 00		 mov	 edx, DWORD PTR append$[rsp]
  00078	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR pathname$[rsp]
  00080	e8 00 00 00 00	 call	 zipOpen3
  00085	eb 21		 jmp	 SHORT $LN3@zipOpen2_6

; 941  :     }
; 942  :     else

  00087	eb 1f		 jmp	 SHORT $LN1@zipOpen2_6
$LN2@zipOpen2_6:

; 943  :         return zipOpen3(pathname, append, globalcomment, NULL);

  00089	45 33 c9	 xor	 r9d, r9d
  0008c	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR globalcomment$[rsp]
  00094	8b 94 24 e8 00
	00 00		 mov	 edx, DWORD PTR append$[rsp]
  0009b	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR pathname$[rsp]
  000a3	e8 00 00 00 00	 call	 zipOpen3
$LN1@zipOpen2_6:
$LN3@zipOpen2_6:

; 944  : }

  000a8	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000af	5f		 pop	 rdi
  000b0	5e		 pop	 rsi
  000b1	c3		 ret	 0
zipOpen2_64 ENDP
_TEXT	ENDS
PUBLIC	zipOpen2
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpen2 DD imagerel $LN5
	DD	imagerel $LN5+131
	DD	imagerel $unwind$zipOpen2
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpen2 DD 021a01H
	DD	011011aH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipOpen2
_TEXT	SEGMENT
zlib_filefunc64_32_def_fill$80896 = 32
pathname$ = 144
append$ = 152
globalcomment$ = 160
pzlib_filefunc32_def$ = 168
zipOpen2 PROC						; COMDAT

; 921  : {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 922  :     if (pzlib_filefunc32_def != NULL)

  0001a	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR pzlib_filefunc32_def$[rsp], 0
  00023	74 37		 je	 SHORT $LN2@zipOpen2

; 923  :     {
; 924  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 925  :         fill_zlib_filefunc64_32_def_from_filefunc32(&zlib_filefunc64_32_def_fill,pzlib_filefunc32_def);

  00025	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR pzlib_filefunc32_def$[rsp]
  0002d	48 8d 4c 24 20	 lea	 rcx, QWORD PTR zlib_filefunc64_32_def_fill$80896[rsp]
  00032	e8 00 00 00 00	 call	 fill_zlib_filefunc64_32_def_from_filefunc32

; 926  :         return zipOpen3(pathname, append, globalcomment, &zlib_filefunc64_32_def_fill);

  00037	4c 8d 4c 24 20	 lea	 r9, QWORD PTR zlib_filefunc64_32_def_fill$80896[rsp]
  0003c	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR globalcomment$[rsp]
  00044	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR append$[rsp]
  0004b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR pathname$[rsp]
  00053	e8 00 00 00 00	 call	 zipOpen3
  00058	eb 21		 jmp	 SHORT $LN3@zipOpen2

; 927  :     }
; 928  :     else

  0005a	eb 1f		 jmp	 SHORT $LN1@zipOpen2
$LN2@zipOpen2:

; 929  :         return zipOpen3(pathname, append, globalcomment, NULL);

  0005c	45 33 c9	 xor	 r9d, r9d
  0005f	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR globalcomment$[rsp]
  00067	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR append$[rsp]
  0006e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR pathname$[rsp]
  00076	e8 00 00 00 00	 call	 zipOpen3
$LN1@zipOpen2:
$LN3@zipOpen2:

; 930  : }

  0007b	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00082	c3		 ret	 0
zipOpen2 ENDP
PUBLIC	zipClose
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipClose DD imagerel $LN18
	DD	imagerel $LN18+553
	DD	imagerel $unwind$zipClose
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipClose DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipClose
_TEXT	SEGMENT
centraldir_pos_inzip$ = 32
size_centraldir$ = 40
err$ = 44
zi$ = 48
pos$ = 56
ldi$81552 = 64
Zip64EOCDpos$81560 = 72
file$ = 96
global_comment$ = 104
zipClose PROC						; COMDAT

; 1880 : {

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1881 :     zip64_internal* zi;
; 1882 :     int err = 0;

  0000e	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 1883 :     uLong size_centraldir = 0;

  00016	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR size_centraldir$[rsp], 0

; 1884 :     ZPOS64_T centraldir_pos_inzip;
; 1885 :     ZPOS64_T pos;
; 1886 : 
; 1887 :     if (file == NULL)

  0001e	48 83 7c 24 60
	00		 cmp	 QWORD PTR file$[rsp], 0
  00024	75 0a		 jne	 SHORT $LN15@zipClose

; 1888 :         return ZIP_PARAMERROR;

  00026	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  0002b	e9 f4 01 00 00	 jmp	 $LN16@zipClose
$LN15@zipClose:

; 1889 : 
; 1890 :     zi = (zip64_internal*)file;

  00030	48 8b 44 24 60	 mov	 rax, QWORD PTR file$[rsp]
  00035	48 89 44 24 30	 mov	 QWORD PTR zi$[rsp], rax

; 1891 : 
; 1892 :     if (zi->in_opened_file_inzip == 1)

  0003a	48 8b 44 24 30	 mov	 rax, QWORD PTR zi$[rsp]
  0003f	83 78 70 01	 cmp	 DWORD PTR [rax+112], 1
  00043	75 0e		 jne	 SHORT $LN14@zipClose

; 1893 :     {
; 1894 :         err = zipCloseFileInZip (file);

  00045	48 8b 4c 24 60	 mov	 rcx, QWORD PTR file$[rsp]
  0004a	e8 00 00 00 00	 call	 zipCloseFileInZip
  0004f	89 44 24 2c	 mov	 DWORD PTR err$[rsp], eax
$LN14@zipClose:

; 1895 :     }
; 1896 : 
; 1897 : #ifndef NO_ADDFILEINEXISTINGZIP
; 1898 :     if (global_comment==NULL)

  00053	48 83 7c 24 68
	00		 cmp	 QWORD PTR global_comment$[rsp], 0
  00059	75 11		 jne	 SHORT $LN13@zipClose

; 1899 :         global_comment = zi->globalcomment;

  0005b	48 8b 44 24 30	 mov	 rax, QWORD PTR zi$[rsp]
  00060	48 8b 80 60 01
	01 00		 mov	 rax, QWORD PTR [rax+65888]
  00067	48 89 44 24 68	 mov	 QWORD PTR global_comment$[rsp], rax
$LN13@zipClose:

; 1900 : #endif
; 1901 : 
; 1902 :     centraldir_pos_inzip = ZTELL64(zi->z_filefunc,zi->filestream);

  0006c	48 8b 54 24 30	 mov	 rdx, QWORD PTR zi$[rsp]
  00071	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00075	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  0007a	e8 00 00 00 00	 call	 call_ztell64
  0007f	48 89 44 24 20	 mov	 QWORD PTR centraldir_pos_inzip$[rsp], rax

; 1903 : 
; 1904 :     if (err==ZIP_OK)

  00084	83 7c 24 2c 00	 cmp	 DWORD PTR err$[rsp], 0
  00089	0f 85 8b 00 00
	00		 jne	 $LN12@zipClose

; 1905 :     {
; 1906 :         linkedlist_datablock_internal* ldi = zi->central_dir.first_block;

  0008f	48 8b 44 24 30	 mov	 rax, QWORD PTR zi$[rsp]
  00094	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00098	48 89 44 24 40	 mov	 QWORD PTR ldi$81552[rsp], rax
$LN11@zipClose:

; 1907 :         while (ldi!=NULL)

  0009d	48 83 7c 24 40
	00		 cmp	 QWORD PTR ldi$81552[rsp], 0
  000a3	74 75		 je	 SHORT $LN10@zipClose

; 1908 :         {
; 1909 :             if ((err==ZIP_OK) && (ldi->filled_in_this_block>0))

  000a5	83 7c 24 2c 00	 cmp	 DWORD PTR err$[rsp], 0
  000aa	75 4d		 jne	 SHORT $LN9@zipClose
  000ac	48 8b 44 24 40	 mov	 rax, QWORD PTR ldi$81552[rsp]
  000b1	83 78 0c 00	 cmp	 DWORD PTR [rax+12], 0
  000b5	76 42		 jbe	 SHORT $LN9@zipClose

; 1910 :             {
; 1911 :                 if (ZWRITE64(zi->z_filefunc,zi->filestream, ldi->data, ldi->filled_in_this_block) != ldi->filled_in_this_block)

  000b7	4c 8b 44 24 40	 mov	 r8, QWORD PTR ldi$81552[rsp]
  000bc	49 83 c0 14	 add	 r8, 20
  000c0	48 8b 44 24 40	 mov	 rax, QWORD PTR ldi$81552[rsp]
  000c5	44 8b 48 0c	 mov	 r9d, DWORD PTR [rax+12]
  000c9	48 8b 54 24 30	 mov	 rdx, QWORD PTR zi$[rsp]
  000ce	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  000d2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  000d7	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  000db	48 8b 44 24 30	 mov	 rax, QWORD PTR zi$[rsp]
  000e0	ff 50 10	 call	 QWORD PTR [rax+16]
  000e3	44 8b d8	 mov	 r11d, eax
  000e6	48 8b 44 24 40	 mov	 rax, QWORD PTR ldi$81552[rsp]
  000eb	44 3b 58 0c	 cmp	 r11d, DWORD PTR [rax+12]
  000ef	74 08		 je	 SHORT $LN8@zipClose

; 1912 :                     err = ZIP_ERRNO;

  000f1	c7 44 24 2c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN8@zipClose:
$LN9@zipClose:

; 1913 :             }
; 1914 : 
; 1915 :             size_centraldir += ldi->filled_in_this_block;

  000f9	48 8b 44 24 40	 mov	 rax, QWORD PTR ldi$81552[rsp]
  000fe	8b 48 0c	 mov	 ecx, DWORD PTR [rax+12]
  00101	8b 44 24 28	 mov	 eax, DWORD PTR size_centraldir$[rsp]
  00105	03 c1		 add	 eax, ecx
  00107	89 44 24 28	 mov	 DWORD PTR size_centraldir$[rsp], eax

; 1916 :             ldi = ldi->next_datablock;

  0010b	48 8b 44 24 40	 mov	 rax, QWORD PTR ldi$81552[rsp]
  00110	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00113	48 89 44 24 40	 mov	 QWORD PTR ldi$81552[rsp], rax

; 1917 :         }

  00118	eb 83		 jmp	 SHORT $LN11@zipClose
$LN10@zipClose:
$LN12@zipClose:

; 1918 :     }
; 1919 :     free_linkedlist(&(zi->central_dir));

  0011a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  0011f	48 83 c1 60	 add	 rcx, 96			; 00000060H
  00123	e8 00 00 00 00	 call	 free_linkedlist

; 1920 : 
; 1921 :     pos = centraldir_pos_inzip - zi->add_position_when_writting_offset;

  00128	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  0012d	48 8b 89 50 01
	01 00		 mov	 rcx, QWORD PTR [rcx+65872]
  00134	48 8b 44 24 20	 mov	 rax, QWORD PTR centraldir_pos_inzip$[rsp]
  00139	48 2b c1	 sub	 rax, rcx
  0013c	48 89 44 24 38	 mov	 QWORD PTR pos$[rsp], rax

; 1922 :     if(pos >= 0xffffffff)

  00141	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  00146	48 39 44 24 38	 cmp	 QWORD PTR pos$[rsp], rax
  0014b	72 3a		 jb	 SHORT $LN7@zipClose

; 1923 :     {
; 1924 :       ZPOS64_T Zip64EOCDpos = ZTELL64(zi->z_filefunc,zi->filestream);

  0014d	48 8b 54 24 30	 mov	 rdx, QWORD PTR zi$[rsp]
  00152	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  00156	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  0015b	e8 00 00 00 00	 call	 call_ztell64
  00160	48 89 44 24 48	 mov	 QWORD PTR Zip64EOCDpos$81560[rsp], rax

; 1925 :       Write_Zip64EndOfCentralDirectoryRecord(zi, size_centraldir, centraldir_pos_inzip);

  00165	4c 8b 44 24 20	 mov	 r8, QWORD PTR centraldir_pos_inzip$[rsp]
  0016a	8b 54 24 28	 mov	 edx, DWORD PTR size_centraldir$[rsp]
  0016e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  00173	e8 00 00 00 00	 call	 Write_Zip64EndOfCentralDirectoryRecord

; 1926 : 
; 1927 :       Write_Zip64EndOfCentralDirectoryLocator(zi, Zip64EOCDpos);

  00178	48 8b 54 24 48	 mov	 rdx, QWORD PTR Zip64EOCDpos$81560[rsp]
  0017d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  00182	e8 00 00 00 00	 call	 Write_Zip64EndOfCentralDirectoryLocator
$LN7@zipClose:

; 1928 :     }
; 1929 : 
; 1930 :     if (err==ZIP_OK)

  00187	83 7c 24 2c 00	 cmp	 DWORD PTR err$[rsp], 0
  0018c	75 17		 jne	 SHORT $LN6@zipClose

; 1931 :       err = Write_EndOfCentralDirectoryRecord(zi, size_centraldir, centraldir_pos_inzip);

  0018e	4c 8b 44 24 20	 mov	 r8, QWORD PTR centraldir_pos_inzip$[rsp]
  00193	8b 54 24 28	 mov	 edx, DWORD PTR size_centraldir$[rsp]
  00197	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  0019c	e8 00 00 00 00	 call	 Write_EndOfCentralDirectoryRecord
  001a1	89 44 24 2c	 mov	 DWORD PTR err$[rsp], eax
$LN6@zipClose:

; 1932 : 
; 1933 :     if(err == ZIP_OK)

  001a5	83 7c 24 2c 00	 cmp	 DWORD PTR err$[rsp], 0
  001aa	75 13		 jne	 SHORT $LN5@zipClose

; 1934 :       err = Write_GlobalComment(zi, global_comment);

  001ac	48 8b 54 24 68	 mov	 rdx, QWORD PTR global_comment$[rsp]
  001b1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  001b6	e8 00 00 00 00	 call	 Write_GlobalComment
  001bb	89 44 24 2c	 mov	 DWORD PTR err$[rsp], eax
$LN5@zipClose:

; 1935 : 
; 1936 :     if (ZCLOSE64(zi->z_filefunc,zi->filestream) != 0)

  001bf	48 8b 54 24 30	 mov	 rdx, QWORD PTR zi$[rsp]
  001c4	48 8b 52 58	 mov	 rdx, QWORD PTR [rdx+88]
  001c8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  001cd	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  001d1	48 8b 44 24 30	 mov	 rax, QWORD PTR zi$[rsp]
  001d6	ff 50 28	 call	 QWORD PTR [rax+40]
  001d9	85 c0		 test	 eax, eax
  001db	74 0f		 je	 SHORT $LN4@zipClose

; 1937 :         if (err == ZIP_OK)

  001dd	83 7c 24 2c 00	 cmp	 DWORD PTR err$[rsp], 0
  001e2	75 08		 jne	 SHORT $LN3@zipClose

; 1938 :             err = ZIP_ERRNO;

  001e4	c7 44 24 2c ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN3@zipClose:
$LN4@zipClose:

; 1939 : 
; 1940 : #ifndef NO_ADDFILEINEXISTINGZIP
; 1941 :     TRYFREE(zi->globalcomment);

  001ec	48 8b 44 24 30	 mov	 rax, QWORD PTR zi$[rsp]
  001f1	48 83 b8 60 01
	01 00 00	 cmp	 QWORD PTR [rax+65888], 0
  001f9	74 12		 je	 SHORT $LN2@zipClose
  001fb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  00200	48 8b 89 60 01
	01 00		 mov	 rcx, QWORD PTR [rcx+65888]
  00207	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN2@zipClose:

; 1942 : #endif
; 1943 :     TRYFREE(zi);

  0020d	48 83 7c 24 30
	00		 cmp	 QWORD PTR zi$[rsp], 0
  00213	74 0b		 je	 SHORT $LN1@zipClose
  00215	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zi$[rsp]
  0021a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN1@zipClose:

; 1944 : 
; 1945 :     return err;

  00220	8b 44 24 2c	 mov	 eax, DWORD PTR err$[rsp]
$LN16@zipClose:

; 1946 : }

  00224	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00228	c3		 ret	 0
zipClose ENDP
_TEXT	ENDS
PUBLIC	zipOpenNewFileInZip
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip DD imagerel $LN3
	DD	imagerel $LN3+224
	DD	imagerel $unwind$zipOpenNewFileInZip
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip DD 021b01H
	DD	015011bH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipOpenNewFileInZip
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
zipOpenNewFileInZip PROC				; COMDAT

; 1353 : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1354 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,
; 1355 :                                  extrafield_local, size_extrafield_local,
; 1356 :                                  extrafield_global, size_extrafield_global,
; 1357 :                                  comment, method, level, 0,
; 1358 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1359 :                                  NULL, 0, VERSIONMADEBY, 0, 0);

  0001b	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+144], 0
  00026	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+136], 0
  00031	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+128], 0
  0003c	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR [rsp+120], 0
  00044	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR [rsp+112], 0
  0004d	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR [rsp+104], 0
  00055	c7 44 24 60 08
	00 00 00	 mov	 DWORD PTR [rsp+96], 8
  0005d	c7 44 24 58 f1
	ff ff ff	 mov	 DWORD PTR [rsp+88], -15
  00065	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR [rsp+80], 0
  0006d	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  00074	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00078	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  0007f	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00083	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  00097	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0009b	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  000a3	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a8	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  000af	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000b3	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR extrafield_local$[rsp]
  000bb	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR zipfi$[rsp]
  000c3	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  000cb	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  000d3	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1360 : }

  000d8	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000df	c3		 ret	 0
zipOpenNewFileInZip ENDP
_TEXT	ENDS
PUBLIC	zipOpenNewFileInZip64
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip64 DD imagerel $LN3
	DD	imagerel $LN3+227
	DD	imagerel $unwind$zipOpenNewFileInZip64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip64 DD 021b01H
	DD	015011bH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipOpenNewFileInZip64
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
zip64$ = 256
zipOpenNewFileInZip64 PROC				; COMDAT

; 1340 : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1341 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,
; 1342 :                                  extrafield_local, size_extrafield_local,
; 1343 :                                  extrafield_global, size_extrafield_global,
; 1344 :                                  comment, method, level, 0,
; 1345 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1346 :                                  NULL, 0, VERSIONMADEBY, 0, zip64);

  0001b	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR zip64$[rsp]
  00022	89 84 24 90 00
	00 00		 mov	 DWORD PTR [rsp+144], eax
  00029	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+136], 0
  00034	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+128], 0
  0003f	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR [rsp+120], 0
  00047	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR [rsp+112], 0
  00050	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR [rsp+104], 0
  00058	c7 44 24 60 08
	00 00 00	 mov	 DWORD PTR [rsp+96], 8
  00060	c7 44 24 58 f1
	ff ff ff	 mov	 DWORD PTR [rsp+88], -15
  00068	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR [rsp+80], 0
  00070	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  00077	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  0007b	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  00082	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00086	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  0008e	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00093	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  0009a	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0009e	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  000a6	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000ab	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  000b2	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000b6	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR extrafield_local$[rsp]
  000be	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR zipfi$[rsp]
  000c6	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  000ce	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  000d6	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1347 : }

  000db	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000e2	c3		 ret	 0
zipOpenNewFileInZip64 ENDP
_TEXT	ENDS
PUBLIC	zipOpenNewFileInZip2_64
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip2_64 DD imagerel $LN3
	DD	imagerel $LN3+230
	DD	imagerel $unwind$zipOpenNewFileInZip2_64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip2_64 DD 021b01H
	DD	015011bH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipOpenNewFileInZip2_64
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
raw$ = 256
zip64$ = 264
zipOpenNewFileInZip2_64 PROC				; COMDAT

; 1327 : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1328 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,
; 1329 :                                  extrafield_local, size_extrafield_local,
; 1330 :                                  extrafield_global, size_extrafield_global,
; 1331 :                                  comment, method, level, raw,
; 1332 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1333 :                                  NULL, 0, VERSIONMADEBY, 0, zip64);

  0001b	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR zip64$[rsp]
  00022	89 84 24 90 00
	00 00		 mov	 DWORD PTR [rsp+144], eax
  00029	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+136], 0
  00034	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+128], 0
  0003f	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR [rsp+120], 0
  00047	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR [rsp+112], 0
  00050	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR [rsp+104], 0
  00058	c7 44 24 60 08
	00 00 00	 mov	 DWORD PTR [rsp+96], 8
  00060	c7 44 24 58 f1
	ff ff ff	 mov	 DWORD PTR [rsp+88], -15
  00068	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR raw$[rsp]
  0006f	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  00073	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  0007a	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  0007e	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  00085	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00089	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  00091	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00096	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  0009d	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  000a1	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  000a9	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000ae	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  000b5	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000b9	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR extrafield_local$[rsp]
  000c1	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR zipfi$[rsp]
  000c9	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  000d1	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  000d9	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1334 : }

  000de	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000e5	c3		 ret	 0
zipOpenNewFileInZip2_64 ENDP
_TEXT	ENDS
PUBLIC	zipOpenNewFileInZip2
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip2 DD imagerel $LN3
	DD	imagerel $LN3+227
	DD	imagerel $unwind$zipOpenNewFileInZip2
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip2 DD 021b01H
	DD	015011bH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipOpenNewFileInZip2
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
raw$ = 256
zipOpenNewFileInZip2 PROC				; COMDAT

; 1314 : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1315 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,
; 1316 :                                  extrafield_local, size_extrafield_local,
; 1317 :                                  extrafield_global, size_extrafield_global,
; 1318 :                                  comment, method, level, raw,
; 1319 :                                  -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1320 :                                  NULL, 0, VERSIONMADEBY, 0, 0);

  0001b	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+144], 0
  00026	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+136], 0
  00031	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+128], 0
  0003c	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR [rsp+120], 0
  00044	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR [rsp+112], 0
  0004d	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR [rsp+104], 0
  00055	c7 44 24 60 08
	00 00 00	 mov	 DWORD PTR [rsp+96], 8
  0005d	c7 44 24 58 f1
	ff ff ff	 mov	 DWORD PTR [rsp+88], -15
  00065	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR raw$[rsp]
  0006c	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  00070	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  00077	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  0007b	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  00082	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00086	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  0008e	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00093	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  0009a	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0009e	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  000a6	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000ab	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  000b2	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000b6	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR extrafield_local$[rsp]
  000be	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR zipfi$[rsp]
  000c6	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  000ce	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  000d6	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1321 : }

  000db	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000e2	c3		 ret	 0
zipOpenNewFileInZip2 ENDP
_TEXT	ENDS
PUBLIC	zipOpenNewFileInZip3_64
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip3_64 DD imagerel $LN3
	DD	imagerel $LN3+246
	DD	imagerel $unwind$zipOpenNewFileInZip3_64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip3_64 DD 021b01H
	DD	015011bH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipOpenNewFileInZip3_64
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
raw$ = 256
windowBits$ = 264
memLevel$ = 272
strategy$ = 280
password$ = 288
crcForCrypting$ = 296
zip64$ = 304
zipOpenNewFileInZip3_64 PROC				; COMDAT

; 1301 : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1302 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,
; 1303 :                                  extrafield_local, size_extrafield_local,
; 1304 :                                  extrafield_global, size_extrafield_global,
; 1305 :                                  comment, method, level, raw,
; 1306 :                                  windowBits, memLevel, strategy,
; 1307 :                                  password, crcForCrypting, VERSIONMADEBY, 0, zip64);

  0001b	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR zip64$[rsp]
  00022	89 84 24 90 00
	00 00		 mov	 DWORD PTR [rsp+144], eax
  00029	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+136], 0
  00034	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+128], 0
  0003f	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR crcForCrypting$[rsp]
  00046	89 44 24 78	 mov	 DWORD PTR [rsp+120], eax
  0004a	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR password$[rsp]
  00052	48 89 44 24 70	 mov	 QWORD PTR [rsp+112], rax
  00057	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR strategy$[rsp]
  0005e	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  00062	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR memLevel$[rsp]
  00069	89 44 24 60	 mov	 DWORD PTR [rsp+96], eax
  0006d	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR windowBits$[rsp]
  00074	89 44 24 58	 mov	 DWORD PTR [rsp+88], eax
  00078	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR raw$[rsp]
  0007f	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  00083	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  0008a	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  0008e	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  00095	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00099	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  000a1	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  000a6	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  000ad	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  000b1	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  000b9	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000be	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  000c5	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000c9	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR extrafield_local$[rsp]
  000d1	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR zipfi$[rsp]
  000d9	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  000e1	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  000e9	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1308 : }

  000ee	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000f5	c3		 ret	 0
zipOpenNewFileInZip3_64 ENDP
_TEXT	ENDS
PUBLIC	zipOpenNewFileInZip3
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip3 DD imagerel $LN3
	DD	imagerel $LN3+243
	DD	imagerel $unwind$zipOpenNewFileInZip3
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip3 DD 021b01H
	DD	015011bH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT zipOpenNewFileInZip3
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
raw$ = 256
windowBits$ = 264
memLevel$ = 272
strategy$ = 280
password$ = 288
crcForCrypting$ = 296
zipOpenNewFileInZip3 PROC				; COMDAT

; 1286 : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1287 :     return zipOpenNewFileInZip4_64 (file, filename, zipfi,
; 1288 :                                  extrafield_local, size_extrafield_local,
; 1289 :                                  extrafield_global, size_extrafield_global,
; 1290 :                                  comment, method, level, raw,
; 1291 :                                  windowBits, memLevel, strategy,
; 1292 :                                  password, crcForCrypting, VERSIONMADEBY, 0, 0);

  0001b	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+144], 0
  00026	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+136], 0
  00031	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR [rsp+128], 0
  0003c	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR crcForCrypting$[rsp]
  00043	89 44 24 78	 mov	 DWORD PTR [rsp+120], eax
  00047	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR password$[rsp]
  0004f	48 89 44 24 70	 mov	 QWORD PTR [rsp+112], rax
  00054	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR strategy$[rsp]
  0005b	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  0005f	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR memLevel$[rsp]
  00066	89 44 24 60	 mov	 DWORD PTR [rsp+96], eax
  0006a	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR windowBits$[rsp]
  00071	89 44 24 58	 mov	 DWORD PTR [rsp+88], eax
  00075	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR raw$[rsp]
  0007c	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  00080	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  00087	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  0008b	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  00092	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00096	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  0009e	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  000a3	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  000aa	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  000ae	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  000b6	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000bb	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  000c2	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000c6	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR extrafield_local$[rsp]
  000ce	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR zipfi$[rsp]
  000d6	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  000de	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  000e6	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1293 : }

  000eb	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000f2	c3		 ret	 0
zipOpenNewFileInZip3 ENDP
END
