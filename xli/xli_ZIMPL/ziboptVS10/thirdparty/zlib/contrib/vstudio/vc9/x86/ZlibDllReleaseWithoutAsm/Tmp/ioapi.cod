; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	d:\lp_solve_5.5\xli\xli_ZIMPL\ziboptVS10\thirdparty\zlib\contrib\minizip\ioapi.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_03HMFOOINA@r?$CLb?$AA@			; `string'
PUBLIC	??_C@_02GMLFBBN@wb?$AA@				; `string'
EXTRN	__imp__ftell:PROC
EXTRN	__imp__fseek:PROC
EXTRN	__imp__fread:PROC
EXTRN	__imp__fwrite:PROC
EXTRN	__imp___ftelli64:PROC
EXTRN	__imp___fseeki64:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp__ferror:PROC
EXTRN	__imp__fopen:PROC
;	COMDAT ??_C@_02GMLFBBN@wb?$AA@
CONST	SEGMENT
??_C@_02GMLFBBN@wb?$AA@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HMFOOINA@r?$CLb?$AA@
CONST	SEGMENT
??_C@_03HMFOOINA@r?$CLb?$AA@ DB 'r+b', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
; Function compile flags: /Odtp
; File d:\lp_solve_5.5\xli\xli_zimpl\ziboptvs10\thirdparty\zlib\contrib\minizip\ioapi.c
;	COMDAT _ferror_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_ferror_file_func PROC					; COMDAT

; 206  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 207  :     int ret;
; 208  :     ret = ferror((FILE *)stream);

  00004	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00007	50		 push	 eax
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ferror
  0000e	83 c4 04	 add	 esp, 4
  00011	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 209  :     return ret;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 210  : }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
_ferror_file_func ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _fclose_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_fclose_file_func PROC					; COMDAT

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 200  :     int ret;
; 201  :     ret = fclose((FILE *)stream);

  00004	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00007	50		 push	 eax
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fclose
  0000e	83 c4 04	 add	 esp, 4
  00011	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 202  :     return ret;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 203  : }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
_fclose_file_func ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _fseek64_file_func
_TEXT	SEGMENT
tv64 = -12						; size = 4
_ret$ = -8						; size = 4
_fseek_origin$ = -4					; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_offset$ = 16						; size = 8
_origin$ = 24						; size = 4
_fseek64_file_func PROC					; COMDAT

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 174  :     int fseek_origin=0;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fseek_origin$[ebp], 0

; 175  :     long ret;
; 176  :     switch (origin)

  0000d	8b 45 18	 mov	 eax, DWORD PTR _origin$[ebp]
  00010	89 45 f4	 mov	 DWORD PTR tv64[ebp], eax
  00013	83 7d f4 00	 cmp	 DWORD PTR tv64[ebp], 0
  00017	74 20		 je	 SHORT $LN3@fseek64_fi
  00019	83 7d f4 01	 cmp	 DWORD PTR tv64[ebp], 1
  0001d	74 08		 je	 SHORT $LN5@fseek64_fi
  0001f	83 7d f4 02	 cmp	 DWORD PTR tv64[ebp], 2
  00023	74 0b		 je	 SHORT $LN4@fseek64_fi
  00025	eb 1b		 jmp	 SHORT $LN2@fseek64_fi
$LN5@fseek64_fi:

; 177  :     {
; 178  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 179  :         fseek_origin = SEEK_CUR;

  00027	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _fseek_origin$[ebp], 1

; 180  :         break;

  0002e	eb 17		 jmp	 SHORT $LN6@fseek64_fi
$LN4@fseek64_fi:

; 181  :     case ZLIB_FILEFUNC_SEEK_END :
; 182  :         fseek_origin = SEEK_END;

  00030	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _fseek_origin$[ebp], 2

; 183  :         break;

  00037	eb 0e		 jmp	 SHORT $LN6@fseek64_fi
$LN3@fseek64_fi:

; 184  :     case ZLIB_FILEFUNC_SEEK_SET :
; 185  :         fseek_origin = SEEK_SET;

  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fseek_origin$[ebp], 0

; 186  :         break;

  00040	eb 05		 jmp	 SHORT $LN6@fseek64_fi
$LN2@fseek64_fi:

; 187  :     default: return -1;

  00042	83 c8 ff	 or	 eax, -1
  00045	eb 2e		 jmp	 SHORT $LN8@fseek64_fi
$LN6@fseek64_fi:

; 188  :     }
; 189  :     ret = 0;

  00047	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 190  : 
; 191  :     if(fseeko64((FILE *)stream, offset, fseek_origin) != 0)

  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _fseek_origin$[ebp]
  00051	51		 push	 ecx
  00052	8b 55 14	 mov	 edx, DWORD PTR _offset$[ebp+4]
  00055	52		 push	 edx
  00056	8b 45 10	 mov	 eax, DWORD PTR _offset$[ebp]
  00059	50		 push	 eax
  0005a	8b 4d 0c	 mov	 ecx, DWORD PTR _stream$[ebp]
  0005d	51		 push	 ecx
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___fseeki64
  00064	83 c4 10	 add	 esp, 16			; 00000010H
  00067	85 c0		 test	 eax, eax
  00069	74 07		 je	 SHORT $LN1@fseek64_fi

; 192  :                         ret = -1;

  0006b	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1
$LN1@fseek64_fi:

; 193  : 
; 194  :     return ret;

  00072	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]
$LN8@fseek64_fi:

; 195  : }

  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_fseek64_file_func ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _fseek_file_func
_TEXT	SEGMENT
tv64 = -12						; size = 4
_ret$ = -8						; size = 4
_fseek_origin$ = -4					; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_offset$ = 16						; size = 4
_origin$ = 20						; size = 4
_fseek_file_func PROC					; COMDAT

; 150  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 151  :     int fseek_origin=0;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fseek_origin$[ebp], 0

; 152  :     long ret;
; 153  :     switch (origin)

  0000d	8b 45 14	 mov	 eax, DWORD PTR _origin$[ebp]
  00010	89 45 f4	 mov	 DWORD PTR tv64[ebp], eax
  00013	83 7d f4 00	 cmp	 DWORD PTR tv64[ebp], 0
  00017	74 20		 je	 SHORT $LN3@fseek_file
  00019	83 7d f4 01	 cmp	 DWORD PTR tv64[ebp], 1
  0001d	74 08		 je	 SHORT $LN5@fseek_file
  0001f	83 7d f4 02	 cmp	 DWORD PTR tv64[ebp], 2
  00023	74 0b		 je	 SHORT $LN4@fseek_file
  00025	eb 1b		 jmp	 SHORT $LN2@fseek_file
$LN5@fseek_file:

; 154  :     {
; 155  :     case ZLIB_FILEFUNC_SEEK_CUR :
; 156  :         fseek_origin = SEEK_CUR;

  00027	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR _fseek_origin$[ebp], 1

; 157  :         break;

  0002e	eb 17		 jmp	 SHORT $LN6@fseek_file
$LN4@fseek_file:

; 158  :     case ZLIB_FILEFUNC_SEEK_END :
; 159  :         fseek_origin = SEEK_END;

  00030	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR _fseek_origin$[ebp], 2

; 160  :         break;

  00037	eb 0e		 jmp	 SHORT $LN6@fseek_file
$LN3@fseek_file:

; 161  :     case ZLIB_FILEFUNC_SEEK_SET :
; 162  :         fseek_origin = SEEK_SET;

  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _fseek_origin$[ebp], 0

; 163  :         break;

  00040	eb 05		 jmp	 SHORT $LN6@fseek_file
$LN2@fseek_file:

; 164  :     default: return -1;

  00042	83 c8 ff	 or	 eax, -1
  00045	eb 2a		 jmp	 SHORT $LN8@fseek_file
$LN6@fseek_file:

; 165  :     }
; 166  :     ret = 0;

  00047	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ret$[ebp], 0

; 167  :     if (fseek((FILE *)stream, offset, fseek_origin) != 0)

  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _fseek_origin$[ebp]
  00051	51		 push	 ecx
  00052	8b 55 10	 mov	 edx, DWORD PTR _offset$[ebp]
  00055	52		 push	 edx
  00056	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00059	50		 push	 eax
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fseek
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH
  00063	85 c0		 test	 eax, eax
  00065	74 07		 je	 SHORT $LN1@fseek_file

; 168  :         ret = -1;

  00067	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR _ret$[ebp], -1
$LN1@fseek_file:

; 169  :     return ret;

  0006e	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]
$LN8@fseek_file:

; 170  : }

  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
_fseek_file_func ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _ftell64_file_func
_TEXT	SEGMENT
_ret$ = -8						; size = 8
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_ftell64_file_func PROC					; COMDAT

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 144  :     ZPOS64_T ret;
; 145  :     ret = ftello64((FILE *)stream);

  00006	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___ftelli64
  00010	83 c4 04	 add	 esp, 4
  00013	89 45 f8	 mov	 DWORD PTR _ret$[ebp], eax
  00016	89 55 fc	 mov	 DWORD PTR _ret$[ebp+4], edx

; 146  :     return ret;

  00019	8b 45 f8	 mov	 eax, DWORD PTR _ret$[ebp]
  0001c	8b 55 fc	 mov	 edx, DWORD PTR _ret$[ebp+4]

; 147  : }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_ftell64_file_func ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _ftell_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_ftell_file_func PROC					; COMDAT

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 136  :     long ret;
; 137  :     ret = ftell((FILE *)stream);

  00004	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00007	50		 push	 eax
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ftell
  0000e	83 c4 04	 add	 esp, 4
  00011	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 138  :     return ret;

  00014	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 139  : }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
_ftell_file_func ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _fwrite_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_fwrite_file_func PROC					; COMDAT

; 128  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 129  :     uLong ret;
; 130  :     ret = (uLong)fwrite(buf, 1, (size_t)size, (FILE *)stream);

  00004	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00007	50		 push	 eax
  00008	8b 4d 14	 mov	 ecx, DWORD PTR _size$[ebp]
  0000b	51		 push	 ecx
  0000c	6a 01		 push	 1
  0000e	8b 55 10	 mov	 edx, DWORD PTR _buf$[ebp]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fwrite
  00018	83 c4 10	 add	 esp, 16			; 00000010H
  0001b	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 131  :     return ret;

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 132  : }

  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
_fwrite_file_func ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _fread_file_func
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_opaque$ = 8						; size = 4
_stream$ = 12						; size = 4
_buf$ = 16						; size = 4
_size$ = 20						; size = 4
_fread_file_func PROC					; COMDAT

; 121  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 122  :     uLong ret;
; 123  :     ret = (uLong)fread(buf, 1, (size_t)size, (FILE *)stream);

  00004	8b 45 0c	 mov	 eax, DWORD PTR _stream$[ebp]
  00007	50		 push	 eax
  00008	8b 4d 14	 mov	 ecx, DWORD PTR _size$[ebp]
  0000b	51		 push	 ecx
  0000c	6a 01		 push	 1
  0000e	8b 55 10	 mov	 edx, DWORD PTR _buf$[ebp]
  00011	52		 push	 edx
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fread
  00018	83 c4 10	 add	 esp, 16			; 00000010H
  0001b	89 45 fc	 mov	 DWORD PTR _ret$[ebp], eax

; 124  :     return ret;

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _ret$[ebp]

; 125  : }

  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
_fread_file_func ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _fopen64_file_func
_TEXT	SEGMENT
_mode_fopen$ = -8					; size = 4
_file$ = -4						; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_fopen64_file_func PROC					; COMDAT

; 102  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 103  :     FILE* file = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _file$[ebp], 0

; 104  :     const char* mode_fopen = NULL;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], 0

; 105  :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  00014	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  00017	83 e0 03	 and	 eax, 3
  0001a	83 f8 01	 cmp	 eax, 1
  0001d	75 09		 jne	 SHORT $LN6@fopen64_fi

; 106  :         mode_fopen = "rb";

  0001f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], OFFSET ??_C@_02JDPG@rb?$AA@

; 107  :     else

  00026	eb 20		 jmp	 SHORT $LN5@fopen64_fi
$LN6@fopen64_fi:

; 108  :     if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  00028	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  0002b	83 e1 04	 and	 ecx, 4
  0002e	74 09		 je	 SHORT $LN4@fopen64_fi

; 109  :         mode_fopen = "r+b";

  00030	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], OFFSET ??_C@_03HMFOOINA@r?$CLb?$AA@

; 110  :     else

  00037	eb 0f		 jmp	 SHORT $LN5@fopen64_fi
$LN4@fopen64_fi:

; 111  :     if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  00039	8b 55 10	 mov	 edx, DWORD PTR _mode$[ebp]
  0003c	83 e2 08	 and	 edx, 8
  0003f	74 07		 je	 SHORT $LN5@fopen64_fi

; 112  :         mode_fopen = "wb";

  00041	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], OFFSET ??_C@_02GMLFBBN@wb?$AA@
$LN5@fopen64_fi:

; 113  : 
; 114  :     if ((filename!=NULL) && (mode_fopen != NULL))

  00048	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  0004c	74 1a		 je	 SHORT $LN1@fopen64_fi
  0004e	83 7d f8 00	 cmp	 DWORD PTR _mode_fopen$[ebp], 0
  00052	74 14		 je	 SHORT $LN1@fopen64_fi

; 115  :         file = fopen64((const char*)filename, mode_fopen);

  00054	8b 45 f8	 mov	 eax, DWORD PTR _mode_fopen$[ebp]
  00057	50		 push	 eax
  00058	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  0005b	51		 push	 ecx
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00062	83 c4 08	 add	 esp, 8
  00065	89 45 fc	 mov	 DWORD PTR _file$[ebp], eax
$LN1@fopen64_fi:

; 116  :     return file;

  00068	8b 45 fc	 mov	 eax, DWORD PTR _file$[ebp]

; 117  : }

  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_fopen64_file_func ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _fopen_file_func
_TEXT	SEGMENT
_mode_fopen$ = -8					; size = 4
_file$ = -4						; size = 4
_opaque$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_fopen_file_func PROC					; COMDAT

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 85   :     FILE* file = NULL;

  00006	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _file$[ebp], 0

; 86   :     const char* mode_fopen = NULL;

  0000d	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], 0

; 87   :     if ((mode & ZLIB_FILEFUNC_MODE_READWRITEFILTER)==ZLIB_FILEFUNC_MODE_READ)

  00014	8b 45 10	 mov	 eax, DWORD PTR _mode$[ebp]
  00017	83 e0 03	 and	 eax, 3
  0001a	83 f8 01	 cmp	 eax, 1
  0001d	75 09		 jne	 SHORT $LN6@fopen_file

; 88   :         mode_fopen = "rb";

  0001f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], OFFSET ??_C@_02JDPG@rb?$AA@

; 89   :     else

  00026	eb 20		 jmp	 SHORT $LN5@fopen_file
$LN6@fopen_file:

; 90   :     if (mode & ZLIB_FILEFUNC_MODE_EXISTING)

  00028	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  0002b	83 e1 04	 and	 ecx, 4
  0002e	74 09		 je	 SHORT $LN4@fopen_file

; 91   :         mode_fopen = "r+b";

  00030	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], OFFSET ??_C@_03HMFOOINA@r?$CLb?$AA@

; 92   :     else

  00037	eb 0f		 jmp	 SHORT $LN5@fopen_file
$LN4@fopen_file:

; 93   :     if (mode & ZLIB_FILEFUNC_MODE_CREATE)

  00039	8b 55 10	 mov	 edx, DWORD PTR _mode$[ebp]
  0003c	83 e2 08	 and	 edx, 8
  0003f	74 07		 je	 SHORT $LN5@fopen_file

; 94   :         mode_fopen = "wb";

  00041	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _mode_fopen$[ebp], OFFSET ??_C@_02GMLFBBN@wb?$AA@
$LN5@fopen_file:

; 95   : 
; 96   :     if ((filename!=NULL) && (mode_fopen != NULL))

  00048	83 7d 0c 00	 cmp	 DWORD PTR _filename$[ebp], 0
  0004c	74 1a		 je	 SHORT $LN1@fopen_file
  0004e	83 7d f8 00	 cmp	 DWORD PTR _mode_fopen$[ebp], 0
  00052	74 14		 je	 SHORT $LN1@fopen_file

; 97   :         file = fopen(filename, mode_fopen);

  00054	8b 45 f8	 mov	 eax, DWORD PTR _mode_fopen$[ebp]
  00057	50		 push	 eax
  00058	8b 4d 0c	 mov	 ecx, DWORD PTR _filename$[ebp]
  0005b	51		 push	 ecx
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__fopen
  00062	83 c4 08	 add	 esp, 8
  00065	89 45 fc	 mov	 DWORD PTR _file$[ebp], eax
$LN1@fopen_file:

; 98   :     return file;

  00068	8b 45 fc	 mov	 eax, DWORD PTR _file$[ebp]

; 99   : }

  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
_fopen_file_func ENDP
_TEXT	ENDS
PUBLIC	_fill_zlib_filefunc64_32_def_from_filefunc32
; Function compile flags: /Odtp
;	COMDAT _fill_zlib_filefunc64_32_def_from_filefunc32
_TEXT	SEGMENT
_p_filefunc64_32$ = 8					; size = 4
_p_filefunc32$ = 12					; size = 4
_fill_zlib_filefunc64_32_def_from_filefunc32 PROC	; COMDAT

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 59   :     p_filefunc64_32->zfile_func64.zopen64_file = NULL;

  00003	8b 45 08	 mov	 eax, DWORD PTR _p_filefunc64_32$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 60   :     p_filefunc64_32->zopen32_file = p_filefunc32->zopen_file;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _p_filefunc64_32$[ebp]
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _p_filefunc32$[ebp]
  00012	8b 02		 mov	 eax, DWORD PTR [edx]
  00014	89 41 20	 mov	 DWORD PTR [ecx+32], eax

; 61   :     p_filefunc64_32->zfile_func64.zerror_file = p_filefunc32->zerror_file;

  00017	8b 4d 08	 mov	 ecx, DWORD PTR _p_filefunc64_32$[ebp]
  0001a	8b 55 0c	 mov	 edx, DWORD PTR _p_filefunc32$[ebp]
  0001d	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00020	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 62   :     p_filefunc64_32->zfile_func64.zread_file = p_filefunc32->zread_file;

  00023	8b 4d 08	 mov	 ecx, DWORD PTR _p_filefunc64_32$[ebp]
  00026	8b 55 0c	 mov	 edx, DWORD PTR _p_filefunc32$[ebp]
  00029	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002c	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 63   :     p_filefunc64_32->zfile_func64.zwrite_file = p_filefunc32->zwrite_file;

  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _p_filefunc64_32$[ebp]
  00032	8b 55 0c	 mov	 edx, DWORD PTR _p_filefunc32$[ebp]
  00035	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00038	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 64   :     p_filefunc64_32->zfile_func64.ztell64_file = NULL;

  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _p_filefunc64_32$[ebp]
  0003e	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 65   :     p_filefunc64_32->zfile_func64.zseek64_file = NULL;

  00045	8b 55 08	 mov	 edx, DWORD PTR _p_filefunc64_32$[ebp]
  00048	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 66   :     p_filefunc64_32->zfile_func64.zclose_file = p_filefunc32->zclose_file;

  0004f	8b 45 08	 mov	 eax, DWORD PTR _p_filefunc64_32$[ebp]
  00052	8b 4d 0c	 mov	 ecx, DWORD PTR _p_filefunc32$[ebp]
  00055	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00058	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 67   :     p_filefunc64_32->zfile_func64.zerror_file = p_filefunc32->zerror_file;

  0005b	8b 45 08	 mov	 eax, DWORD PTR _p_filefunc64_32$[ebp]
  0005e	8b 4d 0c	 mov	 ecx, DWORD PTR _p_filefunc32$[ebp]
  00061	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00064	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 68   :     p_filefunc64_32->zfile_func64.opaque = p_filefunc32->opaque;

  00067	8b 45 08	 mov	 eax, DWORD PTR _p_filefunc64_32$[ebp]
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _p_filefunc32$[ebp]
  0006d	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00070	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 69   :     p_filefunc64_32->zseek32_file = p_filefunc32->zseek_file;

  00073	8b 45 08	 mov	 eax, DWORD PTR _p_filefunc64_32$[ebp]
  00076	8b 4d 0c	 mov	 ecx, DWORD PTR _p_filefunc32$[ebp]
  00079	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0007c	89 50 28	 mov	 DWORD PTR [eax+40], edx

; 70   :     p_filefunc64_32->ztell32_file = p_filefunc32->ztell_file;

  0007f	8b 45 08	 mov	 eax, DWORD PTR _p_filefunc64_32$[ebp]
  00082	8b 4d 0c	 mov	 ecx, DWORD PTR _p_filefunc32$[ebp]
  00085	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00088	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 71   : }

  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
_fill_zlib_filefunc64_32_def_from_filefunc32 ENDP
_TEXT	ENDS
PUBLIC	_call_ztell64
; Function compile flags: /Odtp
;	COMDAT _call_ztell64
_TEXT	SEGMENT
_tell_uLong$79153 = -4					; size = 4
_pfilefunc$ = 8						; size = 4
_filestream$ = 12					; size = 4
_call_ztell64 PROC					; COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 45   :     if (pfilefunc->zfile_func64.zseek64_file != NULL)

  00004	8b 45 08	 mov	 eax, DWORD PTR _pfilefunc$[ebp]
  00007	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0000b	74 1a		 je	 SHORT $LN4@call_ztell

; 46   :         return (*(pfilefunc->zfile_func64.ztell64_file)) (pfilefunc->zfile_func64.opaque,filestream);

  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00010	51		 push	 ecx
  00011	8b 55 08	 mov	 edx, DWORD PTR _pfilefunc$[ebp]
  00014	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00017	50		 push	 eax
  00018	8b 4d 08	 mov	 ecx, DWORD PTR _pfilefunc$[ebp]
  0001b	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0001e	ff d2		 call	 edx
  00020	83 c4 08	 add	 esp, 8
  00023	eb 30		 jmp	 SHORT $LN5@call_ztell

; 47   :     else

  00025	eb 2e		 jmp	 SHORT $LN5@call_ztell
$LN4@call_ztell:

; 48   :     {
; 49   :         uLong tell_uLong = (*(pfilefunc->ztell32_file))(pfilefunc->zfile_func64.opaque,filestream);

  00027	8b 45 0c	 mov	 eax, DWORD PTR _filestream$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _pfilefunc$[ebp]
  0002e	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00031	52		 push	 edx
  00032	8b 45 08	 mov	 eax, DWORD PTR _pfilefunc$[ebp]
  00035	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00038	ff d1		 call	 ecx
  0003a	83 c4 08	 add	 esp, 8
  0003d	89 45 fc	 mov	 DWORD PTR _tell_uLong$79153[ebp], eax

; 50   :         if ((tell_uLong) == ((uLong)-1))

  00040	83 7d fc ff	 cmp	 DWORD PTR _tell_uLong$79153[ebp], -1
  00044	75 0a		 jne	 SHORT $LN2@call_ztell

; 51   :             return (ZPOS64_T)-1;

  00046	83 c8 ff	 or	 eax, -1
  00049	83 ca ff	 or	 edx, -1
  0004c	eb 07		 jmp	 SHORT $LN5@call_ztell

; 52   :         else

  0004e	eb 05		 jmp	 SHORT $LN5@call_ztell
$LN2@call_ztell:

; 53   :             return tell_uLong;

  00050	8b 45 fc	 mov	 eax, DWORD PTR _tell_uLong$79153[ebp]
  00053	33 d2		 xor	 edx, edx
$LN5@call_ztell:

; 54   :     }
; 55   : }

  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c3		 ret	 0
_call_ztell64 ENDP
_TEXT	ENDS
PUBLIC	_call_zseek64
; Function compile flags: /Odtp
;	COMDAT _call_zseek64
_TEXT	SEGMENT
tv130 = -12						; size = 8
_offsetTruncated$79141 = -4				; size = 4
_pfilefunc$ = 8						; size = 4
_filestream$ = 12					; size = 4
_offset$ = 16						; size = 8
_origin$ = 24						; size = 4
_call_zseek64 PROC					; COMDAT

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 31   :     if (pfilefunc->zfile_func64.zseek64_file != NULL)

  00006	8b 45 08	 mov	 eax, DWORD PTR _pfilefunc$[ebp]
  00009	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0000d	74 26		 je	 SHORT $LN4@call_zseek

; 32   :         return (*(pfilefunc->zfile_func64.zseek64_file)) (pfilefunc->zfile_func64.opaque,filestream,offset,origin);

  0000f	8b 4d 18	 mov	 ecx, DWORD PTR _origin$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 14	 mov	 edx, DWORD PTR _offset$[ebp+4]
  00016	52		 push	 edx
  00017	8b 45 10	 mov	 eax, DWORD PTR _offset$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR _pfilefunc$[ebp]
  00022	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00025	50		 push	 eax
  00026	8b 4d 08	 mov	 ecx, DWORD PTR _pfilefunc$[ebp]
  00029	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0002c	ff d2		 call	 edx
  0002e	83 c4 14	 add	 esp, 20			; 00000014H
  00031	eb 48		 jmp	 SHORT $LN5@call_zseek

; 33   :     else

  00033	eb 46		 jmp	 SHORT $LN5@call_zseek
$LN4@call_zseek:

; 34   :     {
; 35   :         uLong offsetTruncated = (uLong)offset;

  00035	8b 45 10	 mov	 eax, DWORD PTR _offset$[ebp]
  00038	89 45 fc	 mov	 DWORD PTR _offsetTruncated$79141[ebp], eax

; 36   :         if (offsetTruncated != offset)

  0003b	8b 4d fc	 mov	 ecx, DWORD PTR _offsetTruncated$79141[ebp]
  0003e	33 d2		 xor	 edx, edx
  00040	89 4d f4	 mov	 DWORD PTR tv130[ebp], ecx
  00043	89 55 f8	 mov	 DWORD PTR tv130[ebp+4], edx
  00046	8b 45 f4	 mov	 eax, DWORD PTR tv130[ebp]
  00049	3b 45 10	 cmp	 eax, DWORD PTR _offset$[ebp]
  0004c	75 08		 jne	 SHORT $LN7@call_zseek
  0004e	8b 4d f8	 mov	 ecx, DWORD PTR tv130[ebp+4]
  00051	3b 4d 14	 cmp	 ecx, DWORD PTR _offset$[ebp+4]
  00054	74 07		 je	 SHORT $LN2@call_zseek
$LN7@call_zseek:

; 37   :             return -1;

  00056	83 c8 ff	 or	 eax, -1
  00059	eb 20		 jmp	 SHORT $LN5@call_zseek

; 38   :         else

  0005b	eb 1e		 jmp	 SHORT $LN5@call_zseek
$LN2@call_zseek:

; 39   :             return (*(pfilefunc->zseek32_file))(pfilefunc->zfile_func64.opaque,filestream,offsetTruncated,origin);

  0005d	8b 55 18	 mov	 edx, DWORD PTR _origin$[ebp]
  00060	52		 push	 edx
  00061	8b 45 fc	 mov	 eax, DWORD PTR _offsetTruncated$79141[ebp]
  00064	50		 push	 eax
  00065	8b 4d 0c	 mov	 ecx, DWORD PTR _filestream$[ebp]
  00068	51		 push	 ecx
  00069	8b 55 08	 mov	 edx, DWORD PTR _pfilefunc$[ebp]
  0006c	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0006f	50		 push	 eax
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _pfilefunc$[ebp]
  00073	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  00076	ff d2		 call	 edx
  00078	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@call_zseek:

; 40   :     }
; 41   : }

  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
_call_zseek64 ENDP
_TEXT	ENDS
PUBLIC	_call_zopen64
; Function compile flags: /Odtp
;	COMDAT _call_zopen64
_TEXT	SEGMENT
_pfilefunc$ = 8						; size = 4
_filename$ = 12						; size = 4
_mode$ = 16						; size = 4
_call_zopen64 PROC					; COMDAT

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 21   :     if (pfilefunc->zfile_func64.zopen64_file != NULL)

  00003	8b 45 08	 mov	 eax, DWORD PTR _pfilefunc$[ebp]
  00006	83 38 00	 cmp	 DWORD PTR [eax], 0
  00009	74 1d		 je	 SHORT $LN2@call_zopen

; 22   :         return (*(pfilefunc->zfile_func64.zopen64_file)) (pfilefunc->zfile_func64.opaque,filename,mode);

  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  0000e	51		 push	 ecx
  0000f	8b 55 0c	 mov	 edx, DWORD PTR _filename$[ebp]
  00012	52		 push	 edx
  00013	8b 45 08	 mov	 eax, DWORD PTR _pfilefunc$[ebp]
  00016	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00019	51		 push	 ecx
  0001a	8b 55 08	 mov	 edx, DWORD PTR _pfilefunc$[ebp]
  0001d	8b 02		 mov	 eax, DWORD PTR [edx]
  0001f	ff d0		 call	 eax
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	eb 1c		 jmp	 SHORT $LN3@call_zopen

; 23   :     else

  00026	eb 1a		 jmp	 SHORT $LN3@call_zopen
$LN2@call_zopen:

; 24   :     {
; 25   :         return (*(pfilefunc->zopen32_file))(pfilefunc->zfile_func64.opaque,(const char*)filename,mode);

  00028	8b 4d 10	 mov	 ecx, DWORD PTR _mode$[ebp]
  0002b	51		 push	 ecx
  0002c	8b 55 0c	 mov	 edx, DWORD PTR _filename$[ebp]
  0002f	52		 push	 edx
  00030	8b 45 08	 mov	 eax, DWORD PTR _pfilefunc$[ebp]
  00033	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00036	51		 push	 ecx
  00037	8b 55 08	 mov	 edx, DWORD PTR _pfilefunc$[ebp]
  0003a	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0003d	ff d0		 call	 eax
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@call_zopen:

; 26   :     }
; 27   : }

  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
_call_zopen64 ENDP
PUBLIC	_fill_fopen64_filefunc
; Function compile flags: /Odtp
;	COMDAT _fill_fopen64_filefunc
_TEXT	SEGMENT
_pzlib_filefunc_def$ = 8				; size = 4
_fill_fopen64_filefunc PROC				; COMDAT

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 227  :     pzlib_filefunc_def->zopen64_file = fopen64_file_func;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET _fopen64_file_func

; 228  :     pzlib_filefunc_def->zread_file = fread_file_func;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET _fread_file_func

; 229  :     pzlib_filefunc_def->zwrite_file = fwrite_file_func;

  00016	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00019	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET _fwrite_file_func

; 230  :     pzlib_filefunc_def->ztell64_file = ftell64_file_func;

  00020	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00023	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _ftell64_file_func

; 231  :     pzlib_filefunc_def->zseek64_file = fseek64_file_func;

  0002a	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0002d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], OFFSET _fseek64_file_func

; 232  :     pzlib_filefunc_def->zclose_file = fclose_file_func;

  00034	8b 55 08	 mov	 edx, DWORD PTR _pzlib_filefunc_def$[ebp]
  00037	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], OFFSET _fclose_file_func

; 233  :     pzlib_filefunc_def->zerror_file = ferror_file_func;

  0003e	8b 45 08	 mov	 eax, DWORD PTR _pzlib_filefunc_def$[ebp]
  00041	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET _ferror_file_func

; 234  :     pzlib_filefunc_def->opaque = NULL;

  00048	8b 4d 08	 mov	 ecx, DWORD PTR _pzlib_filefunc_def$[ebp]
  0004b	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 235  : }

  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
_fill_fopen64_filefunc ENDP
END
