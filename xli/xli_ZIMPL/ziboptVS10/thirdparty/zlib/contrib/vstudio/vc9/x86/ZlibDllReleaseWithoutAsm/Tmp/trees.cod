; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.21022.08 

	TITLE	d:\lp_solve_5.5\xli\xli_ZIMPL\ziboptVS10\thirdparty\zlib\trees.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	__dist_code
PUBLIC	__length_code
_static_l_desc DD FLAT:_static_ltree
	DD	FLAT:_extra_lbits
	DD	0101H
	DD	011eH
	DD	0fH
_static_d_desc DD FLAT:_static_dtree
	DD	FLAT:_extra_dbits
	DD	00H
	DD	01eH
	DD	0fH
_static_bl_desc DD 00H
	DD	FLAT:_extra_blbits
	DD	00H
	DD	013H
	DD	07H
	ORG $+7
_extra_lbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	00H
	ORG $+4
_extra_dbits DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	07H
	DD	07H
	DD	08H
	DD	08H
	DD	09H
	DD	09H
	DD	0aH
	DD	0aH
	DD	0bH
	DD	0bH
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0dH
_extra_blbits DD 00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	02H
	DD	03H
	DD	07H
_bl_order DB	010H
	DB	011H
	DB	012H
	DB	00H
	DB	08H
	DB	07H
	DB	09H
	DB	06H
	DB	0aH
	DB	05H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	0dH
	DB	02H
	DB	0eH
	DB	01H
	DB	0fH
	ORG $+1
_static_ltree DW 0cH
	DW	08H
	DW	08cH
	DW	08H
	DW	04cH
	DW	08H
	DW	0ccH
	DW	08H
	DW	02cH
	DW	08H
	DW	0acH
	DW	08H
	DW	06cH
	DW	08H
	DW	0ecH
	DW	08H
	DW	01cH
	DW	08H
	DW	09cH
	DW	08H
	DW	05cH
	DW	08H
	DW	0dcH
	DW	08H
	DW	03cH
	DW	08H
	DW	0bcH
	DW	08H
	DW	07cH
	DW	08H
	DW	0fcH
	DW	08H
	DW	02H
	DW	08H
	DW	082H
	DW	08H
	DW	042H
	DW	08H
	DW	0c2H
	DW	08H
	DW	022H
	DW	08H
	DW	0a2H
	DW	08H
	DW	062H
	DW	08H
	DW	0e2H
	DW	08H
	DW	012H
	DW	08H
	DW	092H
	DW	08H
	DW	052H
	DW	08H
	DW	0d2H
	DW	08H
	DW	032H
	DW	08H
	DW	0b2H
	DW	08H
	DW	072H
	DW	08H
	DW	0f2H
	DW	08H
	DW	0aH
	DW	08H
	DW	08aH
	DW	08H
	DW	04aH
	DW	08H
	DW	0caH
	DW	08H
	DW	02aH
	DW	08H
	DW	0aaH
	DW	08H
	DW	06aH
	DW	08H
	DW	0eaH
	DW	08H
	DW	01aH
	DW	08H
	DW	09aH
	DW	08H
	DW	05aH
	DW	08H
	DW	0daH
	DW	08H
	DW	03aH
	DW	08H
	DW	0baH
	DW	08H
	DW	07aH
	DW	08H
	DW	0faH
	DW	08H
	DW	06H
	DW	08H
	DW	086H
	DW	08H
	DW	046H
	DW	08H
	DW	0c6H
	DW	08H
	DW	026H
	DW	08H
	DW	0a6H
	DW	08H
	DW	066H
	DW	08H
	DW	0e6H
	DW	08H
	DW	016H
	DW	08H
	DW	096H
	DW	08H
	DW	056H
	DW	08H
	DW	0d6H
	DW	08H
	DW	036H
	DW	08H
	DW	0b6H
	DW	08H
	DW	076H
	DW	08H
	DW	0f6H
	DW	08H
	DW	0eH
	DW	08H
	DW	08eH
	DW	08H
	DW	04eH
	DW	08H
	DW	0ceH
	DW	08H
	DW	02eH
	DW	08H
	DW	0aeH
	DW	08H
	DW	06eH
	DW	08H
	DW	0eeH
	DW	08H
	DW	01eH
	DW	08H
	DW	09eH
	DW	08H
	DW	05eH
	DW	08H
	DW	0deH
	DW	08H
	DW	03eH
	DW	08H
	DW	0beH
	DW	08H
	DW	07eH
	DW	08H
	DW	0feH
	DW	08H
	DW	01H
	DW	08H
	DW	081H
	DW	08H
	DW	041H
	DW	08H
	DW	0c1H
	DW	08H
	DW	021H
	DW	08H
	DW	0a1H
	DW	08H
	DW	061H
	DW	08H
	DW	0e1H
	DW	08H
	DW	011H
	DW	08H
	DW	091H
	DW	08H
	DW	051H
	DW	08H
	DW	0d1H
	DW	08H
	DW	031H
	DW	08H
	DW	0b1H
	DW	08H
	DW	071H
	DW	08H
	DW	0f1H
	DW	08H
	DW	09H
	DW	08H
	DW	089H
	DW	08H
	DW	049H
	DW	08H
	DW	0c9H
	DW	08H
	DW	029H
	DW	08H
	DW	0a9H
	DW	08H
	DW	069H
	DW	08H
	DW	0e9H
	DW	08H
	DW	019H
	DW	08H
	DW	099H
	DW	08H
	DW	059H
	DW	08H
	DW	0d9H
	DW	08H
	DW	039H
	DW	08H
	DW	0b9H
	DW	08H
	DW	079H
	DW	08H
	DW	0f9H
	DW	08H
	DW	05H
	DW	08H
	DW	085H
	DW	08H
	DW	045H
	DW	08H
	DW	0c5H
	DW	08H
	DW	025H
	DW	08H
	DW	0a5H
	DW	08H
	DW	065H
	DW	08H
	DW	0e5H
	DW	08H
	DW	015H
	DW	08H
	DW	095H
	DW	08H
	DW	055H
	DW	08H
	DW	0d5H
	DW	08H
	DW	035H
	DW	08H
	DW	0b5H
	DW	08H
	DW	075H
	DW	08H
	DW	0f5H
	DW	08H
	DW	0dH
	DW	08H
	DW	08dH
	DW	08H
	DW	04dH
	DW	08H
	DW	0cdH
	DW	08H
	DW	02dH
	DW	08H
	DW	0adH
	DW	08H
	DW	06dH
	DW	08H
	DW	0edH
	DW	08H
	DW	01dH
	DW	08H
	DW	09dH
	DW	08H
	DW	05dH
	DW	08H
	DW	0ddH
	DW	08H
	DW	03dH
	DW	08H
	DW	0bdH
	DW	08H
	DW	07dH
	DW	08H
	DW	0fdH
	DW	08H
	DW	013H
	DW	09H
	DW	0113H
	DW	09H
	DW	093H
	DW	09H
	DW	0193H
	DW	09H
	DW	053H
	DW	09H
	DW	0153H
	DW	09H
	DW	0d3H
	DW	09H
	DW	01d3H
	DW	09H
	DW	033H
	DW	09H
	DW	0133H
	DW	09H
	DW	0b3H
	DW	09H
	DW	01b3H
	DW	09H
	DW	073H
	DW	09H
	DW	0173H
	DW	09H
	DW	0f3H
	DW	09H
	DW	01f3H
	DW	09H
	DW	0bH
	DW	09H
	DW	010bH
	DW	09H
	DW	08bH
	DW	09H
	DW	018bH
	DW	09H
	DW	04bH
	DW	09H
	DW	014bH
	DW	09H
	DW	0cbH
	DW	09H
	DW	01cbH
	DW	09H
	DW	02bH
	DW	09H
	DW	012bH
	DW	09H
	DW	0abH
	DW	09H
	DW	01abH
	DW	09H
	DW	06bH
	DW	09H
	DW	016bH
	DW	09H
	DW	0ebH
	DW	09H
	DW	01ebH
	DW	09H
	DW	01bH
	DW	09H
	DW	011bH
	DW	09H
	DW	09bH
	DW	09H
	DW	019bH
	DW	09H
	DW	05bH
	DW	09H
	DW	015bH
	DW	09H
	DW	0dbH
	DW	09H
	DW	01dbH
	DW	09H
	DW	03bH
	DW	09H
	DW	013bH
	DW	09H
	DW	0bbH
	DW	09H
	DW	01bbH
	DW	09H
	DW	07bH
	DW	09H
	DW	017bH
	DW	09H
	DW	0fbH
	DW	09H
	DW	01fbH
	DW	09H
	DW	07H
	DW	09H
	DW	0107H
	DW	09H
	DW	087H
	DW	09H
	DW	0187H
	DW	09H
	DW	047H
	DW	09H
	DW	0147H
	DW	09H
	DW	0c7H
	DW	09H
	DW	01c7H
	DW	09H
	DW	027H
	DW	09H
	DW	0127H
	DW	09H
	DW	0a7H
	DW	09H
	DW	01a7H
	DW	09H
	DW	067H
	DW	09H
	DW	0167H
	DW	09H
	DW	0e7H
	DW	09H
	DW	01e7H
	DW	09H
	DW	017H
	DW	09H
	DW	0117H
	DW	09H
	DW	097H
	DW	09H
	DW	0197H
	DW	09H
	DW	057H
	DW	09H
	DW	0157H
	DW	09H
	DW	0d7H
	DW	09H
	DW	01d7H
	DW	09H
	DW	037H
	DW	09H
	DW	0137H
	DW	09H
	DW	0b7H
	DW	09H
	DW	01b7H
	DW	09H
	DW	077H
	DW	09H
	DW	0177H
	DW	09H
	DW	0f7H
	DW	09H
	DW	01f7H
	DW	09H
	DW	0fH
	DW	09H
	DW	010fH
	DW	09H
	DW	08fH
	DW	09H
	DW	018fH
	DW	09H
	DW	04fH
	DW	09H
	DW	014fH
	DW	09H
	DW	0cfH
	DW	09H
	DW	01cfH
	DW	09H
	DW	02fH
	DW	09H
	DW	012fH
	DW	09H
	DW	0afH
	DW	09H
	DW	01afH
	DW	09H
	DW	06fH
	DW	09H
	DW	016fH
	DW	09H
	DW	0efH
	DW	09H
	DW	01efH
	DW	09H
	DW	01fH
	DW	09H
	DW	011fH
	DW	09H
	DW	09fH
	DW	09H
	DW	019fH
	DW	09H
	DW	05fH
	DW	09H
	DW	015fH
	DW	09H
	DW	0dfH
	DW	09H
	DW	01dfH
	DW	09H
	DW	03fH
	DW	09H
	DW	013fH
	DW	09H
	DW	0bfH
	DW	09H
	DW	01bfH
	DW	09H
	DW	07fH
	DW	09H
	DW	017fH
	DW	09H
	DW	0ffH
	DW	09H
	DW	01ffH
	DW	09H
	DW	00H
	DW	07H
	DW	040H
	DW	07H
	DW	020H
	DW	07H
	DW	060H
	DW	07H
	DW	010H
	DW	07H
	DW	050H
	DW	07H
	DW	030H
	DW	07H
	DW	070H
	DW	07H
	DW	08H
	DW	07H
	DW	048H
	DW	07H
	DW	028H
	DW	07H
	DW	068H
	DW	07H
	DW	018H
	DW	07H
	DW	058H
	DW	07H
	DW	038H
	DW	07H
	DW	078H
	DW	07H
	DW	04H
	DW	07H
	DW	044H
	DW	07H
	DW	024H
	DW	07H
	DW	064H
	DW	07H
	DW	014H
	DW	07H
	DW	054H
	DW	07H
	DW	034H
	DW	07H
	DW	074H
	DW	07H
	DW	03H
	DW	08H
	DW	083H
	DW	08H
	DW	043H
	DW	08H
	DW	0c3H
	DW	08H
	DW	023H
	DW	08H
	DW	0a3H
	DW	08H
	DW	063H
	DW	08H
	DW	0e3H
	DW	08H
_static_dtree DW 00H
	DW	05H
	DW	010H
	DW	05H
	DW	08H
	DW	05H
	DW	018H
	DW	05H
	DW	04H
	DW	05H
	DW	014H
	DW	05H
	DW	0cH
	DW	05H
	DW	01cH
	DW	05H
	DW	02H
	DW	05H
	DW	012H
	DW	05H
	DW	0aH
	DW	05H
	DW	01aH
	DW	05H
	DW	06H
	DW	05H
	DW	016H
	DW	05H
	DW	0eH
	DW	05H
	DW	01eH
	DW	05H
	DW	01H
	DW	05H
	DW	011H
	DW	05H
	DW	09H
	DW	05H
	DW	019H
	DW	05H
	DW	05H
	DW	05H
	DW	015H
	DW	05H
	DW	0dH
	DW	05H
	DW	01dH
	DW	05H
	DW	03H
	DW	05H
	DW	013H
	DW	05H
	DW	0bH
	DW	05H
	DW	01bH
	DW	05H
	DW	07H
	DW	05H
	DW	017H
	DW	05H
__dist_code DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	00H
	DB	00H
	DB	010H
	DB	011H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01cH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
	DB	01dH
__length_code DB 00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0dH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0eH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	0fH
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	010H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	011H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	012H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	013H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	014H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	015H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	017H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	018H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	019H
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01aH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01bH
	DB	01cH
_base_length DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	0aH
	DD	0cH
	DD	0eH
	DD	010H
	DD	014H
	DD	018H
	DD	01cH
	DD	020H
	DD	028H
	DD	030H
	DD	038H
	DD	040H
	DD	050H
	DD	060H
	DD	070H
	DD	080H
	DD	0a0H
	DD	0c0H
	DD	0e0H
	DD	00H
	ORG $+4
_base_dist DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	06H
	DD	08H
	DD	0cH
	DD	010H
	DD	018H
	DD	020H
	DD	030H
	DD	040H
	DD	060H
	DD	080H
	DD	0c0H
	DD	0100H
	DD	0180H
	DD	0200H
	DD	0300H
	DD	0400H
	DD	0600H
	DD	0800H
	DD	0c00H
	DD	01000H
	DD	01800H
	DD	02000H
	DD	03000H
	DD	04000H
	DD	06000H
; Function compile flags: /Odtp
; File d:\lp_solve_5.5\xli\xli_zimpl\ziboptvs10\thirdparty\zlib\trees.c
;	COMDAT _bi_windup
_TEXT	SEGMENT
_s$ = 8							; size = 4
_bi_windup PROC						; COMDAT

; 1205 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1206 :     if (s->bi_valid > 8) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00006	83 b8 bc 16 00
	00 08		 cmp	 DWORD PTR [eax+5820], 8
  0000d	7e 5b		 jle	 SHORT $LN3@bi_windup

; 1207 :         put_short(s, s->bi_buf);

  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00012	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00019	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0001f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00022	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00025	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00028	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0002b	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00031	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00034	83 c2 01	 add	 edx, 1
  00037	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0003a	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00040	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00047	c1 fa 08	 sar	 edx, 8
  0004a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0004d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00050	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00053	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00056	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00059	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0005c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0005f	83 c2 01	 add	 edx, 1
  00062	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00065	89 50 14	 mov	 DWORD PTR [eax+20], edx
  00068	eb 33		 jmp	 SHORT $LN2@bi_windup
$LN3@bi_windup:

; 1208 :     } else if (s->bi_valid > 0) {

  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0006d	83 b9 bc 16 00
	00 00		 cmp	 DWORD PTR [ecx+5820], 0
  00074	7e 27		 jle	 SHORT $LN2@bi_windup

; 1209 :         put_byte(s, (Byte)s->bi_buf);

  00076	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00079	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0007f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00082	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00085	8a 89 b8 16 00
	00		 mov	 cl, BYTE PTR [ecx+5816]
  0008b	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  0008e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00091	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00094	83 c0 01	 add	 eax, 1
  00097	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0009a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
$LN2@bi_windup:

; 1210 :     }
; 1211 :     s->bi_buf = 0;

  0009d	33 d2		 xor	 edx, edx
  0009f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000a2	66 89 90 b8 16
	00 00		 mov	 WORD PTR [eax+5816], dx

; 1212 :     s->bi_valid = 0;

  000a9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000ac	c7 81 bc 16 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+5820], 0

; 1213 : #ifdef DEBUG
; 1214 :     s->bits_sent = (s->bits_sent+7) & ~7;
; 1215 : #endif
; 1216 : }

  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
_bi_windup ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _bi_flush
_TEXT	SEGMENT
_s$ = 8							; size = 4
_bi_flush PROC						; COMDAT

; 1188 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1189 :     if (s->bi_valid == 16) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00006	83 b8 bc 16 00
	00 10		 cmp	 DWORD PTR [eax+5820], 16 ; 00000010H
  0000d	75 74		 jne	 SHORT $LN3@bi_flush

; 1190 :         put_short(s, s->bi_buf);

  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00012	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00019	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0001f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00022	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00025	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00028	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0002b	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00031	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00034	83 c2 01	 add	 edx, 1
  00037	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0003a	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00040	0f b7 91 b8 16
	00 00		 movzx	 edx, WORD PTR [ecx+5816]
  00047	c1 fa 08	 sar	 edx, 8
  0004a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0004d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00050	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00053	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00056	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00059	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0005c	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0005f	83 c2 01	 add	 edx, 1
  00062	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00065	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1191 :         s->bi_buf = 0;

  00068	33 c9		 xor	 ecx, ecx
  0006a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0006d	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx

; 1192 :         s->bi_valid = 0;

  00074	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00077	c7 80 bc 16 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+5820], 0
  00081	eb 60		 jmp	 SHORT $LN4@bi_flush
$LN3@bi_flush:

; 1193 :     } else if (s->bi_valid >= 8) {

  00083	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00086	83 b9 bc 16 00
	00 08		 cmp	 DWORD PTR [ecx+5820], 8
  0008d	7c 54		 jl	 SHORT $LN4@bi_flush

; 1194 :         put_byte(s, (Byte)s->bi_buf);

  0008f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00092	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00095	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00098	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0009e	8a 89 b8 16 00
	00		 mov	 cl, BYTE PTR [ecx+5816]
  000a4	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  000a7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000aa	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000ad	83 c0 01	 add	 eax, 1
  000b0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000b3	89 41 14	 mov	 DWORD PTR [ecx+20], eax

; 1195 :         s->bi_buf >>= 8;

  000b6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000b9	66 8b 82 b8 16
	00 00		 mov	 ax, WORD PTR [edx+5816]
  000c0	66 c1 e8 08	 shr	 ax, 8
  000c4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000c7	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax

; 1196 :         s->bi_valid -= 8;

  000ce	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000d1	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  000d7	83 e8 08	 sub	 eax, 8
  000da	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000dd	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN4@bi_flush:

; 1197 :     }
; 1198 : }

  000e3	5d		 pop	 ebp
  000e4	c3		 ret	 0
_bi_flush ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _bi_reverse
_TEXT	SEGMENT
_res$ = -4						; size = 4
_code$ = 8						; size = 4
_len$ = 12						; size = 4
_bi_reverse PROC					; COMDAT

; 1174 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1175 :     register unsigned res = 0;

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _res$[ebp], 0
$LN3@bi_reverse:

; 1176 :     do {
; 1177 :         res |= code & 1;

  0000b	8b 45 08	 mov	 eax, DWORD PTR _code$[ebp]
  0000e	83 e0 01	 and	 eax, 1
  00011	0b 45 fc	 or	 eax, DWORD PTR _res$[ebp]
  00014	89 45 fc	 mov	 DWORD PTR _res$[ebp], eax

; 1178 :         code >>= 1, res <<= 1;

  00017	8b 4d 08	 mov	 ecx, DWORD PTR _code$[ebp]
  0001a	d1 e9		 shr	 ecx, 1
  0001c	89 4d 08	 mov	 DWORD PTR _code$[ebp], ecx
  0001f	8b 55 fc	 mov	 edx, DWORD PTR _res$[ebp]
  00022	d1 e2		 shl	 edx, 1
  00024	89 55 fc	 mov	 DWORD PTR _res$[ebp], edx

; 1179 :     } while (--len > 0);

  00027	8b 45 0c	 mov	 eax, DWORD PTR _len$[ebp]
  0002a	83 e8 01	 sub	 eax, 1
  0002d	89 45 0c	 mov	 DWORD PTR _len$[ebp], eax
  00030	83 7d 0c 00	 cmp	 DWORD PTR _len$[ebp], 0
  00034	7f d5		 jg	 SHORT $LN3@bi_reverse

; 1180 :     return res >> 1;

  00036	8b 45 fc	 mov	 eax, DWORD PTR _res$[ebp]
  00039	d1 e8		 shr	 eax, 1

; 1181 : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
_bi_reverse ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _detect_data_type
_TEXT	SEGMENT
_black_mask$ = -8					; size = 4
_n$ = -4						; size = 4
_s$ = 8							; size = 4
_detect_data_type PROC					; COMDAT

; 1139 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1140 :     /* black_mask is the bit mask of black-listed bytes
; 1141 :      * set bits 0..6, 14..25, and 28..31
; 1142 :      * 0xf3ffc07f = binary 11110011111111111100000001111111
; 1143 :      */
; 1144 :     unsigned long black_mask = 0xf3ffc07fUL;

  00006	c7 45 f8 7f c0
	ff f3		 mov	 DWORD PTR _black_mask$[ebp], -201342849 ; f3ffc07fH

; 1145 :     int n;
; 1146 : 
; 1147 :     /* Check for non-textual ("black-listed") bytes. */
; 1148 :     for (n = 0; n <= 31; n++, black_mask >>= 1)

  0000d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00014	eb 11		 jmp	 SHORT $LN10@detect_dat
$LN9@detect_dat:
  00016	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00019	83 c0 01	 add	 eax, 1
  0001c	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR _black_mask$[ebp]
  00022	d1 e9		 shr	 ecx, 1
  00024	89 4d f8	 mov	 DWORD PTR _black_mask$[ebp], ecx
$LN10@detect_dat:
  00027	83 7d fc 1f	 cmp	 DWORD PTR _n$[ebp], 31	; 0000001fH
  0002b	7f 20		 jg	 SHORT $LN8@detect_dat

; 1149 :         if ((black_mask & 1) && (s->dyn_ltree[n].Freq != 0))

  0002d	8b 55 f8	 mov	 edx, DWORD PTR _black_mask$[ebp]
  00030	83 e2 01	 and	 edx, 1
  00033	74 16		 je	 SHORT $LN7@detect_dat
  00035	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00038	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0003b	0f b7 94 81 94
	00 00 00	 movzx	 edx, WORD PTR [ecx+eax*4+148]
  00043	85 d2		 test	 edx, edx
  00045	74 04		 je	 SHORT $LN7@detect_dat

; 1150 :             return Z_BINARY;

  00047	33 c0		 xor	 eax, eax
  00049	eb 6b		 jmp	 SHORT $LN11@detect_dat
$LN7@detect_dat:

; 1151 : 
; 1152 :     /* Check for textual ("white-listed") bytes. */
; 1153 :     if (s->dyn_ltree[9].Freq != 0 || s->dyn_ltree[10].Freq != 0

  0004b	eb c9		 jmp	 SHORT $LN9@detect_dat
$LN8@detect_dat:

; 1154 :             || s->dyn_ltree[13].Freq != 0)

  0004d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00050	0f b7 88 b8 00
	00 00		 movzx	 ecx, WORD PTR [eax+184]
  00057	85 c9		 test	 ecx, ecx
  00059	75 1c		 jne	 SHORT $LN5@detect_dat
  0005b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0005e	0f b7 82 bc 00
	00 00		 movzx	 eax, WORD PTR [edx+188]
  00065	85 c0		 test	 eax, eax
  00067	75 0e		 jne	 SHORT $LN5@detect_dat
  00069	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0006c	0f b7 91 c8 00
	00 00		 movzx	 edx, WORD PTR [ecx+200]
  00073	85 d2		 test	 edx, edx
  00075	74 07		 je	 SHORT $LN6@detect_dat
$LN5@detect_dat:

; 1155 :         return Z_TEXT;

  00077	b8 01 00 00 00	 mov	 eax, 1
  0007c	eb 38		 jmp	 SHORT $LN11@detect_dat
$LN6@detect_dat:

; 1156 :     for (n = 32; n < LITERALS; n++)

  0007e	c7 45 fc 20 00
	00 00		 mov	 DWORD PTR _n$[ebp], 32	; 00000020H
  00085	eb 09		 jmp	 SHORT $LN4@detect_dat
$LN3@detect_dat:
  00087	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  0008a	83 c0 01	 add	 eax, 1
  0008d	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
$LN4@detect_dat:
  00090	81 7d fc 00 01
	00 00		 cmp	 DWORD PTR _n$[ebp], 256	; 00000100H
  00097	7d 1b		 jge	 SHORT $LN2@detect_dat

; 1157 :         if (s->dyn_ltree[n].Freq != 0)

  00099	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  0009c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0009f	0f b7 84 8a 94
	00 00 00	 movzx	 eax, WORD PTR [edx+ecx*4+148]
  000a7	85 c0		 test	 eax, eax
  000a9	74 07		 je	 SHORT $LN1@detect_dat

; 1158 :             return Z_TEXT;

  000ab	b8 01 00 00 00	 mov	 eax, 1
  000b0	eb 04		 jmp	 SHORT $LN11@detect_dat
$LN1@detect_dat:

; 1159 : 
; 1160 :     /* There are no "black-listed" or "white-listed" bytes:
; 1161 :      * this stream either is empty or has tolerated ("gray-listed") bytes only.
; 1162 :      */
; 1163 :     return Z_BINARY;

  000b2	eb d3		 jmp	 SHORT $LN3@detect_dat
$LN2@detect_dat:
  000b4	33 c0		 xor	 eax, eax
$LN11@detect_dat:

; 1164 : }

  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c3		 ret	 0
_detect_data_type ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _compress_block
_TEXT	SEGMENT
tv303 = -72						; size = 4
_val$78281 = -68					; size = 4
_len$78277 = -64					; size = 4
_val$78267 = -60					; size = 4
_len$78263 = -56					; size = 4
_val$78252 = -52					; size = 4
_len$78248 = -48					; size = 4
_val$78238 = -44					; size = 4
_len$78234 = -40					; size = 4
_val$78223 = -36					; size = 4
_len$78219 = -32					; size = 4
_val$78208 = -28					; size = 4
_len$78204 = -24					; size = 4
_dist$ = -20						; size = 4
_lc$ = -16						; size = 4
_lx$ = -12						; size = 4
_code$ = -8						; size = 4
_extra$ = -4						; size = 4
_s$ = 8							; size = 4
_ltree$ = 12						; size = 4
_dtree$ = 16						; size = 4
_compress_block PROC					; COMDAT

; 1080 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H

; 1081 :     unsigned dist;      /* distance of matched string */
; 1082 :     int lc;             /* match length or unmatched char (if dist == 0) */
; 1083 :     unsigned lx = 0;    /* running index in l_buf */

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _lx$[ebp], 0

; 1084 :     unsigned code;      /* the code to send */
; 1085 :     int extra;          /* number of extra bits to send */
; 1086 : 
; 1087 :     if (s->last_lit != 0) do {

  0000d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00010	83 b8 a0 16 00
	00 00		 cmp	 DWORD PTR [eax+5792], 0
  00017	0f 84 8e 06 00
	00		 je	 $LN20@compress_b
$LN19@compress_b:

; 1088 :         dist = s->d_buf[lx];

  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00020	8b 91 a4 16 00
	00		 mov	 edx, DWORD PTR [ecx+5796]
  00026	8b 45 f4	 mov	 eax, DWORD PTR _lx$[ebp]
  00029	0f b7 0c 42	 movzx	 ecx, WORD PTR [edx+eax*2]
  0002d	89 4d ec	 mov	 DWORD PTR _dist$[ebp], ecx

; 1089 :         lc = s->l_buf[lx++];

  00030	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00033	8b 82 98 16 00
	00		 mov	 eax, DWORD PTR [edx+5784]
  00039	8b 4d f4	 mov	 ecx, DWORD PTR _lx$[ebp]
  0003c	0f b6 14 08	 movzx	 edx, BYTE PTR [eax+ecx]
  00040	89 55 f0	 mov	 DWORD PTR _lc$[ebp], edx
  00043	8b 45 f4	 mov	 eax, DWORD PTR _lx$[ebp]
  00046	83 c0 01	 add	 eax, 1
  00049	89 45 f4	 mov	 DWORD PTR _lx$[ebp], eax

; 1090 :         if (dist == 0) {

  0004c	83 7d ec 00	 cmp	 DWORD PTR _dist$[ebp], 0
  00050	0f 85 30 01 00
	00		 jne	 $LN16@compress_b

; 1091 :             send_code(s, lc, ltree); /* send a literal byte */

  00056	8b 4d f0	 mov	 ecx, DWORD PTR _lc$[ebp]
  00059	8b 55 0c	 mov	 edx, DWORD PTR _ltree$[ebp]
  0005c	0f b7 44 8a 02	 movzx	 eax, WORD PTR [edx+ecx*4+2]
  00061	89 45 e8	 mov	 DWORD PTR _len$78204[ebp], eax
  00064	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00069	2b 4d e8	 sub	 ecx, DWORD PTR _len$78204[ebp]
  0006c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0006f	39 8a bc 16 00
	00		 cmp	 DWORD PTR [edx+5820], ecx
  00075	0f 8e c6 00 00
	00		 jle	 $LN15@compress_b
  0007b	8b 45 f0	 mov	 eax, DWORD PTR _lc$[ebp]
  0007e	8b 4d 0c	 mov	 ecx, DWORD PTR _ltree$[ebp]
  00081	0f b7 14 81	 movzx	 edx, WORD PTR [ecx+eax*4]
  00085	89 55 e4	 mov	 DWORD PTR _val$78208[ebp], edx
  00088	0f b7 45 e4	 movzx	 eax, WORD PTR _val$78208[ebp]
  0008c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0008f	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  00095	d3 e0		 shl	 eax, cl
  00097	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0009a	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  000a1	0b c8		 or	 ecx, eax
  000a3	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000a6	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  000ad	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000b0	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  000b7	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  000bd	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000c0	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000c3	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000c6	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  000c9	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  000cc	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000cf	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000d2	83 c1 01	 add	 ecx, 1
  000d5	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000d8	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  000db	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000de	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  000e5	c1 f9 08	 sar	 ecx, 8
  000e8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000eb	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000ee	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000f1	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  000f4	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  000f7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000fa	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000fd	83 c1 01	 add	 ecx, 1
  00100	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00103	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  00106	0f b7 45 e4	 movzx	 eax, WORD PTR _val$78208[ebp]
  0010a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0010d	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00112	2b 91 bc 16 00
	00		 sub	 edx, DWORD PTR [ecx+5820]
  00118	8b ca		 mov	 ecx, edx
  0011a	d3 f8		 sar	 eax, cl
  0011c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0011f	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00126	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00129	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0012f	8b 4d e8	 mov	 ecx, DWORD PTR _len$78204[ebp]
  00132	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00136	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00139	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0013f	eb 40		 jmp	 SHORT $LN14@compress_b
$LN15@compress_b:
  00141	8b 4d f0	 mov	 ecx, DWORD PTR _lc$[ebp]
  00144	8b 55 0c	 mov	 edx, DWORD PTR _ltree$[ebp]
  00147	0f b7 04 8a	 movzx	 eax, WORD PTR [edx+ecx*4]
  0014b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0014e	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  00154	d3 e0		 shl	 eax, cl
  00156	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00159	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  00160	0b c8		 or	 ecx, eax
  00162	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00165	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  0016c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0016f	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00175	03 4d e8	 add	 ecx, DWORD PTR _len$78204[ebp]
  00178	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0017b	89 8a bc 16 00
	00		 mov	 DWORD PTR [edx+5820], ecx
$LN14@compress_b:

; 1092 :             Tracecv(isgraph(lc), (stderr," '%c' ", lc));
; 1093 :         } else {

  00181	e9 13 05 00 00	 jmp	 $LN18@compress_b
$LN16@compress_b:

; 1094 :             /* Here, lc is the match length - MIN_MATCH */
; 1095 :             code = _length_code[lc];

  00186	8b 45 f0	 mov	 eax, DWORD PTR _lc$[ebp]
  00189	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR __length_code[eax]
  00190	89 4d f8	 mov	 DWORD PTR _code$[ebp], ecx

; 1096 :             send_code(s, code+LITERALS+1, ltree); /* send the length code */

  00193	8b 55 f8	 mov	 edx, DWORD PTR _code$[ebp]
  00196	8b 45 0c	 mov	 eax, DWORD PTR _ltree$[ebp]
  00199	0f b7 8c 90 06
	04 00 00	 movzx	 ecx, WORD PTR [eax+edx*4+1030]
  001a1	89 4d e0	 mov	 DWORD PTR _len$78219[ebp], ecx
  001a4	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  001a9	2b 55 e0	 sub	 edx, DWORD PTR _len$78219[ebp]
  001ac	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001af	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  001b5	0f 8e c7 00 00
	00		 jle	 $LN12@compress_b
  001bb	8b 4d f8	 mov	 ecx, DWORD PTR _code$[ebp]
  001be	8b 55 0c	 mov	 edx, DWORD PTR _ltree$[ebp]
  001c1	0f b7 84 8a 04
	04 00 00	 movzx	 eax, WORD PTR [edx+ecx*4+1028]
  001c9	89 45 dc	 mov	 DWORD PTR _val$78223[ebp], eax
  001cc	0f b7 55 dc	 movzx	 edx, WORD PTR _val$78223[ebp]
  001d0	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001d3	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  001d9	d3 e2		 shl	 edx, cl
  001db	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001de	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  001e5	0b c2		 or	 eax, edx
  001e7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001ea	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  001f1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001f4	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  001fb	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00200	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00203	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00206	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00209	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0020c	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0020f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00212	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00215	83 c0 01	 add	 eax, 1
  00218	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0021b	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0021e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00221	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00228	c1 f8 08	 sar	 eax, 8
  0022b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0022e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00231	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00234	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00237	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0023a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0023d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00240	83 c0 01	 add	 eax, 1
  00243	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00246	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00249	0f b7 55 dc	 movzx	 edx, WORD PTR _val$78223[ebp]
  0024d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00250	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00255	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  0025b	d3 fa		 sar	 edx, cl
  0025d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00260	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00267	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0026a	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00270	8b 4d e0	 mov	 ecx, DWORD PTR _len$78219[ebp]
  00273	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00277	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0027a	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  00280	eb 44		 jmp	 SHORT $LN11@compress_b
$LN12@compress_b:
  00282	8b 4d f8	 mov	 ecx, DWORD PTR _code$[ebp]
  00285	8b 55 0c	 mov	 edx, DWORD PTR _ltree$[ebp]
  00288	0f b7 84 8a 04
	04 00 00	 movzx	 eax, WORD PTR [edx+ecx*4+1028]
  00290	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00293	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  00299	d3 e0		 shl	 eax, cl
  0029b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0029e	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  002a5	0b c8		 or	 ecx, eax
  002a7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002aa	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  002b1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002b4	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  002ba	03 4d e0	 add	 ecx, DWORD PTR _len$78219[ebp]
  002bd	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002c0	89 8a bc 16 00
	00		 mov	 DWORD PTR [edx+5820], ecx
$LN11@compress_b:

; 1097 :             extra = extra_lbits[code];

  002c6	8b 45 f8	 mov	 eax, DWORD PTR _code$[ebp]
  002c9	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _extra_lbits[eax*4]
  002d0	89 4d fc	 mov	 DWORD PTR _extra$[ebp], ecx

; 1098 :             if (extra != 0) {

  002d3	83 7d fc 00	 cmp	 DWORD PTR _extra$[ebp], 0
  002d7	0f 84 23 01 00
	00		 je	 $LN10@compress_b

; 1099 :                 lc -= base_length[code];

  002dd	8b 55 f8	 mov	 edx, DWORD PTR _code$[ebp]
  002e0	8b 45 f0	 mov	 eax, DWORD PTR _lc$[ebp]
  002e3	2b 04 95 00 00
	00 00		 sub	 eax, DWORD PTR _base_length[edx*4]
  002ea	89 45 f0	 mov	 DWORD PTR _lc$[ebp], eax

; 1100 :                 send_bits(s, lc, extra);       /* send the extra length bits */

  002ed	8b 4d fc	 mov	 ecx, DWORD PTR _extra$[ebp]
  002f0	89 4d d8	 mov	 DWORD PTR _len$78234[ebp], ecx
  002f3	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  002f8	2b 55 d8	 sub	 edx, DWORD PTR _len$78234[ebp]
  002fb	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002fe	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  00304	0f 8e bc 00 00
	00		 jle	 $LN9@compress_b
  0030a	8b 4d f0	 mov	 ecx, DWORD PTR _lc$[ebp]
  0030d	89 4d d4	 mov	 DWORD PTR _val$78238[ebp], ecx
  00310	0f b7 55 d4	 movzx	 edx, WORD PTR _val$78238[ebp]
  00314	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00317	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0031d	d3 e2		 shl	 edx, cl
  0031f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00322	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00329	0b c2		 or	 eax, edx
  0032b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0032e	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00335	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00338	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  0033f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00344	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00347	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0034a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0034d	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00350	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00353	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00356	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00359	83 c0 01	 add	 eax, 1
  0035c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0035f	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00362	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00365	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  0036c	c1 f8 08	 sar	 eax, 8
  0036f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00372	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00375	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00378	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0037b	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0037e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00381	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00384	83 c0 01	 add	 eax, 1
  00387	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0038a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0038d	0f b7 55 d4	 movzx	 edx, WORD PTR _val$78238[ebp]
  00391	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00394	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00399	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  0039f	d3 fa		 sar	 edx, cl
  003a1	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003a4	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  003ab	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003ae	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  003b4	8b 4d d8	 mov	 ecx, DWORD PTR _len$78234[ebp]
  003b7	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  003bb	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003be	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  003c4	eb 3a		 jmp	 SHORT $LN10@compress_b
$LN9@compress_b:
  003c6	0f b7 55 f0	 movzx	 edx, WORD PTR _lc$[ebp]
  003ca	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003cd	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  003d3	d3 e2		 shl	 edx, cl
  003d5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003d8	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  003df	0b c2		 or	 eax, edx
  003e1	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003e4	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  003eb	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003ee	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  003f4	03 45 d8	 add	 eax, DWORD PTR _len$78234[ebp]
  003f7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003fa	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN10@compress_b:

; 1101 :             }
; 1102 :             dist--; /* dist is now the match distance - 1 */

  00400	8b 55 ec	 mov	 edx, DWORD PTR _dist$[ebp]
  00403	83 ea 01	 sub	 edx, 1
  00406	89 55 ec	 mov	 DWORD PTR _dist$[ebp], edx

; 1103 :             code = d_code(dist);

  00409	81 7d ec 00 01
	00 00		 cmp	 DWORD PTR _dist$[ebp], 256 ; 00000100H
  00410	73 0f		 jae	 SHORT $LN23@compress_b
  00412	8b 45 ec	 mov	 eax, DWORD PTR _dist$[ebp]
  00415	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR __dist_code[eax]
  0041c	89 4d b8	 mov	 DWORD PTR tv303[ebp], ecx
  0041f	eb 10		 jmp	 SHORT $LN24@compress_b
$LN23@compress_b:
  00421	8b 55 ec	 mov	 edx, DWORD PTR _dist$[ebp]
  00424	c1 ea 07	 shr	 edx, 7
  00427	0f b6 82 00 01
	00 00		 movzx	 eax, BYTE PTR __dist_code[edx+256]
  0042e	89 45 b8	 mov	 DWORD PTR tv303[ebp], eax
$LN24@compress_b:
  00431	8b 4d b8	 mov	 ecx, DWORD PTR tv303[ebp]
  00434	89 4d f8	 mov	 DWORD PTR _code$[ebp], ecx

; 1104 :             Assert (code < D_CODES, "bad d_code");
; 1105 : 
; 1106 :             send_code(s, code, dtree);       /* send the distance code */

  00437	8b 55 f8	 mov	 edx, DWORD PTR _code$[ebp]
  0043a	8b 45 10	 mov	 eax, DWORD PTR _dtree$[ebp]
  0043d	0f b7 4c 90 02	 movzx	 ecx, WORD PTR [eax+edx*4+2]
  00442	89 4d d0	 mov	 DWORD PTR _len$78248[ebp], ecx
  00445	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0044a	2b 55 d0	 sub	 edx, DWORD PTR _len$78248[ebp]
  0044d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00450	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  00456	0f 8e c3 00 00
	00		 jle	 $LN7@compress_b
  0045c	8b 4d f8	 mov	 ecx, DWORD PTR _code$[ebp]
  0045f	8b 55 10	 mov	 edx, DWORD PTR _dtree$[ebp]
  00462	0f b7 04 8a	 movzx	 eax, WORD PTR [edx+ecx*4]
  00466	89 45 cc	 mov	 DWORD PTR _val$78252[ebp], eax
  00469	0f b7 55 cc	 movzx	 edx, WORD PTR _val$78252[ebp]
  0046d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00470	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00476	d3 e2		 shl	 edx, cl
  00478	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0047b	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00482	0b c2		 or	 eax, edx
  00484	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00487	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  0048e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00491	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00498	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0049d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004a0	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  004a3	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004a6	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  004a9	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  004ac	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004af	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  004b2	83 c0 01	 add	 eax, 1
  004b5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004b8	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  004bb	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004be	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  004c5	c1 f8 08	 sar	 eax, 8
  004c8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004cb	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  004ce	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004d1	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  004d4	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  004d7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004da	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  004dd	83 c0 01	 add	 eax, 1
  004e0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004e3	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  004e6	0f b7 55 cc	 movzx	 edx, WORD PTR _val$78252[ebp]
  004ea	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004ed	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  004f2	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  004f8	d3 fa		 sar	 edx, cl
  004fa	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004fd	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00504	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00507	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0050d	8b 4d d0	 mov	 ecx, DWORD PTR _len$78248[ebp]
  00510	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00514	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00517	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0051d	eb 40		 jmp	 SHORT $LN6@compress_b
$LN7@compress_b:
  0051f	8b 4d f8	 mov	 ecx, DWORD PTR _code$[ebp]
  00522	8b 55 10	 mov	 edx, DWORD PTR _dtree$[ebp]
  00525	0f b7 04 8a	 movzx	 eax, WORD PTR [edx+ecx*4]
  00529	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0052c	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  00532	d3 e0		 shl	 eax, cl
  00534	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00537	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  0053e	0b c8		 or	 ecx, eax
  00540	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00543	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  0054a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0054d	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00553	03 4d d0	 add	 ecx, DWORD PTR _len$78248[ebp]
  00556	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00559	89 8a bc 16 00
	00		 mov	 DWORD PTR [edx+5820], ecx
$LN6@compress_b:

; 1107 :             extra = extra_dbits[code];

  0055f	8b 45 f8	 mov	 eax, DWORD PTR _code$[ebp]
  00562	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR _extra_dbits[eax*4]
  00569	89 4d fc	 mov	 DWORD PTR _extra$[ebp], ecx

; 1108 :             if (extra != 0) {

  0056c	83 7d fc 00	 cmp	 DWORD PTR _extra$[ebp], 0
  00570	0f 84 23 01 00
	00		 je	 $LN18@compress_b

; 1109 :                 dist -= base_dist[code];

  00576	8b 55 f8	 mov	 edx, DWORD PTR _code$[ebp]
  00579	8b 45 ec	 mov	 eax, DWORD PTR _dist$[ebp]
  0057c	2b 04 95 00 00
	00 00		 sub	 eax, DWORD PTR _base_dist[edx*4]
  00583	89 45 ec	 mov	 DWORD PTR _dist$[ebp], eax

; 1110 :                 send_bits(s, dist, extra);   /* send the extra distance bits */

  00586	8b 4d fc	 mov	 ecx, DWORD PTR _extra$[ebp]
  00589	89 4d c8	 mov	 DWORD PTR _len$78263[ebp], ecx
  0058c	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00591	2b 55 c8	 sub	 edx, DWORD PTR _len$78263[ebp]
  00594	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00597	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  0059d	0f 8e bc 00 00
	00		 jle	 $LN4@compress_b
  005a3	8b 4d ec	 mov	 ecx, DWORD PTR _dist$[ebp]
  005a6	89 4d c4	 mov	 DWORD PTR _val$78267[ebp], ecx
  005a9	0f b7 55 c4	 movzx	 edx, WORD PTR _val$78267[ebp]
  005ad	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005b0	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  005b6	d3 e2		 shl	 edx, cl
  005b8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005bb	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  005c2	0b c2		 or	 eax, edx
  005c4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005c7	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  005ce	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005d1	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  005d8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  005dd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005e0	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  005e3	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005e6	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  005e9	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  005ec	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005ef	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  005f2	83 c0 01	 add	 eax, 1
  005f5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005f8	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  005fb	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005fe	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00605	c1 f8 08	 sar	 eax, 8
  00608	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0060b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0060e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00611	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00614	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00617	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0061a	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0061d	83 c0 01	 add	 eax, 1
  00620	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00623	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00626	0f b7 55 c4	 movzx	 edx, WORD PTR _val$78267[ebp]
  0062a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0062d	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00632	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  00638	d3 fa		 sar	 edx, cl
  0063a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0063d	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00644	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00647	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0064d	8b 4d c8	 mov	 ecx, DWORD PTR _len$78263[ebp]
  00650	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00654	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00657	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0065d	eb 3a		 jmp	 SHORT $LN18@compress_b
$LN4@compress_b:
  0065f	0f b7 55 ec	 movzx	 edx, WORD PTR _dist$[ebp]
  00663	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00666	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0066c	d3 e2		 shl	 edx, cl
  0066e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00671	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00678	0b c2		 or	 eax, edx
  0067a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0067d	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00684	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00687	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0068d	03 45 c8	 add	 eax, DWORD PTR _len$78263[ebp]
  00690	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00693	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN18@compress_b:

; 1111 :             }
; 1112 :         } /* literal or match pair ? */
; 1113 : 
; 1114 :         /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
; 1115 :         Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
; 1116 :                "pendingBuf overflow");
; 1117 : 
; 1118 :     } while (lx < s->last_lit);

  00699	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0069c	8b 45 f4	 mov	 eax, DWORD PTR _lx$[ebp]
  0069f	3b 82 a0 16 00
	00		 cmp	 eax, DWORD PTR [edx+5792]
  006a5	0f 82 72 f9 ff
	ff		 jb	 $LN19@compress_b
$LN20@compress_b:

; 1119 : 
; 1120 :     send_code(s, END_BLOCK, ltree);

  006ab	8b 4d 0c	 mov	 ecx, DWORD PTR _ltree$[ebp]
  006ae	0f b7 91 02 04
	00 00		 movzx	 edx, WORD PTR [ecx+1026]
  006b5	89 55 c0	 mov	 DWORD PTR _len$78277[ebp], edx
  006b8	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  006bd	2b 45 c0	 sub	 eax, DWORD PTR _len$78277[ebp]
  006c0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  006c3	39 81 bc 16 00
	00		 cmp	 DWORD PTR [ecx+5820], eax
  006c9	0f 8e c3 00 00
	00		 jle	 $LN2@compress_b
  006cf	8b 55 0c	 mov	 edx, DWORD PTR _ltree$[ebp]
  006d2	0f b7 82 00 04
	00 00		 movzx	 eax, WORD PTR [edx+1024]
  006d9	89 45 bc	 mov	 DWORD PTR _val$78281[ebp], eax
  006dc	0f b7 55 bc	 movzx	 edx, WORD PTR _val$78281[ebp]
  006e0	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  006e3	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  006e9	d3 e2		 shl	 edx, cl
  006eb	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  006ee	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  006f5	0b c2		 or	 eax, edx
  006f7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  006fa	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00701	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00704	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  0070b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00710	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00713	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00716	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00719	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0071c	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0071f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00722	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00725	83 c0 01	 add	 eax, 1
  00728	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0072b	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0072e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00731	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00738	c1 f8 08	 sar	 eax, 8
  0073b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0073e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00741	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00744	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00747	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0074a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0074d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00750	83 c0 01	 add	 eax, 1
  00753	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00756	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00759	0f b7 55 bc	 movzx	 edx, WORD PTR _val$78281[ebp]
  0075d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00760	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00765	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  0076b	d3 fa		 sar	 edx, cl
  0076d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00770	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00777	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0077a	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00780	8b 4d c0	 mov	 ecx, DWORD PTR _len$78277[ebp]
  00783	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00787	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0078a	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  00790	eb 40		 jmp	 SHORT $LN1@compress_b
$LN2@compress_b:
  00792	8b 4d 0c	 mov	 ecx, DWORD PTR _ltree$[ebp]
  00795	0f b7 91 00 04
	00 00		 movzx	 edx, WORD PTR [ecx+1024]
  0079c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0079f	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  007a5	d3 e2		 shl	 edx, cl
  007a7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  007aa	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  007b1	0b c2		 or	 eax, edx
  007b3	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  007b6	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  007bd	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  007c0	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  007c6	03 45 c0	 add	 eax, DWORD PTR _len$78277[ebp]
  007c9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  007cc	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN1@compress_b:

; 1121 :     s->last_eob_len = ltree[END_BLOCK].Len;

  007d2	8b 55 0c	 mov	 edx, DWORD PTR _ltree$[ebp]
  007d5	0f b7 82 02 04
	00 00		 movzx	 eax, WORD PTR [edx+1026]
  007dc	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  007df	89 81 b4 16 00
	00		 mov	 DWORD PTR [ecx+5812], eax

; 1122 : }

  007e5	8b e5		 mov	 esp, ebp
  007e7	5d		 pop	 ebp
  007e8	c3		 ret	 0
_compress_block ENDP
_TEXT	ENDS
PUBLIC	__tr_align
; Function compile flags: /Odtp
;	COMDAT __tr_align
_TEXT	SEGMENT
_val$78116 = -32					; size = 4
_len$78112 = -28					; size = 4
_val$78102 = -24					; size = 4
_len$78098 = -20					; size = 4
_val$78087 = -16					; size = 4
_len$78083 = -12					; size = 4
_val$78073 = -8						; size = 4
_len$78069 = -4						; size = 4
_s$ = 8							; size = 4
__tr_align PROC						; COMDAT

; 898  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H

; 899  :     send_bits(s, STATIC_TREES<<1, 3);

  00006	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _len$78069[ebp], 3
  0000d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00012	2b 45 fc	 sub	 eax, DWORD PTR _len$78069[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00018	39 81 bc 16 00
	00		 cmp	 DWORD PTR [ecx+5820], eax
  0001e	0f 8e bd 00 00
	00		 jle	 $LN9@tr_align
  00024	c7 45 f8 02 00
	00 00		 mov	 DWORD PTR _val$78073[ebp], 2
  0002b	0f b7 55 f8	 movzx	 edx, WORD PTR _val$78073[ebp]
  0002f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00032	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00038	d3 e2		 shl	 edx, cl
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0003d	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00044	0b c2		 or	 eax, edx
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00049	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00050	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00053	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  0005a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0005f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00062	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00065	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00068	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0006b	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0006e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00071	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00074	83 c0 01	 add	 eax, 1
  00077	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0007a	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0007d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00080	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00087	c1 f8 08	 sar	 eax, 8
  0008a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0008d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00090	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00093	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00096	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00099	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0009c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0009f	83 c0 01	 add	 eax, 1
  000a2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000a5	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  000a8	0f b7 55 f8	 movzx	 edx, WORD PTR _val$78073[ebp]
  000ac	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000af	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000b4	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  000ba	d3 fa		 sar	 edx, cl
  000bc	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000bf	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  000c6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000c9	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  000cf	8b 4d fc	 mov	 ecx, DWORD PTR _len$78069[ebp]
  000d2	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  000d6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000d9	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  000df	eb 3b		 jmp	 SHORT $LN8@tr_align
$LN9@tr_align:
  000e1	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000e4	ba 02 00 00 00	 mov	 edx, 2
  000e9	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  000ef	d3 e2		 shl	 edx, cl
  000f1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000f4	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  000fb	0b ca		 or	 ecx, edx
  000fd	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00100	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  00107	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0010a	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00110	03 4d fc	 add	 ecx, DWORD PTR _len$78069[ebp]
  00113	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00116	89 8a bc 16 00
	00		 mov	 DWORD PTR [edx+5820], ecx
$LN8@tr_align:

; 900  :     send_code(s, END_BLOCK, static_ltree);

  0011c	0f b7 05 02 04
	00 00		 movzx	 eax, WORD PTR _static_ltree+1026
  00123	89 45 f4	 mov	 DWORD PTR _len$78083[ebp], eax
  00126	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0012b	2b 4d f4	 sub	 ecx, DWORD PTR _len$78083[ebp]
  0012e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00131	39 8a bc 16 00
	00		 cmp	 DWORD PTR [edx+5820], ecx
  00137	0f 8e c0 00 00
	00		 jle	 $LN7@tr_align
  0013d	0f b7 05 00 04
	00 00		 movzx	 eax, WORD PTR _static_ltree+1024
  00144	89 45 f0	 mov	 DWORD PTR _val$78087[ebp], eax
  00147	0f b7 55 f0	 movzx	 edx, WORD PTR _val$78087[ebp]
  0014b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0014e	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00154	d3 e2		 shl	 edx, cl
  00156	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00159	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00160	0b c2		 or	 eax, edx
  00162	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00165	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  0016c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0016f	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00176	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0017b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0017e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00181	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00184	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00187	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0018a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0018d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00190	83 c0 01	 add	 eax, 1
  00193	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00196	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00199	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0019c	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  001a3	c1 f8 08	 sar	 eax, 8
  001a6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001a9	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001ac	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001af	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  001b2	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  001b5	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001b8	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001bb	83 c0 01	 add	 eax, 1
  001be	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001c1	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  001c4	0f b7 55 f0	 movzx	 edx, WORD PTR _val$78087[ebp]
  001c8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001cb	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  001d0	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  001d6	d3 fa		 sar	 edx, cl
  001d8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001db	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  001e2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001e5	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  001eb	8b 4d f4	 mov	 ecx, DWORD PTR _len$78083[ebp]
  001ee	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  001f2	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001f5	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  001fb	eb 3d		 jmp	 SHORT $LN6@tr_align
$LN7@tr_align:
  001fd	0f b7 15 00 04
	00 00		 movzx	 edx, WORD PTR _static_ltree+1024
  00204	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00207	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0020d	d3 e2		 shl	 edx, cl
  0020f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00212	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00219	0b c2		 or	 eax, edx
  0021b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0021e	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00225	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00228	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0022e	03 45 f4	 add	 eax, DWORD PTR _len$78083[ebp]
  00231	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00234	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN6@tr_align:

; 901  : #ifdef DEBUG
; 902  :     s->compressed_len += 10L; /* 3 for block type, 7 for EOB */
; 903  : #endif
; 904  :     bi_flush(s);

  0023a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0023d	52		 push	 edx
  0023e	e8 00 00 00 00	 call	 _bi_flush
  00243	83 c4 04	 add	 esp, 4

; 905  :     /* Of the 10 bits for the empty block, we have already sent
; 906  :      * (10 - bi_valid) bits. The lookahead for the last real code (before
; 907  :      * the EOB of the previous block) was thus at least one plus the length
; 908  :      * of the EOB plus what we have just sent of the empty static block.
; 909  :      */
; 910  :     if (1 + s->last_eob_len + 10 - s->bi_valid < 9) {

  00246	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00249	8b 88 b4 16 00
	00		 mov	 ecx, DWORD PTR [eax+5812]
  0024f	83 c1 0b	 add	 ecx, 11			; 0000000bH
  00252	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00255	2b 8a bc 16 00
	00		 sub	 ecx, DWORD PTR [edx+5820]
  0025b	83 f9 09	 cmp	 ecx, 9
  0025e	0f 8d 40 02 00
	00		 jge	 $LN5@tr_align

; 911  :         send_bits(s, STATIC_TREES<<1, 3);

  00264	c7 45 ec 03 00
	00 00		 mov	 DWORD PTR _len$78098[ebp], 3
  0026b	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00270	2b 45 ec	 sub	 eax, DWORD PTR _len$78098[ebp]
  00273	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00276	39 81 bc 16 00
	00		 cmp	 DWORD PTR [ecx+5820], eax
  0027c	0f 8e bd 00 00
	00		 jle	 $LN4@tr_align
  00282	c7 45 e8 02 00
	00 00		 mov	 DWORD PTR _val$78102[ebp], 2
  00289	0f b7 55 e8	 movzx	 edx, WORD PTR _val$78102[ebp]
  0028d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00290	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00296	d3 e2		 shl	 edx, cl
  00298	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0029b	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  002a2	0b c2		 or	 eax, edx
  002a4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002a7	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  002ae	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002b1	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  002b8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002bd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002c0	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002c3	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002c6	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  002c9	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  002cc	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002cf	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  002d2	83 c0 01	 add	 eax, 1
  002d5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002d8	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  002db	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002de	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  002e5	c1 f8 08	 sar	 eax, 8
  002e8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002eb	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002ee	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002f1	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  002f4	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  002f7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002fa	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  002fd	83 c0 01	 add	 eax, 1
  00300	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00303	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00306	0f b7 55 e8	 movzx	 edx, WORD PTR _val$78102[ebp]
  0030a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0030d	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00312	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  00318	d3 fa		 sar	 edx, cl
  0031a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0031d	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00324	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00327	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0032d	8b 4d ec	 mov	 ecx, DWORD PTR _len$78098[ebp]
  00330	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00334	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00337	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0033d	eb 3b		 jmp	 SHORT $LN3@tr_align
$LN4@tr_align:
  0033f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00342	ba 02 00 00 00	 mov	 edx, 2
  00347	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  0034d	d3 e2		 shl	 edx, cl
  0034f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00352	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00359	0b ca		 or	 ecx, edx
  0035b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0035e	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  00365	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00368	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0036e	03 4d ec	 add	 ecx, DWORD PTR _len$78098[ebp]
  00371	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00374	89 8a bc 16 00
	00		 mov	 DWORD PTR [edx+5820], ecx
$LN3@tr_align:

; 912  :         send_code(s, END_BLOCK, static_ltree);

  0037a	0f b7 05 02 04
	00 00		 movzx	 eax, WORD PTR _static_ltree+1026
  00381	89 45 e4	 mov	 DWORD PTR _len$78112[ebp], eax
  00384	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00389	2b 4d e4	 sub	 ecx, DWORD PTR _len$78112[ebp]
  0038c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0038f	39 8a bc 16 00
	00		 cmp	 DWORD PTR [edx+5820], ecx
  00395	0f 8e c0 00 00
	00		 jle	 $LN2@tr_align
  0039b	0f b7 05 00 04
	00 00		 movzx	 eax, WORD PTR _static_ltree+1024
  003a2	89 45 e0	 mov	 DWORD PTR _val$78116[ebp], eax
  003a5	0f b7 55 e0	 movzx	 edx, WORD PTR _val$78116[ebp]
  003a9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003ac	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  003b2	d3 e2		 shl	 edx, cl
  003b4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003b7	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  003be	0b c2		 or	 eax, edx
  003c0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003c3	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  003ca	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003cd	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  003d4	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003d9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003dc	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  003df	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003e2	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  003e5	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  003e8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003eb	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  003ee	83 c0 01	 add	 eax, 1
  003f1	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003f4	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  003f7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003fa	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00401	c1 f8 08	 sar	 eax, 8
  00404	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00407	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0040a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0040d	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00410	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00413	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00416	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00419	83 c0 01	 add	 eax, 1
  0041c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0041f	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00422	0f b7 55 e0	 movzx	 edx, WORD PTR _val$78116[ebp]
  00426	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00429	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0042e	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  00434	d3 fa		 sar	 edx, cl
  00436	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00439	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00440	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00443	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00449	8b 4d e4	 mov	 ecx, DWORD PTR _len$78112[ebp]
  0044c	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00450	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00453	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  00459	eb 3d		 jmp	 SHORT $LN1@tr_align
$LN2@tr_align:
  0045b	0f b7 15 00 04
	00 00		 movzx	 edx, WORD PTR _static_ltree+1024
  00462	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00465	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0046b	d3 e2		 shl	 edx, cl
  0046d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00470	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00477	0b c2		 or	 eax, edx
  00479	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0047c	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00483	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00486	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0048c	03 45 e4	 add	 eax, DWORD PTR _len$78112[ebp]
  0048f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00492	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN1@tr_align:

; 913  : #ifdef DEBUG
; 914  :         s->compressed_len += 10L;
; 915  : #endif
; 916  :         bi_flush(s);

  00498	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0049b	52		 push	 edx
  0049c	e8 00 00 00 00	 call	 _bi_flush
  004a1	83 c4 04	 add	 esp, 4
$LN5@tr_align:

; 917  :     }
; 918  :     s->last_eob_len = 7;

  004a4	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004a7	c7 80 b4 16 00
	00 07 00 00 00	 mov	 DWORD PTR [eax+5812], 7

; 919  : }

  004b1	8b e5		 mov	 esp, ebp
  004b3	5d		 pop	 ebp
  004b4	c3		 ret	 0
__tr_align ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _send_tree
_TEXT	SEGMENT
_val$77952 = -92					; size = 4
_len$77948 = -88					; size = 4
_val$77938 = -84					; size = 4
_len$77934 = -80					; size = 4
_val$77923 = -76					; size = 4
_len$77919 = -72					; size = 4
_val$77909 = -68					; size = 4
_len$77905 = -64					; size = 4
_val$77893 = -60					; size = 4
_len$77889 = -56					; size = 4
_val$77879 = -52					; size = 4
_len$77875 = -48					; size = 4
_val$77865 = -44					; size = 4
_len$77861 = -40					; size = 4
_val$77848 = -36					; size = 4
_len$77844 = -32					; size = 4
_max_count$ = -28					; size = 4
_min_count$ = -24					; size = 4
_prevlen$ = -20						; size = 4
_nextlen$ = -16						; size = 4
_curlen$ = -12						; size = 4
_n$ = -8						; size = 4
_count$ = -4						; size = 4
_s$ = 8							; size = 4
_tree$ = 12						; size = 4
_max_code$ = 16						; size = 4
_send_tree PROC						; COMDAT

; 760  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 5c	 sub	 esp, 92			; 0000005cH

; 761  :     int n;                     /* iterates over all tree elements */
; 762  :     int prevlen = -1;          /* last emitted length */

  00006	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _prevlen$[ebp], -1

; 763  :     int curlen;                /* length of current code */
; 764  :     int nextlen = tree[0].Len; /* length of next code */

  0000d	8b 45 0c	 mov	 eax, DWORD PTR _tree$[ebp]
  00010	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  00014	89 4d f0	 mov	 DWORD PTR _nextlen$[ebp], ecx

; 765  :     int count = 0;             /* repeat count of the current code */

  00017	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 766  :     int max_count = 7;         /* max repeat count */

  0001e	c7 45 e4 07 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 7

; 767  :     int min_count = 4;         /* min repeat count */

  00025	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 4

; 768  : 
; 769  :     /* tree[max_code+1].Len = -1; */  /* guard already set */
; 770  :     if (nextlen == 0) max_count = 138, min_count = 3;

  0002c	83 7d f0 00	 cmp	 DWORD PTR _nextlen$[ebp], 0
  00030	75 0e		 jne	 SHORT $LN36@send_tree
  00032	c7 45 e4 8a 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 138 ; 0000008aH
  00039	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 3
$LN36@send_tree:

; 771  : 
; 772  :     for (n = 0; n <= max_code; n++) {

  00040	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00047	eb 09		 jmp	 SHORT $LN35@send_tree
$LN34@send_tree:
  00049	8b 55 f8	 mov	 edx, DWORD PTR _n$[ebp]
  0004c	83 c2 01	 add	 edx, 1
  0004f	89 55 f8	 mov	 DWORD PTR _n$[ebp], edx
$LN35@send_tree:
  00052	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00055	3b 45 10	 cmp	 eax, DWORD PTR _max_code$[ebp]
  00058	0f 8f 04 0a 00
	00		 jg	 $LN37@send_tree

; 773  :         curlen = nextlen; nextlen = tree[n+1].Len;

  0005e	8b 4d f0	 mov	 ecx, DWORD PTR _nextlen$[ebp]
  00061	89 4d f4	 mov	 DWORD PTR _curlen$[ebp], ecx
  00064	8b 55 f8	 mov	 edx, DWORD PTR _n$[ebp]
  00067	8b 45 0c	 mov	 eax, DWORD PTR _tree$[ebp]
  0006a	0f b7 4c 90 06	 movzx	 ecx, WORD PTR [eax+edx*4+6]
  0006f	89 4d f0	 mov	 DWORD PTR _nextlen$[ebp], ecx

; 774  :         if (++count < max_count && curlen == nextlen) {

  00072	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  00075	83 c2 01	 add	 edx, 1
  00078	89 55 fc	 mov	 DWORD PTR _count$[ebp], edx
  0007b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0007e	3b 45 e4	 cmp	 eax, DWORD PTR _max_count$[ebp]
  00081	7d 0f		 jge	 SHORT $LN32@send_tree
  00083	8b 4d f4	 mov	 ecx, DWORD PTR _curlen$[ebp]
  00086	3b 4d f0	 cmp	 ecx, DWORD PTR _nextlen$[ebp]
  00089	75 07		 jne	 SHORT $LN32@send_tree
  0008b	eb bc		 jmp	 SHORT $LN34@send_tree

; 775  :             continue;

  0008d	e9 82 09 00 00	 jmp	 $LN31@send_tree
$LN32@send_tree:

; 776  :         } else if (count < min_count) {

  00092	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  00095	3b 55 e8	 cmp	 edx, DWORD PTR _min_count$[ebp]
  00098	0f 8d 47 01 00
	00		 jge	 $LN30@send_tree
$LN29@send_tree:

; 777  :             do { send_code(s, curlen, s->bl_tree); } while (--count != 0);

  0009e	8b 45 f4	 mov	 eax, DWORD PTR _curlen$[ebp]
  000a1	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000a4	0f b7 94 81 7e
	0a 00 00	 movzx	 edx, WORD PTR [ecx+eax*4+2686]
  000ac	89 55 e0	 mov	 DWORD PTR _len$77844[ebp], edx
  000af	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  000b4	2b 45 e0	 sub	 eax, DWORD PTR _len$77844[ebp]
  000b7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000ba	39 81 bc 16 00
	00		 cmp	 DWORD PTR [ecx+5820], eax
  000c0	0f 8e c7 00 00
	00		 jle	 $LN26@send_tree
  000c6	8b 55 f4	 mov	 edx, DWORD PTR _curlen$[ebp]
  000c9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000cc	0f b7 8c 90 7c
	0a 00 00	 movzx	 ecx, WORD PTR [eax+edx*4+2684]
  000d4	89 4d dc	 mov	 DWORD PTR _val$77848[ebp], ecx
  000d7	0f b7 55 dc	 movzx	 edx, WORD PTR _val$77848[ebp]
  000db	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000de	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  000e4	d3 e2		 shl	 edx, cl
  000e6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000e9	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  000f0	0b c2		 or	 eax, edx
  000f2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000f5	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  000fc	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ff	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00106	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0010b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0010e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00111	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00114	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00117	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0011a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0011d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00120	83 c0 01	 add	 eax, 1
  00123	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00126	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00129	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0012c	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00133	c1 f8 08	 sar	 eax, 8
  00136	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00139	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0013c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0013f	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00142	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00145	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00148	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0014b	83 c0 01	 add	 eax, 1
  0014e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00151	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00154	0f b7 55 dc	 movzx	 edx, WORD PTR _val$77848[ebp]
  00158	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0015b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00160	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  00166	d3 fa		 sar	 edx, cl
  00168	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0016b	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00172	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00175	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0017b	8b 4d e0	 mov	 ecx, DWORD PTR _len$77844[ebp]
  0017e	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00182	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00185	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0018b	eb 44		 jmp	 SHORT $LN28@send_tree
$LN26@send_tree:
  0018d	8b 4d f4	 mov	 ecx, DWORD PTR _curlen$[ebp]
  00190	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00193	0f b7 84 8a 7c
	0a 00 00	 movzx	 eax, WORD PTR [edx+ecx*4+2684]
  0019b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0019e	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  001a4	d3 e0		 shl	 eax, cl
  001a6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001a9	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  001b0	0b c8		 or	 ecx, eax
  001b2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001b5	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  001bc	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001bf	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  001c5	03 4d e0	 add	 ecx, DWORD PTR _len$77844[ebp]
  001c8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001cb	89 8a bc 16 00
	00		 mov	 DWORD PTR [edx+5820], ecx
$LN28@send_tree:
  001d1	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  001d4	83 e8 01	 sub	 eax, 1
  001d7	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
  001da	0f 85 be fe ff
	ff		 jne	 $LN29@send_tree

; 778  : 
; 779  :         } else if (curlen != 0) {

  001e0	e9 2f 08 00 00	 jmp	 $LN31@send_tree
$LN30@send_tree:
  001e5	83 7d f4 00	 cmp	 DWORD PTR _curlen$[ebp], 0
  001e9	0f 84 90 03 00
	00		 je	 $LN23@send_tree

; 780  :             if (curlen != prevlen) {

  001ef	8b 4d f4	 mov	 ecx, DWORD PTR _curlen$[ebp]
  001f2	3b 4d ec	 cmp	 ecx, DWORD PTR _prevlen$[ebp]
  001f5	0f 84 3c 01 00
	00		 je	 $LN22@send_tree

; 781  :                 send_code(s, curlen, s->bl_tree); count--;

  001fb	8b 55 f4	 mov	 edx, DWORD PTR _curlen$[ebp]
  001fe	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00201	0f b7 8c 90 7e
	0a 00 00	 movzx	 ecx, WORD PTR [eax+edx*4+2686]
  00209	89 4d d8	 mov	 DWORD PTR _len$77861[ebp], ecx
  0020c	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00211	2b 55 d8	 sub	 edx, DWORD PTR _len$77861[ebp]
  00214	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00217	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  0021d	0f 8e c7 00 00
	00		 jle	 $LN21@send_tree
  00223	8b 4d f4	 mov	 ecx, DWORD PTR _curlen$[ebp]
  00226	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00229	0f b7 84 8a 7c
	0a 00 00	 movzx	 eax, WORD PTR [edx+ecx*4+2684]
  00231	89 45 d4	 mov	 DWORD PTR _val$77865[ebp], eax
  00234	0f b7 55 d4	 movzx	 edx, WORD PTR _val$77865[ebp]
  00238	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0023b	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00241	d3 e2		 shl	 edx, cl
  00243	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00246	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  0024d	0b c2		 or	 eax, edx
  0024f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00252	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00259	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0025c	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00263	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00268	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0026b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0026e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00271	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00274	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00277	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0027a	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0027d	83 c0 01	 add	 eax, 1
  00280	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00283	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00286	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00289	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00290	c1 f8 08	 sar	 eax, 8
  00293	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00296	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00299	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0029c	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0029f	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  002a2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002a5	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  002a8	83 c0 01	 add	 eax, 1
  002ab	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002ae	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  002b1	0f b7 55 d4	 movzx	 edx, WORD PTR _val$77865[ebp]
  002b5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002b8	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  002bd	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  002c3	d3 fa		 sar	 edx, cl
  002c5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002c8	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  002cf	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002d2	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  002d8	8b 4d d8	 mov	 ecx, DWORD PTR _len$77861[ebp]
  002db	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  002df	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002e2	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  002e8	eb 44		 jmp	 SHORT $LN20@send_tree
$LN21@send_tree:
  002ea	8b 4d f4	 mov	 ecx, DWORD PTR _curlen$[ebp]
  002ed	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002f0	0f b7 84 8a 7c
	0a 00 00	 movzx	 eax, WORD PTR [edx+ecx*4+2684]
  002f8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002fb	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  00301	d3 e0		 shl	 eax, cl
  00303	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00306	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  0030d	0b c8		 or	 ecx, eax
  0030f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00312	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  00319	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0031c	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00322	03 4d d8	 add	 ecx, DWORD PTR _len$77861[ebp]
  00325	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00328	89 8a bc 16 00
	00		 mov	 DWORD PTR [edx+5820], ecx
$LN20@send_tree:
  0032e	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00331	83 e8 01	 sub	 eax, 1
  00334	89 45 fc	 mov	 DWORD PTR _count$[ebp], eax
$LN22@send_tree:

; 782  :             }
; 783  :             Assert(count >= 3 && count <= 6, " 3_6?");
; 784  :             send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);

  00337	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0033a	0f b7 91 be 0a
	00 00		 movzx	 edx, WORD PTR [ecx+2750]
  00341	89 55 d0	 mov	 DWORD PTR _len$77875[ebp], edx
  00344	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00349	2b 45 d0	 sub	 eax, DWORD PTR _len$77875[ebp]
  0034c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0034f	39 81 bc 16 00
	00		 cmp	 DWORD PTR [ecx+5820], eax
  00355	0f 8e c3 00 00
	00		 jle	 $LN19@send_tree
  0035b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0035e	0f b7 82 bc 0a
	00 00		 movzx	 eax, WORD PTR [edx+2748]
  00365	89 45 cc	 mov	 DWORD PTR _val$77879[ebp], eax
  00368	0f b7 55 cc	 movzx	 edx, WORD PTR _val$77879[ebp]
  0036c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0036f	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00375	d3 e2		 shl	 edx, cl
  00377	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0037a	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00381	0b c2		 or	 eax, edx
  00383	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00386	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  0038d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00390	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00397	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0039c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0039f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  003a2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003a5	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  003a8	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  003ab	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003ae	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  003b1	83 c0 01	 add	 eax, 1
  003b4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003b7	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  003ba	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003bd	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  003c4	c1 f8 08	 sar	 eax, 8
  003c7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003ca	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  003cd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003d0	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  003d3	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  003d6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003d9	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  003dc	83 c0 01	 add	 eax, 1
  003df	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003e2	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  003e5	0f b7 55 cc	 movzx	 edx, WORD PTR _val$77879[ebp]
  003e9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003ec	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  003f1	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  003f7	d3 fa		 sar	 edx, cl
  003f9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003fc	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00403	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00406	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0040c	8b 4d d0	 mov	 ecx, DWORD PTR _len$77875[ebp]
  0040f	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00413	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00416	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0041c	eb 40		 jmp	 SHORT $LN18@send_tree
$LN19@send_tree:
  0041e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00421	0f b7 91 bc 0a
	00 00		 movzx	 edx, WORD PTR [ecx+2748]
  00428	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0042b	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00431	d3 e2		 shl	 edx, cl
  00433	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00436	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  0043d	0b c2		 or	 eax, edx
  0043f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00442	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00449	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0044c	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00452	03 45 d0	 add	 eax, DWORD PTR _len$77875[ebp]
  00455	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00458	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN18@send_tree:
  0045e	c7 45 c8 02 00
	00 00		 mov	 DWORD PTR _len$77889[ebp], 2
  00465	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0046a	2b 55 c8	 sub	 edx, DWORD PTR _len$77889[ebp]
  0046d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00470	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  00476	0f 8e bf 00 00
	00		 jle	 $LN17@send_tree
  0047c	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  0047f	83 e9 03	 sub	 ecx, 3
  00482	89 4d c4	 mov	 DWORD PTR _val$77893[ebp], ecx
  00485	0f b7 55 c4	 movzx	 edx, WORD PTR _val$77893[ebp]
  00489	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0048c	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00492	d3 e2		 shl	 edx, cl
  00494	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00497	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  0049e	0b c2		 or	 eax, edx
  004a0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004a3	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  004aa	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004ad	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  004b4	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  004b9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004bc	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  004bf	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004c2	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  004c5	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  004c8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004cb	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  004ce	83 c0 01	 add	 eax, 1
  004d1	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004d4	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  004d7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004da	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  004e1	c1 f8 08	 sar	 eax, 8
  004e4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004e7	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  004ea	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004ed	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  004f0	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  004f3	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004f6	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  004f9	83 c0 01	 add	 eax, 1
  004fc	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004ff	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00502	0f b7 55 c4	 movzx	 edx, WORD PTR _val$77893[ebp]
  00506	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00509	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0050e	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  00514	d3 fa		 sar	 edx, cl
  00516	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00519	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00520	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00523	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00529	8b 4d c8	 mov	 ecx, DWORD PTR _len$77889[ebp]
  0052c	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00530	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00533	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  00539	eb 3f		 jmp	 SHORT $LN16@send_tree
$LN17@send_tree:
  0053b	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  0053e	83 e9 03	 sub	 ecx, 3
  00541	0f b7 d1	 movzx	 edx, cx
  00544	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00547	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0054d	d3 e2		 shl	 edx, cl
  0054f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00552	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00559	0b c2		 or	 eax, edx
  0055b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0055e	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00565	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00568	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0056e	03 45 c8	 add	 eax, DWORD PTR _len$77889[ebp]
  00571	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00574	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN16@send_tree:
  0057a	e9 95 04 00 00	 jmp	 $LN31@send_tree
$LN23@send_tree:

; 785  : 
; 786  :         } else if (count <= 10) {

  0057f	83 7d fc 0a	 cmp	 DWORD PTR _count$[ebp], 10 ; 0000000aH
  00583	0f 8f 48 02 00
	00		 jg	 $LN14@send_tree

; 787  :             send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);

  00589	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0058c	0f b7 82 c2 0a
	00 00		 movzx	 eax, WORD PTR [edx+2754]
  00593	89 45 c0	 mov	 DWORD PTR _len$77905[ebp], eax
  00596	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0059b	2b 4d c0	 sub	 ecx, DWORD PTR _len$77905[ebp]
  0059e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005a1	39 8a bc 16 00
	00		 cmp	 DWORD PTR [edx+5820], ecx
  005a7	0f 8e c3 00 00
	00		 jle	 $LN13@send_tree
  005ad	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005b0	0f b7 88 c0 0a
	00 00		 movzx	 ecx, WORD PTR [eax+2752]
  005b7	89 4d bc	 mov	 DWORD PTR _val$77909[ebp], ecx
  005ba	0f b7 55 bc	 movzx	 edx, WORD PTR _val$77909[ebp]
  005be	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  005c1	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  005c7	d3 e2		 shl	 edx, cl
  005c9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005cc	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  005d3	0b c2		 or	 eax, edx
  005d5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005d8	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  005df	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  005e2	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  005e9	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  005ee	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005f1	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  005f4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  005f7	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  005fa	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  005fd	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00600	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00603	83 c0 01	 add	 eax, 1
  00606	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00609	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0060c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0060f	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00616	c1 f8 08	 sar	 eax, 8
  00619	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0061c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0061f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00622	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00625	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00628	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0062b	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0062e	83 c0 01	 add	 eax, 1
  00631	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00634	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00637	0f b7 55 bc	 movzx	 edx, WORD PTR _val$77909[ebp]
  0063b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0063e	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00643	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  00649	d3 fa		 sar	 edx, cl
  0064b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0064e	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00655	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00658	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0065e	8b 4d c0	 mov	 ecx, DWORD PTR _len$77905[ebp]
  00661	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00665	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00668	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0066e	eb 40		 jmp	 SHORT $LN12@send_tree
$LN13@send_tree:
  00670	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00673	0f b7 91 c0 0a
	00 00		 movzx	 edx, WORD PTR [ecx+2752]
  0067a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0067d	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00683	d3 e2		 shl	 edx, cl
  00685	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00688	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  0068f	0b c2		 or	 eax, edx
  00691	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00694	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  0069b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0069e	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  006a4	03 45 c0	 add	 eax, DWORD PTR _len$77905[ebp]
  006a7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  006aa	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN12@send_tree:
  006b0	c7 45 b8 03 00
	00 00		 mov	 DWORD PTR _len$77919[ebp], 3
  006b7	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  006bc	2b 55 b8	 sub	 edx, DWORD PTR _len$77919[ebp]
  006bf	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  006c2	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  006c8	0f 8e bf 00 00
	00		 jle	 $LN11@send_tree
  006ce	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  006d1	83 e9 03	 sub	 ecx, 3
  006d4	89 4d b4	 mov	 DWORD PTR _val$77923[ebp], ecx
  006d7	0f b7 55 b4	 movzx	 edx, WORD PTR _val$77923[ebp]
  006db	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  006de	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  006e4	d3 e2		 shl	 edx, cl
  006e6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  006e9	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  006f0	0b c2		 or	 eax, edx
  006f2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  006f5	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  006fc	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  006ff	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00706	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0070b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0070e	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00711	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00714	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00717	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0071a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0071d	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00720	83 c0 01	 add	 eax, 1
  00723	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00726	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00729	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0072c	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00733	c1 f8 08	 sar	 eax, 8
  00736	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00739	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0073c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0073f	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00742	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00745	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00748	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0074b	83 c0 01	 add	 eax, 1
  0074e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00751	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00754	0f b7 55 b4	 movzx	 edx, WORD PTR _val$77923[ebp]
  00758	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0075b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00760	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  00766	d3 fa		 sar	 edx, cl
  00768	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0076b	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00772	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00775	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0077b	8b 4d b8	 mov	 ecx, DWORD PTR _len$77919[ebp]
  0077e	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00782	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00785	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0078b	eb 3f		 jmp	 SHORT $LN10@send_tree
$LN11@send_tree:
  0078d	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  00790	83 e9 03	 sub	 ecx, 3
  00793	0f b7 d1	 movzx	 edx, cx
  00796	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00799	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0079f	d3 e2		 shl	 edx, cl
  007a1	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  007a4	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  007ab	0b c2		 or	 eax, edx
  007ad	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  007b0	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  007b7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  007ba	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  007c0	03 45 b8	 add	 eax, DWORD PTR _len$77919[ebp]
  007c3	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  007c6	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN10@send_tree:

; 788  : 
; 789  :         } else {

  007cc	e9 43 02 00 00	 jmp	 $LN31@send_tree
$LN14@send_tree:

; 790  :             send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);

  007d1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  007d4	0f b7 82 c6 0a
	00 00		 movzx	 eax, WORD PTR [edx+2758]
  007db	89 45 b0	 mov	 DWORD PTR _len$77934[ebp], eax
  007de	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  007e3	2b 4d b0	 sub	 ecx, DWORD PTR _len$77934[ebp]
  007e6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  007e9	39 8a bc 16 00
	00		 cmp	 DWORD PTR [edx+5820], ecx
  007ef	0f 8e c3 00 00
	00		 jle	 $LN8@send_tree
  007f5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  007f8	0f b7 88 c4 0a
	00 00		 movzx	 ecx, WORD PTR [eax+2756]
  007ff	89 4d ac	 mov	 DWORD PTR _val$77938[ebp], ecx
  00802	0f b7 55 ac	 movzx	 edx, WORD PTR _val$77938[ebp]
  00806	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00809	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0080f	d3 e2		 shl	 edx, cl
  00811	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00814	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  0081b	0b c2		 or	 eax, edx
  0081d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00820	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00827	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0082a	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00831	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00836	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00839	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0083c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0083f	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00842	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00845	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00848	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0084b	83 c0 01	 add	 eax, 1
  0084e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00851	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00854	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00857	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  0085e	c1 f8 08	 sar	 eax, 8
  00861	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00864	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00867	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0086a	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0086d	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00870	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00873	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00876	83 c0 01	 add	 eax, 1
  00879	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0087c	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0087f	0f b7 55 ac	 movzx	 edx, WORD PTR _val$77938[ebp]
  00883	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00886	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0088b	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  00891	d3 fa		 sar	 edx, cl
  00893	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00896	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  0089d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  008a0	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  008a6	8b 4d b0	 mov	 ecx, DWORD PTR _len$77934[ebp]
  008a9	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  008ad	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  008b0	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  008b6	eb 40		 jmp	 SHORT $LN7@send_tree
$LN8@send_tree:
  008b8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  008bb	0f b7 91 c4 0a
	00 00		 movzx	 edx, WORD PTR [ecx+2756]
  008c2	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  008c5	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  008cb	d3 e2		 shl	 edx, cl
  008cd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  008d0	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  008d7	0b c2		 or	 eax, edx
  008d9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  008dc	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  008e3	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  008e6	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  008ec	03 45 b0	 add	 eax, DWORD PTR _len$77934[ebp]
  008ef	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  008f2	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN7@send_tree:
  008f8	c7 45 a8 07 00
	00 00		 mov	 DWORD PTR _len$77948[ebp], 7
  008ff	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00904	2b 55 a8	 sub	 edx, DWORD PTR _len$77948[ebp]
  00907	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0090a	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  00910	0f 8e bf 00 00
	00		 jle	 $LN6@send_tree
  00916	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  00919	83 e9 0b	 sub	 ecx, 11			; 0000000bH
  0091c	89 4d a4	 mov	 DWORD PTR _val$77952[ebp], ecx
  0091f	0f b7 55 a4	 movzx	 edx, WORD PTR _val$77952[ebp]
  00923	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00926	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0092c	d3 e2		 shl	 edx, cl
  0092e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00931	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00938	0b c2		 or	 eax, edx
  0093a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0093d	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00944	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00947	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  0094e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00953	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00956	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00959	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0095c	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0095f	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00962	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00965	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00968	83 c0 01	 add	 eax, 1
  0096b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0096e	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00971	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00974	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  0097b	c1 f8 08	 sar	 eax, 8
  0097e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00981	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00984	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00987	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0098a	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0098d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00990	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00993	83 c0 01	 add	 eax, 1
  00996	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00999	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0099c	0f b7 55 a4	 movzx	 edx, WORD PTR _val$77952[ebp]
  009a0	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  009a3	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  009a8	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  009ae	d3 fa		 sar	 edx, cl
  009b0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  009b3	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  009ba	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  009bd	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  009c3	8b 4d a8	 mov	 ecx, DWORD PTR _len$77948[ebp]
  009c6	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  009ca	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  009cd	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  009d3	eb 3f		 jmp	 SHORT $LN31@send_tree
$LN6@send_tree:
  009d5	8b 4d fc	 mov	 ecx, DWORD PTR _count$[ebp]
  009d8	83 e9 0b	 sub	 ecx, 11			; 0000000bH
  009db	0f b7 d1	 movzx	 edx, cx
  009de	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  009e1	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  009e7	d3 e2		 shl	 edx, cl
  009e9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  009ec	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  009f3	0b c2		 or	 eax, edx
  009f5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  009f8	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  009ff	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00a02	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00a08	03 45 a8	 add	 eax, DWORD PTR _len$77948[ebp]
  00a0b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00a0e	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN31@send_tree:

; 791  :         }
; 792  :         count = 0; prevlen = curlen;

  00a14	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00a1b	8b 55 f4	 mov	 edx, DWORD PTR _curlen$[ebp]
  00a1e	89 55 ec	 mov	 DWORD PTR _prevlen$[ebp], edx

; 793  :         if (nextlen == 0) {

  00a21	83 7d f0 00	 cmp	 DWORD PTR _nextlen$[ebp], 0
  00a25	75 10		 jne	 SHORT $LN4@send_tree

; 794  :             max_count = 138, min_count = 3;

  00a27	c7 45 e4 8a 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 138 ; 0000008aH
  00a2e	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 3
  00a35	eb 26		 jmp	 SHORT $LN3@send_tree
$LN4@send_tree:

; 795  :         } else if (curlen == nextlen) {

  00a37	8b 45 f4	 mov	 eax, DWORD PTR _curlen$[ebp]
  00a3a	3b 45 f0	 cmp	 eax, DWORD PTR _nextlen$[ebp]
  00a3d	75 10		 jne	 SHORT $LN2@send_tree

; 796  :             max_count = 6, min_count = 3;

  00a3f	c7 45 e4 06 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 6
  00a46	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 3

; 797  :         } else {

  00a4d	eb 0e		 jmp	 SHORT $LN3@send_tree
$LN2@send_tree:

; 798  :             max_count = 7, min_count = 4;

  00a4f	c7 45 e4 07 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 7
  00a56	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 4
$LN3@send_tree:

; 799  :         }
; 800  :     }

  00a5d	e9 e7 f5 ff ff	 jmp	 $LN34@send_tree
$LN37@send_tree:

; 801  : }

  00a62	8b e5		 mov	 esp, ebp
  00a64	5d		 pop	 ebp
  00a65	c3		 ret	 0
_send_tree ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _scan_tree
_TEXT	SEGMENT
_max_count$ = -28					; size = 4
_min_count$ = -24					; size = 4
_prevlen$ = -20						; size = 4
_nextlen$ = -16						; size = 4
_curlen$ = -12						; size = 4
_n$ = -8						; size = 4
_count$ = -4						; size = 4
_s$ = 8							; size = 4
_tree$ = 12						; size = 4
_max_code$ = 16						; size = 4
_scan_tree PROC						; COMDAT

; 715  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 716  :     int n;                     /* iterates over all tree elements */
; 717  :     int prevlen = -1;          /* last emitted length */

  00006	c7 45 ec ff ff
	ff ff		 mov	 DWORD PTR _prevlen$[ebp], -1

; 718  :     int curlen;                /* length of current code */
; 719  :     int nextlen = tree[0].Len; /* length of next code */

  0000d	8b 45 0c	 mov	 eax, DWORD PTR _tree$[ebp]
  00010	0f b7 48 02	 movzx	 ecx, WORD PTR [eax+2]
  00014	89 4d f0	 mov	 DWORD PTR _nextlen$[ebp], ecx

; 720  :     int count = 0;             /* repeat count of the current code */

  00017	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0

; 721  :     int max_count = 7;         /* max repeat count */

  0001e	c7 45 e4 07 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 7

; 722  :     int min_count = 4;         /* min repeat count */

  00025	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 4

; 723  : 
; 724  :     if (nextlen == 0) max_count = 138, min_count = 3;

  0002c	83 7d f0 00	 cmp	 DWORD PTR _nextlen$[ebp], 0
  00030	75 0e		 jne	 SHORT $LN17@scan_tree
  00032	c7 45 e4 8a 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 138 ; 0000008aH
  00039	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 3
$LN17@scan_tree:

; 725  :     tree[max_code+1].Len = (ush)0xffff; /* guard */

  00040	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  00045	8b 45 10	 mov	 eax, DWORD PTR _max_code$[ebp]
  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _tree$[ebp]
  0004b	66 89 54 81 06	 mov	 WORD PTR [ecx+eax*4+6], dx

; 726  : 
; 727  :     for (n = 0; n <= max_code; n++) {

  00050	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00057	eb 09		 jmp	 SHORT $LN16@scan_tree
$LN15@scan_tree:
  00059	8b 55 f8	 mov	 edx, DWORD PTR _n$[ebp]
  0005c	83 c2 01	 add	 edx, 1
  0005f	89 55 f8	 mov	 DWORD PTR _n$[ebp], edx
$LN16@scan_tree:
  00062	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00065	3b 45 10	 cmp	 eax, DWORD PTR _max_code$[ebp]
  00068	0f 8f 2e 01 00
	00		 jg	 $LN18@scan_tree

; 728  :         curlen = nextlen; nextlen = tree[n+1].Len;

  0006e	8b 4d f0	 mov	 ecx, DWORD PTR _nextlen$[ebp]
  00071	89 4d f4	 mov	 DWORD PTR _curlen$[ebp], ecx
  00074	8b 55 f8	 mov	 edx, DWORD PTR _n$[ebp]
  00077	8b 45 0c	 mov	 eax, DWORD PTR _tree$[ebp]
  0007a	0f b7 4c 90 06	 movzx	 ecx, WORD PTR [eax+edx*4+6]
  0007f	89 4d f0	 mov	 DWORD PTR _nextlen$[ebp], ecx

; 729  :         if (++count < max_count && curlen == nextlen) {

  00082	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  00085	83 c2 01	 add	 edx, 1
  00088	89 55 fc	 mov	 DWORD PTR _count$[ebp], edx
  0008b	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  0008e	3b 45 e4	 cmp	 eax, DWORD PTR _max_count$[ebp]
  00091	7d 0f		 jge	 SHORT $LN13@scan_tree
  00093	8b 4d f4	 mov	 ecx, DWORD PTR _curlen$[ebp]
  00096	3b 4d f0	 cmp	 ecx, DWORD PTR _nextlen$[ebp]
  00099	75 07		 jne	 SHORT $LN13@scan_tree
  0009b	eb bc		 jmp	 SHORT $LN15@scan_tree

; 730  :             continue;

  0009d	e9 ac 00 00 00	 jmp	 $LN12@scan_tree
$LN13@scan_tree:

; 731  :         } else if (count < min_count) {

  000a2	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  000a5	3b 55 e8	 cmp	 edx, DWORD PTR _min_count$[ebp]
  000a8	7d 24		 jge	 SHORT $LN11@scan_tree

; 732  :             s->bl_tree[curlen].Freq += count;

  000aa	8b 45 f4	 mov	 eax, DWORD PTR _curlen$[ebp]
  000ad	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000b0	0f b7 94 81 7c
	0a 00 00	 movzx	 edx, WORD PTR [ecx+eax*4+2684]
  000b8	03 55 fc	 add	 edx, DWORD PTR _count$[ebp]
  000bb	8b 45 f4	 mov	 eax, DWORD PTR _curlen$[ebp]
  000be	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000c1	66 89 94 81 7c
	0a 00 00	 mov	 WORD PTR [ecx+eax*4+2684], dx
  000c9	e9 80 00 00 00	 jmp	 $LN12@scan_tree
$LN11@scan_tree:

; 733  :         } else if (curlen != 0) {

  000ce	83 7d f4 00	 cmp	 DWORD PTR _curlen$[ebp], 0
  000d2	74 42		 je	 SHORT $LN9@scan_tree

; 734  :             if (curlen != prevlen) s->bl_tree[curlen].Freq++;

  000d4	8b 55 f4	 mov	 edx, DWORD PTR _curlen$[ebp]
  000d7	3b 55 ec	 cmp	 edx, DWORD PTR _prevlen$[ebp]
  000da	74 20		 je	 SHORT $LN8@scan_tree
  000dc	8b 45 f4	 mov	 eax, DWORD PTR _curlen$[ebp]
  000df	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000e2	66 8b 94 81 7c
	0a 00 00	 mov	 dx, WORD PTR [ecx+eax*4+2684]
  000ea	66 83 c2 01	 add	 dx, 1
  000ee	8b 45 f4	 mov	 eax, DWORD PTR _curlen$[ebp]
  000f1	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000f4	66 89 94 81 7c
	0a 00 00	 mov	 WORD PTR [ecx+eax*4+2684], dx
$LN8@scan_tree:

; 735  :             s->bl_tree[REP_3_6].Freq++;

  000fc	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ff	66 8b 82 bc 0a
	00 00		 mov	 ax, WORD PTR [edx+2748]
  00106	66 83 c0 01	 add	 ax, 1
  0010a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0010d	66 89 81 bc 0a
	00 00		 mov	 WORD PTR [ecx+2748], ax
  00114	eb 38		 jmp	 SHORT $LN12@scan_tree
$LN9@scan_tree:

; 736  :         } else if (count <= 10) {

  00116	83 7d fc 0a	 cmp	 DWORD PTR _count$[ebp], 10 ; 0000000aH
  0011a	7f 1a		 jg	 SHORT $LN6@scan_tree

; 737  :             s->bl_tree[REPZ_3_10].Freq++;

  0011c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0011f	66 8b 82 c0 0a
	00 00		 mov	 ax, WORD PTR [edx+2752]
  00126	66 83 c0 01	 add	 ax, 1
  0012a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0012d	66 89 81 c0 0a
	00 00		 mov	 WORD PTR [ecx+2752], ax

; 738  :         } else {

  00134	eb 18		 jmp	 SHORT $LN12@scan_tree
$LN6@scan_tree:

; 739  :             s->bl_tree[REPZ_11_138].Freq++;

  00136	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00139	66 8b 82 c4 0a
	00 00		 mov	 ax, WORD PTR [edx+2756]
  00140	66 83 c0 01	 add	 ax, 1
  00144	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00147	66 89 81 c4 0a
	00 00		 mov	 WORD PTR [ecx+2756], ax
$LN12@scan_tree:

; 740  :         }
; 741  :         count = 0; prevlen = curlen;

  0014e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _count$[ebp], 0
  00155	8b 55 f4	 mov	 edx, DWORD PTR _curlen$[ebp]
  00158	89 55 ec	 mov	 DWORD PTR _prevlen$[ebp], edx

; 742  :         if (nextlen == 0) {

  0015b	83 7d f0 00	 cmp	 DWORD PTR _nextlen$[ebp], 0
  0015f	75 10		 jne	 SHORT $LN4@scan_tree

; 743  :             max_count = 138, min_count = 3;

  00161	c7 45 e4 8a 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 138 ; 0000008aH
  00168	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 3
  0016f	eb 26		 jmp	 SHORT $LN3@scan_tree
$LN4@scan_tree:

; 744  :         } else if (curlen == nextlen) {

  00171	8b 45 f4	 mov	 eax, DWORD PTR _curlen$[ebp]
  00174	3b 45 f0	 cmp	 eax, DWORD PTR _nextlen$[ebp]
  00177	75 10		 jne	 SHORT $LN2@scan_tree

; 745  :             max_count = 6, min_count = 3;

  00179	c7 45 e4 06 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 6
  00180	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 3

; 746  :         } else {

  00187	eb 0e		 jmp	 SHORT $LN3@scan_tree
$LN2@scan_tree:

; 747  :             max_count = 7, min_count = 4;

  00189	c7 45 e4 07 00
	00 00		 mov	 DWORD PTR _max_count$[ebp], 7
  00190	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR _min_count$[ebp], 4
$LN3@scan_tree:

; 748  :         }
; 749  :     }

  00197	e9 bd fe ff ff	 jmp	 $LN15@scan_tree
$LN18@scan_tree:

; 750  : }

  0019c	8b e5		 mov	 esp, ebp
  0019e	5d		 pop	 ebp
  0019f	c3		 ret	 0
_scan_tree ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _gen_codes
_TEXT	SEGMENT
tv95 = -52						; size = 4
_len$77760 = -48					; size = 4
_next_code$ = -44					; size = 32
_bits$ = -12						; size = 4
_code$ = -8						; size = 2
_n$ = -4						; size = 4
_tree$ = 8						; size = 4
_max_code$ = 12						; size = 4
_bl_count$ = 16						; size = 4
_gen_codes PROC						; COMDAT

; 585  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 586  :     ush next_code[MAX_BITS+1]; /* next code value for each bit length */
; 587  :     ush code = 0;              /* running code value */

  00006	33 c0		 xor	 eax, eax
  00008	66 89 45 f8	 mov	 WORD PTR _code$[ebp], ax

; 588  :     int bits;                  /* bit index */
; 589  :     int n;                     /* code index */
; 590  : 
; 591  :     /* The distribution counts are first used to generate the code values
; 592  :      * without bit reversal.
; 593  :      */
; 594  :     for (bits = 1; bits <= MAX_BITS; bits++) {

  0000c	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _bits$[ebp], 1
  00013	eb 09		 jmp	 SHORT $LN7@gen_codes
$LN6@gen_codes:
  00015	8b 4d f4	 mov	 ecx, DWORD PTR _bits$[ebp]
  00018	83 c1 01	 add	 ecx, 1
  0001b	89 4d f4	 mov	 DWORD PTR _bits$[ebp], ecx
$LN7@gen_codes:
  0001e	83 7d f4 0f	 cmp	 DWORD PTR _bits$[ebp], 15 ; 0000000fH
  00022	7f 25		 jg	 SHORT $LN5@gen_codes

; 595  :         next_code[bits] = code = (code + bl_count[bits-1]) << 1;

  00024	0f b7 55 f8	 movzx	 edx, WORD PTR _code$[ebp]
  00028	8b 45 f4	 mov	 eax, DWORD PTR _bits$[ebp]
  0002b	8b 4d 10	 mov	 ecx, DWORD PTR _bl_count$[ebp]
  0002e	0f b7 44 41 fe	 movzx	 eax, WORD PTR [ecx+eax*2-2]
  00033	03 d0		 add	 edx, eax
  00035	d1 e2		 shl	 edx, 1
  00037	66 89 55 f8	 mov	 WORD PTR _code$[ebp], dx
  0003b	8b 4d f4	 mov	 ecx, DWORD PTR _bits$[ebp]
  0003e	66 8b 55 f8	 mov	 dx, WORD PTR _code$[ebp]
  00042	66 89 54 4d d4	 mov	 WORD PTR _next_code$[ebp+ecx*2], dx

; 596  :     }

  00047	eb cc		 jmp	 SHORT $LN6@gen_codes
$LN5@gen_codes:

; 597  :     /* Check that the bit counts in bl_count are consistent. The last code
; 598  :      * must be all ones.
; 599  :      */
; 600  :     Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
; 601  :             "inconsistent bit counts");
; 602  :     Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
; 603  : 
; 604  :     for (n = 0;  n <= max_code; n++) {

  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00050	eb 09		 jmp	 SHORT $LN4@gen_codes
$LN3@gen_codes:
  00052	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00055	83 c0 01	 add	 eax, 1
  00058	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
$LN4@gen_codes:
  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  0005e	3b 4d 0c	 cmp	 ecx, DWORD PTR _max_code$[ebp]
  00061	7f 51		 jg	 SHORT $LN8@gen_codes

; 605  :         int len = tree[n].Len;

  00063	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp]
  00066	8b 45 08	 mov	 eax, DWORD PTR _tree$[ebp]
  00069	0f b7 4c 90 02	 movzx	 ecx, WORD PTR [eax+edx*4+2]
  0006e	89 4d d0	 mov	 DWORD PTR _len$77760[ebp], ecx

; 606  :         if (len == 0) continue;

  00071	83 7d d0 00	 cmp	 DWORD PTR _len$77760[ebp], 0
  00075	75 02		 jne	 SHORT $LN1@gen_codes
  00077	eb d9		 jmp	 SHORT $LN3@gen_codes
$LN1@gen_codes:

; 607  :         /* Now reverse the bits */
; 608  :         tree[n].Code = bi_reverse(next_code[len]++, len);

  00079	8b 55 d0	 mov	 edx, DWORD PTR _len$77760[ebp]
  0007c	0f b7 44 55 d4	 movzx	 eax, WORD PTR _next_code$[ebp+edx*2]
  00081	89 45 cc	 mov	 DWORD PTR tv95[ebp], eax
  00084	8b 4d d0	 mov	 ecx, DWORD PTR _len$77760[ebp]
  00087	66 8b 54 4d d4	 mov	 dx, WORD PTR _next_code$[ebp+ecx*2]
  0008c	66 83 c2 01	 add	 dx, 1
  00090	8b 45 d0	 mov	 eax, DWORD PTR _len$77760[ebp]
  00093	66 89 54 45 d4	 mov	 WORD PTR _next_code$[ebp+eax*2], dx
  00098	8b 4d d0	 mov	 ecx, DWORD PTR _len$77760[ebp]
  0009b	51		 push	 ecx
  0009c	8b 55 cc	 mov	 edx, DWORD PTR tv95[ebp]
  0009f	52		 push	 edx
  000a0	e8 00 00 00 00	 call	 _bi_reverse
  000a5	83 c4 08	 add	 esp, 8
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  000ab	8b 55 08	 mov	 edx, DWORD PTR _tree$[ebp]
  000ae	66 89 04 8a	 mov	 WORD PTR [edx+ecx*4], ax

; 609  : 
; 610  :         Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
; 611  :              n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
; 612  :     }

  000b2	eb 9e		 jmp	 SHORT $LN3@gen_codes
$LN8@gen_codes:

; 613  : }

  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
_gen_codes ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _gen_bitlen
_TEXT	SEGMENT
_stree$ = -52						; size = 4
_m$ = -48						; size = 4
_max_code$ = -44					; size = 4
_tree$ = -40						; size = 4
_xbits$ = -36						; size = 4
_bits$ = -32						; size = 4
_max_length$ = -28					; size = 4
_f$ = -24						; size = 2
_base$ = -20						; size = 4
_overflow$ = -16					; size = 4
_extra$ = -12						; size = 4
_n$ = -8						; size = 4
_h$ = -4						; size = 4
_s$ = 8							; size = 4
_desc$ = 12						; size = 4
_gen_bitlen PROC					; COMDAT

; 497  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 498  :     ct_data *tree        = desc->dyn_tree;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _desc$[ebp]
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	89 4d d8	 mov	 DWORD PTR _tree$[ebp], ecx

; 499  :     int max_code         = desc->max_code;

  0000e	8b 55 0c	 mov	 edx, DWORD PTR _desc$[ebp]
  00011	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00014	89 45 d4	 mov	 DWORD PTR _max_code$[ebp], eax

; 500  :     const ct_data *stree = desc->stat_desc->static_tree;

  00017	8b 4d 0c	 mov	 ecx, DWORD PTR _desc$[ebp]
  0001a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0001d	8b 02		 mov	 eax, DWORD PTR [edx]
  0001f	89 45 cc	 mov	 DWORD PTR _stree$[ebp], eax

; 501  :     const intf *extra    = desc->stat_desc->extra_bits;

  00022	8b 4d 0c	 mov	 ecx, DWORD PTR _desc$[ebp]
  00025	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00028	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002b	89 45 f4	 mov	 DWORD PTR _extra$[ebp], eax

; 502  :     int base             = desc->stat_desc->extra_base;

  0002e	8b 4d 0c	 mov	 ecx, DWORD PTR _desc$[ebp]
  00031	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00034	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00037	89 45 ec	 mov	 DWORD PTR _base$[ebp], eax

; 503  :     int max_length       = desc->stat_desc->max_length;

  0003a	8b 4d 0c	 mov	 ecx, DWORD PTR _desc$[ebp]
  0003d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00040	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00043	89 45 e4	 mov	 DWORD PTR _max_length$[ebp], eax

; 504  :     int h;              /* heap index */
; 505  :     int n, m;           /* iterate over the tree elements */
; 506  :     int bits;           /* bit length */
; 507  :     int xbits;          /* extra bits */
; 508  :     ush f;              /* frequency */
; 509  :     int overflow = 0;   /* number of elements with bit length too large */

  00046	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _overflow$[ebp], 0

; 510  : 
; 511  :     for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;

  0004d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _bits$[ebp], 0
  00054	eb 09		 jmp	 SHORT $LN23@gen_bitlen
$LN22@gen_bitlen:
  00056	8b 4d e0	 mov	 ecx, DWORD PTR _bits$[ebp]
  00059	83 c1 01	 add	 ecx, 1
  0005c	89 4d e0	 mov	 DWORD PTR _bits$[ebp], ecx
$LN23@gen_bitlen:
  0005f	83 7d e0 0f	 cmp	 DWORD PTR _bits$[ebp], 15 ; 0000000fH
  00063	7f 12		 jg	 SHORT $LN21@gen_bitlen
  00065	33 d2		 xor	 edx, edx
  00067	8b 45 e0	 mov	 eax, DWORD PTR _bits$[ebp]
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0006d	66 89 94 41 3c
	0b 00 00	 mov	 WORD PTR [ecx+eax*2+2876], dx
  00075	eb df		 jmp	 SHORT $LN22@gen_bitlen
$LN21@gen_bitlen:

; 512  : 
; 513  :     /* In a first pass, compute the optimal bit lengths (which may
; 514  :      * overflow in the case of the bit length tree).
; 515  :      */
; 516  :     tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

  00077	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0007a	8b 82 54 14 00
	00		 mov	 eax, DWORD PTR [edx+5204]
  00080	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00083	8b 94 81 5c 0b
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+2908]
  0008a	33 c0		 xor	 eax, eax
  0008c	8b 4d d8	 mov	 ecx, DWORD PTR _tree$[ebp]
  0008f	66 89 44 91 02	 mov	 WORD PTR [ecx+edx*4+2], ax

; 517  : 
; 518  :     for (h = s->heap_max+1; h < HEAP_SIZE; h++) {

  00094	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00097	8b 82 54 14 00
	00		 mov	 eax, DWORD PTR [edx+5204]
  0009d	83 c0 01	 add	 eax, 1
  000a0	89 45 fc	 mov	 DWORD PTR _h$[ebp], eax
  000a3	eb 09		 jmp	 SHORT $LN20@gen_bitlen
$LN19@gen_bitlen:
  000a5	8b 4d fc	 mov	 ecx, DWORD PTR _h$[ebp]
  000a8	83 c1 01	 add	 ecx, 1
  000ab	89 4d fc	 mov	 DWORD PTR _h$[ebp], ecx
$LN20@gen_bitlen:
  000ae	81 7d fc 3d 02
	00 00		 cmp	 DWORD PTR _h$[ebp], 573	; 0000023dH
  000b5	0f 8d f6 00 00
	00		 jge	 $LN18@gen_bitlen

; 519  :         n = s->heap[h];

  000bb	8b 55 fc	 mov	 edx, DWORD PTR _h$[ebp]
  000be	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000c1	8b 8c 90 5c 0b
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+2908]
  000c8	89 4d f8	 mov	 DWORD PTR _n$[ebp], ecx

; 520  :         bits = tree[tree[n].Dad].Len + 1;

  000cb	8b 55 f8	 mov	 edx, DWORD PTR _n$[ebp]
  000ce	8b 45 d8	 mov	 eax, DWORD PTR _tree$[ebp]
  000d1	0f b7 4c 90 02	 movzx	 ecx, WORD PTR [eax+edx*4+2]
  000d6	8b 55 d8	 mov	 edx, DWORD PTR _tree$[ebp]
  000d9	0f b7 44 8a 02	 movzx	 eax, WORD PTR [edx+ecx*4+2]
  000de	83 c0 01	 add	 eax, 1
  000e1	89 45 e0	 mov	 DWORD PTR _bits$[ebp], eax

; 521  :         if (bits > max_length) bits = max_length, overflow++;

  000e4	8b 4d e0	 mov	 ecx, DWORD PTR _bits$[ebp]
  000e7	3b 4d e4	 cmp	 ecx, DWORD PTR _max_length$[ebp]
  000ea	7e 0f		 jle	 SHORT $LN17@gen_bitlen
  000ec	8b 55 e4	 mov	 edx, DWORD PTR _max_length$[ebp]
  000ef	89 55 e0	 mov	 DWORD PTR _bits$[ebp], edx
  000f2	8b 45 f0	 mov	 eax, DWORD PTR _overflow$[ebp]
  000f5	83 c0 01	 add	 eax, 1
  000f8	89 45 f0	 mov	 DWORD PTR _overflow$[ebp], eax
$LN17@gen_bitlen:

; 522  :         tree[n].Len = (ush)bits;

  000fb	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  000fe	8b 55 d8	 mov	 edx, DWORD PTR _tree$[ebp]
  00101	66 8b 45 e0	 mov	 ax, WORD PTR _bits$[ebp]
  00105	66 89 44 8a 02	 mov	 WORD PTR [edx+ecx*4+2], ax

; 523  :         /* We overwrite tree[n].Dad which is no longer needed */
; 524  : 
; 525  :         if (n > max_code) continue; /* not a leaf node */

  0010a	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  0010d	3b 4d d4	 cmp	 ecx, DWORD PTR _max_code$[ebp]
  00110	7e 02		 jle	 SHORT $LN16@gen_bitlen
  00112	eb 91		 jmp	 SHORT $LN19@gen_bitlen
$LN16@gen_bitlen:

; 526  : 
; 527  :         s->bl_count[bits]++;

  00114	8b 55 e0	 mov	 edx, DWORD PTR _bits$[ebp]
  00117	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0011a	66 8b 8c 50 3c
	0b 00 00	 mov	 cx, WORD PTR [eax+edx*2+2876]
  00122	66 83 c1 01	 add	 cx, 1
  00126	8b 55 e0	 mov	 edx, DWORD PTR _bits$[ebp]
  00129	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0012c	66 89 8c 50 3c
	0b 00 00	 mov	 WORD PTR [eax+edx*2+2876], cx

; 528  :         xbits = 0;

  00134	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _xbits$[ebp], 0

; 529  :         if (n >= base) xbits = extra[n-base];

  0013b	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  0013e	3b 4d ec	 cmp	 ecx, DWORD PTR _base$[ebp]
  00141	7c 0f		 jl	 SHORT $LN15@gen_bitlen
  00143	8b 55 f8	 mov	 edx, DWORD PTR _n$[ebp]
  00146	2b 55 ec	 sub	 edx, DWORD PTR _base$[ebp]
  00149	8b 45 f4	 mov	 eax, DWORD PTR _extra$[ebp]
  0014c	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  0014f	89 4d dc	 mov	 DWORD PTR _xbits$[ebp], ecx
$LN15@gen_bitlen:

; 530  :         f = tree[n].Freq;

  00152	8b 55 f8	 mov	 edx, DWORD PTR _n$[ebp]
  00155	8b 45 d8	 mov	 eax, DWORD PTR _tree$[ebp]
  00158	66 8b 0c 90	 mov	 cx, WORD PTR [eax+edx*4]
  0015c	66 89 4d e8	 mov	 WORD PTR _f$[ebp], cx

; 531  :         s->opt_len += (ulg)f * (bits + xbits);

  00160	0f b7 55 e8	 movzx	 edx, WORD PTR _f$[ebp]
  00164	8b 45 e0	 mov	 eax, DWORD PTR _bits$[ebp]
  00167	03 45 dc	 add	 eax, DWORD PTR _xbits$[ebp]
  0016a	0f af d0	 imul	 edx, eax
  0016d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00170	03 91 a8 16 00
	00		 add	 edx, DWORD PTR [ecx+5800]
  00176	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00179	89 90 a8 16 00
	00		 mov	 DWORD PTR [eax+5800], edx

; 532  :         if (stree) s->static_len += (ulg)f * (stree[n].Len + xbits);

  0017f	83 7d cc 00	 cmp	 DWORD PTR _stree$[ebp], 0
  00183	74 27		 je	 SHORT $LN14@gen_bitlen
  00185	0f b7 4d e8	 movzx	 ecx, WORD PTR _f$[ebp]
  00189	8b 55 f8	 mov	 edx, DWORD PTR _n$[ebp]
  0018c	8b 45 cc	 mov	 eax, DWORD PTR _stree$[ebp]
  0018f	0f b7 54 90 02	 movzx	 edx, WORD PTR [eax+edx*4+2]
  00194	03 55 dc	 add	 edx, DWORD PTR _xbits$[ebp]
  00197	0f af ca	 imul	 ecx, edx
  0019a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0019d	03 88 ac 16 00
	00		 add	 ecx, DWORD PTR [eax+5804]
  001a3	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001a6	89 8a ac 16 00
	00		 mov	 DWORD PTR [edx+5804], ecx
$LN14@gen_bitlen:

; 533  :     }

  001ac	e9 f4 fe ff ff	 jmp	 $LN19@gen_bitlen
$LN18@gen_bitlen:

; 534  :     if (overflow == 0) return;

  001b1	83 7d f0 00	 cmp	 DWORD PTR _overflow$[ebp], 0
  001b5	75 05		 jne	 SHORT $LN12@gen_bitlen
  001b7	e9 4e 01 00 00	 jmp	 $LN24@gen_bitlen
$LN12@gen_bitlen:

; 535  : 
; 536  :     Trace((stderr,"\nbit length overflow\n"));
; 537  :     /* This happens for example on obj2 and pic of the Calgary corpus */
; 538  : 
; 539  :     /* Find the first bit length which could increase: */
; 540  :     do {
; 541  :         bits = max_length-1;

  001bc	8b 45 e4	 mov	 eax, DWORD PTR _max_length$[ebp]
  001bf	83 e8 01	 sub	 eax, 1
  001c2	89 45 e0	 mov	 DWORD PTR _bits$[ebp], eax
$LN9@gen_bitlen:

; 542  :         while (s->bl_count[bits] == 0) bits--;

  001c5	8b 4d e0	 mov	 ecx, DWORD PTR _bits$[ebp]
  001c8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001cb	0f b7 84 4a 3c
	0b 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+2876]
  001d3	85 c0		 test	 eax, eax
  001d5	75 0b		 jne	 SHORT $LN8@gen_bitlen
  001d7	8b 4d e0	 mov	 ecx, DWORD PTR _bits$[ebp]
  001da	83 e9 01	 sub	 ecx, 1
  001dd	89 4d e0	 mov	 DWORD PTR _bits$[ebp], ecx
  001e0	eb e3		 jmp	 SHORT $LN9@gen_bitlen
$LN8@gen_bitlen:

; 543  :         s->bl_count[bits]--;      /* move one leaf down the tree */

  001e2	8b 55 e0	 mov	 edx, DWORD PTR _bits$[ebp]
  001e5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001e8	66 8b 8c 50 3c
	0b 00 00	 mov	 cx, WORD PTR [eax+edx*2+2876]
  001f0	66 83 e9 01	 sub	 cx, 1
  001f4	8b 55 e0	 mov	 edx, DWORD PTR _bits$[ebp]
  001f7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001fa	66 89 8c 50 3c
	0b 00 00	 mov	 WORD PTR [eax+edx*2+2876], cx

; 544  :         s->bl_count[bits+1] += 2; /* move one overflow item as its brother */

  00202	8b 4d e0	 mov	 ecx, DWORD PTR _bits$[ebp]
  00205	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00208	0f b7 84 4a 3e
	0b 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+2878]
  00210	83 c0 02	 add	 eax, 2
  00213	8b 4d e0	 mov	 ecx, DWORD PTR _bits$[ebp]
  00216	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00219	66 89 84 4a 3e
	0b 00 00	 mov	 WORD PTR [edx+ecx*2+2878], ax

; 545  :         s->bl_count[max_length]--;

  00221	8b 45 e4	 mov	 eax, DWORD PTR _max_length$[ebp]
  00224	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00227	66 8b 94 41 3c
	0b 00 00	 mov	 dx, WORD PTR [ecx+eax*2+2876]
  0022f	66 83 ea 01	 sub	 dx, 1
  00233	8b 45 e4	 mov	 eax, DWORD PTR _max_length$[ebp]
  00236	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00239	66 89 94 41 3c
	0b 00 00	 mov	 WORD PTR [ecx+eax*2+2876], dx

; 546  :         /* The brother of the overflow item also moves one step up,
; 547  :          * but this does not affect bl_count[max_length]
; 548  :          */
; 549  :         overflow -= 2;

  00241	8b 55 f0	 mov	 edx, DWORD PTR _overflow$[ebp]
  00244	83 ea 02	 sub	 edx, 2
  00247	89 55 f0	 mov	 DWORD PTR _overflow$[ebp], edx

; 550  :     } while (overflow > 0);

  0024a	83 7d f0 00	 cmp	 DWORD PTR _overflow$[ebp], 0
  0024e	0f 8f 68 ff ff
	ff		 jg	 $LN12@gen_bitlen

; 551  : 
; 552  :     /* Now recompute all bit lengths, scanning in increasing frequency.
; 553  :      * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
; 554  :      * lengths instead of fixing only the wrong ones. This idea is taken
; 555  :      * from 'ar' written by Haruhiko Okumura.)
; 556  :      */
; 557  :     for (bits = max_length; bits != 0; bits--) {

  00254	8b 45 e4	 mov	 eax, DWORD PTR _max_length$[ebp]
  00257	89 45 e0	 mov	 DWORD PTR _bits$[ebp], eax
  0025a	eb 09		 jmp	 SHORT $LN7@gen_bitlen
$LN6@gen_bitlen:
  0025c	8b 4d e0	 mov	 ecx, DWORD PTR _bits$[ebp]
  0025f	83 e9 01	 sub	 ecx, 1
  00262	89 4d e0	 mov	 DWORD PTR _bits$[ebp], ecx
$LN7@gen_bitlen:
  00265	83 7d e0 00	 cmp	 DWORD PTR _bits$[ebp], 0
  00269	0f 84 9b 00 00
	00		 je	 $LN24@gen_bitlen

; 558  :         n = s->bl_count[bits];

  0026f	8b 55 e0	 mov	 edx, DWORD PTR _bits$[ebp]
  00272	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00275	0f b7 8c 50 3c
	0b 00 00	 movzx	 ecx, WORD PTR [eax+edx*2+2876]
  0027d	89 4d f8	 mov	 DWORD PTR _n$[ebp], ecx
$LN4@gen_bitlen:

; 559  :         while (n != 0) {

  00280	83 7d f8 00	 cmp	 DWORD PTR _n$[ebp], 0
  00284	74 7f		 je	 SHORT $LN3@gen_bitlen

; 560  :             m = s->heap[--h];

  00286	8b 55 fc	 mov	 edx, DWORD PTR _h$[ebp]
  00289	83 ea 01	 sub	 edx, 1
  0028c	89 55 fc	 mov	 DWORD PTR _h$[ebp], edx
  0028f	8b 45 fc	 mov	 eax, DWORD PTR _h$[ebp]
  00292	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00295	8b 94 81 5c 0b
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+2908]
  0029c	89 55 d0	 mov	 DWORD PTR _m$[ebp], edx

; 561  :             if (m > max_code) continue;

  0029f	8b 45 d0	 mov	 eax, DWORD PTR _m$[ebp]
  002a2	3b 45 d4	 cmp	 eax, DWORD PTR _max_code$[ebp]
  002a5	7e 02		 jle	 SHORT $LN2@gen_bitlen
  002a7	eb d7		 jmp	 SHORT $LN4@gen_bitlen
$LN2@gen_bitlen:

; 562  :             if ((unsigned) tree[m].Len != (unsigned) bits) {

  002a9	8b 4d d0	 mov	 ecx, DWORD PTR _m$[ebp]
  002ac	8b 55 d8	 mov	 edx, DWORD PTR _tree$[ebp]
  002af	0f b7 44 8a 02	 movzx	 eax, WORD PTR [edx+ecx*4+2]
  002b4	3b 45 e0	 cmp	 eax, DWORD PTR _bits$[ebp]
  002b7	74 3e		 je	 SHORT $LN1@gen_bitlen

; 563  :                 Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
; 564  :                 s->opt_len += ((long)bits - (long)tree[m].Len)
; 565  :                               *(long)tree[m].Freq;

  002b9	8b 4d d0	 mov	 ecx, DWORD PTR _m$[ebp]
  002bc	8b 55 d8	 mov	 edx, DWORD PTR _tree$[ebp]
  002bf	0f b7 44 8a 02	 movzx	 eax, WORD PTR [edx+ecx*4+2]
  002c4	8b 4d e0	 mov	 ecx, DWORD PTR _bits$[ebp]
  002c7	2b c8		 sub	 ecx, eax
  002c9	8b 55 d0	 mov	 edx, DWORD PTR _m$[ebp]
  002cc	8b 45 d8	 mov	 eax, DWORD PTR _tree$[ebp]
  002cf	0f b7 14 90	 movzx	 edx, WORD PTR [eax+edx*4]
  002d3	0f af ca	 imul	 ecx, edx
  002d6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002d9	03 88 a8 16 00
	00		 add	 ecx, DWORD PTR [eax+5800]
  002df	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002e2	89 8a a8 16 00
	00		 mov	 DWORD PTR [edx+5800], ecx

; 566  :                 tree[m].Len = (ush)bits;

  002e8	8b 45 d0	 mov	 eax, DWORD PTR _m$[ebp]
  002eb	8b 4d d8	 mov	 ecx, DWORD PTR _tree$[ebp]
  002ee	66 8b 55 e0	 mov	 dx, WORD PTR _bits$[ebp]
  002f2	66 89 54 81 02	 mov	 WORD PTR [ecx+eax*4+2], dx
$LN1@gen_bitlen:

; 567  :             }
; 568  :             n--;

  002f7	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  002fa	83 e8 01	 sub	 eax, 1
  002fd	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax

; 569  :         }

  00300	e9 7b ff ff ff	 jmp	 $LN4@gen_bitlen
$LN3@gen_bitlen:

; 570  :     }

  00305	e9 52 ff ff ff	 jmp	 $LN6@gen_bitlen
$LN24@gen_bitlen:

; 571  : }

  0030a	8b e5		 mov	 esp, ebp
  0030c	5d		 pop	 ebp
  0030d	c3		 ret	 0
_gen_bitlen ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _pqdownheap
_TEXT	SEGMENT
_j$ = -8						; size = 4
_v$ = -4						; size = 4
_s$ = 8							; size = 4
_tree$ = 12						; size = 4
_k$ = 16						; size = 4
_pqdownheap PROC					; COMDAT

; 463  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 464  :     int v = s->heap[k];

  00007	8b 45 10	 mov	 eax, DWORD PTR _k$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0000d	8b 94 81 5c 0b
	00 00		 mov	 edx, DWORD PTR [ecx+eax*4+2908]
  00014	89 55 fc	 mov	 DWORD PTR _v$[ebp], edx

; 465  :     int j = k << 1;  /* left son of k */

  00017	8b 45 10	 mov	 eax, DWORD PTR _k$[ebp]
  0001a	d1 e0		 shl	 eax, 1
  0001c	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax
$LN6@pqdownheap:

; 466  :     while (j <= s->heap_len) {

  0001f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00022	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  00025	3b 91 50 14 00
	00		 cmp	 edx, DWORD PTR [ecx+5200]
  0002b	0f 8f 43 01 00
	00		 jg	 $LN5@pqdownheap

; 467  :         /* Set j to the smallest of the two sons: */
; 468  :         if (j < s->heap_len &&
; 469  :             smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {

  00031	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00034	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00037	3b 88 50 14 00
	00		 cmp	 ecx, DWORD PTR [eax+5200]
  0003d	0f 8d 95 00 00
	00		 jge	 $LN4@pqdownheap
  00043	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  00046	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00049	8b 8c 90 60 0b
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+2912]
  00050	8b 55 0c	 mov	 edx, DWORD PTR _tree$[ebp]
  00053	0f b7 04 8a	 movzx	 eax, WORD PTR [edx+ecx*4]
  00057	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0005a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0005d	8b 8c 8a 5c 0b
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+2908]
  00064	8b 55 0c	 mov	 edx, DWORD PTR _tree$[ebp]
  00067	0f b7 0c 8a	 movzx	 ecx, WORD PTR [edx+ecx*4]
  0006b	3b c1		 cmp	 eax, ecx
  0006d	7c 60		 jl	 SHORT $LN3@pqdownheap
  0006f	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  00072	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00075	8b 8c 90 60 0b
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+2912]
  0007c	8b 55 0c	 mov	 edx, DWORD PTR _tree$[ebp]
  0007f	0f b7 04 8a	 movzx	 eax, WORD PTR [edx+ecx*4]
  00083	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00086	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00089	8b 8c 8a 5c 0b
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+2908]
  00090	8b 55 0c	 mov	 edx, DWORD PTR _tree$[ebp]
  00093	0f b7 0c 8a	 movzx	 ecx, WORD PTR [edx+ecx*4]
  00097	3b c1		 cmp	 eax, ecx
  00099	75 3d		 jne	 SHORT $LN4@pqdownheap
  0009b	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  0009e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000a1	8b 8c 90 60 0b
	00 00		 mov	 ecx, DWORD PTR [eax+edx*4+2912]
  000a8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ab	0f b6 84 0a 58
	14 00 00	 movzx	 eax, BYTE PTR [edx+ecx+5208]
  000b3	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  000b6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000b9	8b 8c 8a 5c 0b
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+2908]
  000c0	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000c3	0f b6 8c 0a 58
	14 00 00	 movzx	 ecx, BYTE PTR [edx+ecx+5208]
  000cb	3b c1		 cmp	 eax, ecx
  000cd	7f 09		 jg	 SHORT $LN4@pqdownheap
$LN3@pqdownheap:

; 470  :             j++;

  000cf	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  000d2	83 c2 01	 add	 edx, 1
  000d5	89 55 f8	 mov	 DWORD PTR _j$[ebp], edx
$LN4@pqdownheap:

; 471  :         }
; 472  :         /* Exit if v is smaller than both sons */
; 473  :         if (smaller(tree, v, s->heap[j], s->depth)) break;

  000d8	8b 45 fc	 mov	 eax, DWORD PTR _v$[ebp]
  000db	8b 4d 0c	 mov	 ecx, DWORD PTR _tree$[ebp]
  000de	0f b7 14 81	 movzx	 edx, WORD PTR [ecx+eax*4]
  000e2	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  000e5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000e8	8b 84 81 5c 0b
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+2908]
  000ef	8b 4d 0c	 mov	 ecx, DWORD PTR _tree$[ebp]
  000f2	0f b7 04 81	 movzx	 eax, WORD PTR [ecx+eax*4]
  000f6	3b d0		 cmp	 edx, eax
  000f8	7c 4b		 jl	 SHORT $LN1@pqdownheap
  000fa	8b 4d fc	 mov	 ecx, DWORD PTR _v$[ebp]
  000fd	8b 55 0c	 mov	 edx, DWORD PTR _tree$[ebp]
  00100	0f b7 04 8a	 movzx	 eax, WORD PTR [edx+ecx*4]
  00104	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00107	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0010a	8b 8c 8a 5c 0b
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+2908]
  00111	8b 55 0c	 mov	 edx, DWORD PTR _tree$[ebp]
  00114	0f b7 0c 8a	 movzx	 ecx, WORD PTR [edx+ecx*4]
  00118	3b c1		 cmp	 eax, ecx
  0011a	75 2b		 jne	 SHORT $LN2@pqdownheap
  0011c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0011f	03 55 fc	 add	 edx, DWORD PTR _v$[ebp]
  00122	0f b6 82 58 14
	00 00		 movzx	 eax, BYTE PTR [edx+5208]
  00129	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  0012c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0012f	8b 8c 8a 5c 0b
	00 00		 mov	 ecx, DWORD PTR [edx+ecx*4+2908]
  00136	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00139	0f b6 8c 0a 58
	14 00 00	 movzx	 ecx, BYTE PTR [edx+ecx+5208]
  00141	3b c1		 cmp	 eax, ecx
  00143	7f 02		 jg	 SHORT $LN2@pqdownheap
$LN1@pqdownheap:
  00145	eb 2d		 jmp	 SHORT $LN5@pqdownheap
$LN2@pqdownheap:

; 474  : 
; 475  :         /* Exchange v with the smallest son */
; 476  :         s->heap[k] = s->heap[j];  k = j;

  00147	8b 55 10	 mov	 edx, DWORD PTR _k$[ebp]
  0014a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0014d	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00150	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  00153	8b 8c 8e 5c 0b
	00 00		 mov	 ecx, DWORD PTR [esi+ecx*4+2908]
  0015a	89 8c 90 5c 0b
	00 00		 mov	 DWORD PTR [eax+edx*4+2908], ecx
  00161	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  00164	89 55 10	 mov	 DWORD PTR _k$[ebp], edx

; 477  : 
; 478  :         /* And continue down the tree, setting j to the left son of k */
; 479  :         j <<= 1;

  00167	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  0016a	d1 e0		 shl	 eax, 1
  0016c	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax

; 480  :     }

  0016f	e9 ab fe ff ff	 jmp	 $LN6@pqdownheap
$LN5@pqdownheap:

; 481  :     s->heap[k] = v;

  00174	8b 4d 10	 mov	 ecx, DWORD PTR _k$[ebp]
  00177	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0017a	8b 45 fc	 mov	 eax, DWORD PTR _v$[ebp]
  0017d	89 84 8a 5c 0b
	00 00		 mov	 DWORD PTR [edx+ecx*4+2908], eax

; 482  : }

  00184	5e		 pop	 esi
  00185	8b e5		 mov	 esp, ebp
  00187	5d		 pop	 ebp
  00188	c3		 ret	 0
_pqdownheap ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _init_block
_TEXT	SEGMENT
_n$ = -4						; size = 4
_s$ = 8							; size = 4
_init_block PROC					; COMDAT

; 417  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 418  :     int n; /* iterates over tree elements */
; 419  : 
; 420  :     /* Initialize the trees. */
; 421  :     for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  0000b	eb 09		 jmp	 SHORT $LN9@init_block
$LN8@init_block:
  0000d	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  00010	83 c0 01	 add	 eax, 1
  00013	89 45 fc	 mov	 DWORD PTR _n$[ebp], eax
$LN9@init_block:
  00016	81 7d fc 1e 01
	00 00		 cmp	 DWORD PTR _n$[ebp], 286	; 0000011eH
  0001d	7d 12		 jge	 SHORT $LN7@init_block
  0001f	33 c9		 xor	 ecx, ecx
  00021	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp]
  00024	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00027	66 89 8c 90 94
	00 00 00	 mov	 WORD PTR [eax+edx*4+148], cx
  0002f	eb dc		 jmp	 SHORT $LN8@init_block
$LN7@init_block:

; 422  :     for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;

  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00038	eb 09		 jmp	 SHORT $LN6@init_block
$LN5@init_block:
  0003a	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  0003d	83 c1 01	 add	 ecx, 1
  00040	89 4d fc	 mov	 DWORD PTR _n$[ebp], ecx
$LN6@init_block:
  00043	83 7d fc 1e	 cmp	 DWORD PTR _n$[ebp], 30	; 0000001eH
  00047	7d 12		 jge	 SHORT $LN4@init_block
  00049	33 d2		 xor	 edx, edx
  0004b	8b 45 fc	 mov	 eax, DWORD PTR _n$[ebp]
  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00051	66 89 94 81 88
	09 00 00	 mov	 WORD PTR [ecx+eax*4+2440], dx
  00059	eb df		 jmp	 SHORT $LN5@init_block
$LN4@init_block:

; 423  :     for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;

  0005b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  00062	eb 09		 jmp	 SHORT $LN3@init_block
$LN2@init_block:
  00064	8b 55 fc	 mov	 edx, DWORD PTR _n$[ebp]
  00067	83 c2 01	 add	 edx, 1
  0006a	89 55 fc	 mov	 DWORD PTR _n$[ebp], edx
$LN3@init_block:
  0006d	83 7d fc 13	 cmp	 DWORD PTR _n$[ebp], 19	; 00000013H
  00071	7d 12		 jge	 SHORT $LN1@init_block
  00073	33 c0		 xor	 eax, eax
  00075	8b 4d fc	 mov	 ecx, DWORD PTR _n$[ebp]
  00078	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0007b	66 89 84 8a 7c
	0a 00 00	 mov	 WORD PTR [edx+ecx*4+2684], ax
  00083	eb df		 jmp	 SHORT $LN2@init_block
$LN1@init_block:

; 424  : 
; 425  :     s->dyn_ltree[END_BLOCK].Freq = 1;

  00085	b8 01 00 00 00	 mov	 eax, 1
  0008a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0008d	66 89 81 94 04
	00 00		 mov	 WORD PTR [ecx+1172], ax

; 426  :     s->opt_len = s->static_len = 0L;

  00094	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00097	c7 82 ac 16 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+5804], 0
  000a1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000a4	c7 80 a8 16 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+5800], 0

; 427  :     s->last_lit = s->matches = 0;

  000ae	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000b1	c7 81 b0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+5808], 0
  000bb	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000be	c7 82 a0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+5792], 0

; 428  : }

  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c3		 ret	 0
_init_block ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _tr_static_init
_TEXT	SEGMENT
_tr_static_init PROC					; COMDAT

; 240  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 241  : #if defined(GEN_TREES_H) || !defined(STDC)
; 242  :     static int static_init_done = 0;
; 243  :     int n;        /* iterates over tree elements */
; 244  :     int bits;     /* bit counter */
; 245  :     int length;   /* length value */
; 246  :     int code;     /* code value */
; 247  :     int dist;     /* distance index */
; 248  :     ush bl_count[MAX_BITS+1];
; 249  :     /* number of codes at each bit length for an optimal tree */
; 250  : 
; 251  :     if (static_init_done) return;
; 252  : 
; 253  :     /* For some embedded targets, global variables are not initialized: */
; 254  : #ifdef NO_INIT_GLOBAL_POINTERS
; 255  :     static_l_desc.static_tree = static_ltree;
; 256  :     static_l_desc.extra_bits = extra_lbits;
; 257  :     static_d_desc.static_tree = static_dtree;
; 258  :     static_d_desc.extra_bits = extra_dbits;
; 259  :     static_bl_desc.extra_bits = extra_blbits;
; 260  : #endif
; 261  : 
; 262  :     /* Initialize the mapping length (0..255) -> length code (0..28) */
; 263  :     length = 0;
; 264  :     for (code = 0; code < LENGTH_CODES-1; code++) {
; 265  :         base_length[code] = length;
; 266  :         for (n = 0; n < (1<<extra_lbits[code]); n++) {
; 267  :             _length_code[length++] = (uch)code;
; 268  :         }
; 269  :     }
; 270  :     Assert (length == 256, "tr_static_init: length != 256");
; 271  :     /* Note that the length 255 (match length 258) can be represented
; 272  :      * in two different ways: code 284 + 5 bits or code 285, so we
; 273  :      * overwrite length_code[255] to use the best encoding:
; 274  :      */
; 275  :     _length_code[length-1] = (uch)code;
; 276  : 
; 277  :     /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
; 278  :     dist = 0;
; 279  :     for (code = 0 ; code < 16; code++) {
; 280  :         base_dist[code] = dist;
; 281  :         for (n = 0; n < (1<<extra_dbits[code]); n++) {
; 282  :             _dist_code[dist++] = (uch)code;
; 283  :         }
; 284  :     }
; 285  :     Assert (dist == 256, "tr_static_init: dist != 256");
; 286  :     dist >>= 7; /* from now on, all distances are divided by 128 */
; 287  :     for ( ; code < D_CODES; code++) {
; 288  :         base_dist[code] = dist << 7;
; 289  :         for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {
; 290  :             _dist_code[256 + dist++] = (uch)code;
; 291  :         }
; 292  :     }
; 293  :     Assert (dist == 256, "tr_static_init: 256+dist != 512");
; 294  : 
; 295  :     /* Construct the codes of the static literal tree */
; 296  :     for (bits = 0; bits <= MAX_BITS; bits++) bl_count[bits] = 0;
; 297  :     n = 0;
; 298  :     while (n <= 143) static_ltree[n++].Len = 8, bl_count[8]++;
; 299  :     while (n <= 255) static_ltree[n++].Len = 9, bl_count[9]++;
; 300  :     while (n <= 279) static_ltree[n++].Len = 7, bl_count[7]++;
; 301  :     while (n <= 287) static_ltree[n++].Len = 8, bl_count[8]++;
; 302  :     /* Codes 286 and 287 do not exist, but we must include them in the
; 303  :      * tree construction to get a canonical Huffman tree (longest code
; 304  :      * all ones)
; 305  :      */
; 306  :     gen_codes((ct_data *)static_ltree, L_CODES+1, bl_count);
; 307  : 
; 308  :     /* The static distance tree is trivial: */
; 309  :     for (n = 0; n < D_CODES; n++) {
; 310  :         static_dtree[n].Len = 5;
; 311  :         static_dtree[n].Code = bi_reverse((unsigned)n, 5);
; 312  :     }
; 313  :     static_init_done = 1;
; 314  : 
; 315  : #  ifdef GEN_TREES_H
; 316  :     gen_trees_header();
; 317  : #  endif
; 318  : #endif /* defined(GEN_TREES_H) || !defined(STDC) */
; 319  : }

  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
_tr_static_init ENDP
; Function compile flags: /Odtp
;	COMDAT _copy_block
_TEXT	SEGMENT
_s$ = 8							; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_header$ = 20						; size = 4
_copy_block PROC					; COMDAT

; 1227 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1228 :     bi_windup(s);        /* align on byte boundary */

  00003	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 _bi_windup
  0000c	83 c4 04	 add	 esp, 4

; 1229 :     s->last_eob_len = 8; /* enough lookahead for inflate */

  0000f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00012	c7 81 b4 16 00
	00 08 00 00 00	 mov	 DWORD PTR [ecx+5812], 8

; 1230 : 
; 1231 :     if (header) {

  0001c	83 7d 14 00	 cmp	 DWORD PTR _header$[ebp], 0
  00020	0f 84 a2 00 00
	00		 je	 $LN2@copy_block

; 1232 :         put_short(s, (ush)len);

  00026	0f b7 55 10	 movzx	 edx, WORD PTR _len$[ebp]
  0002a	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00030	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00033	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00036	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00039	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0003c	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00042	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00045	83 c2 01	 add	 edx, 1
  00048	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0004b	89 50 14	 mov	 DWORD PTR [eax+20], edx
  0004e	0f b7 4d 10	 movzx	 ecx, WORD PTR _len$[ebp]
  00052	c1 f9 08	 sar	 ecx, 8
  00055	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00058	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0005b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0005e	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00061	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00064	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00067	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0006a	83 c1 01	 add	 ecx, 1
  0006d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00070	89 4a 14	 mov	 DWORD PTR [edx+20], ecx

; 1233 :         put_short(s, (ush)~len);

  00073	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  00076	f7 d0		 not	 eax
  00078	0f b7 c8	 movzx	 ecx, ax
  0007b	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00081	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00084	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00087	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0008a	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  0008d	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00090	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00093	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00096	83 c1 01	 add	 ecx, 1
  00099	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0009c	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  0009f	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  000a2	f7 d0		 not	 eax
  000a4	0f b7 c8	 movzx	 ecx, ax
  000a7	c1 f9 08	 sar	 ecx, 8
  000aa	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ad	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000b0	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000b3	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  000b6	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  000b9	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000bc	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000bf	83 c1 01	 add	 ecx, 1
  000c2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000c5	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
$LN2@copy_block:

; 1234 : #ifdef DEBUG
; 1235 :         s->bits_sent += 2*16;
; 1236 : #endif
; 1237 :     }
; 1238 : #ifdef DEBUG
; 1239 :     s->bits_sent += (ulg)len<<3;
; 1240 : #endif
; 1241 :     while (len--) {

  000c8	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  000cb	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  000ce	83 e9 01	 sub	 ecx, 1
  000d1	89 4d 10	 mov	 DWORD PTR _len$[ebp], ecx
  000d4	85 c0		 test	 eax, eax
  000d6	74 2e		 je	 SHORT $LN4@copy_block

; 1242 :         put_byte(s, *buf++);

  000d8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000db	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000de	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000e1	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000e4	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  000e7	8a 09		 mov	 cl, BYTE PTR [ecx]
  000e9	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  000ec	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ef	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000f2	83 c0 01	 add	 eax, 1
  000f5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000f8	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  000fb	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  000fe	83 c2 01	 add	 edx, 1
  00101	89 55 0c	 mov	 DWORD PTR _buf$[ebp], edx

; 1243 :     }

  00104	eb c2		 jmp	 SHORT $LN2@copy_block
$LN4@copy_block:

; 1244 : }

  00106	5d		 pop	 ebp
  00107	c3		 ret	 0
_copy_block ENDP
_TEXT	ENDS
PUBLIC	__tr_stored_block
; Function compile flags: /Odtp
;	COMDAT __tr_stored_block
_TEXT	SEGMENT
_val$78055 = -8						; size = 4
_len$78051 = -4						; size = 4
_s$ = 8							; size = 4
_buf$ = 12						; size = 4
_stored_len$ = 16					; size = 4
_last$ = 20						; size = 4
__tr_stored_block PROC					; COMDAT

; 876  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 877  :     send_bits(s, (STORED_BLOCK<<1)+last, 3);    /* send block type */

  00006	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR _len$78051[ebp], 3
  0000d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00012	2b 45 fc	 sub	 eax, DWORD PTR _len$78051[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00018	39 81 bc 16 00
	00		 cmp	 DWORD PTR [ecx+5820], eax
  0001e	0f 8e bf 00 00
	00		 jle	 $LN2@tr_stored_
  00024	8b 55 14	 mov	 edx, DWORD PTR _last$[ebp]
  00027	89 55 f8	 mov	 DWORD PTR _val$78055[ebp], edx
  0002a	0f b7 45 f8	 movzx	 eax, WORD PTR _val$78055[ebp]
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00031	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  00037	d3 e0		 shl	 eax, cl
  00039	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0003c	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  00043	0b c8		 or	 ecx, eax
  00045	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00048	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  0004f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00052	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00059	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  0005f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00062	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00065	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00068	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  0006b	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  0006e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00071	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00074	83 c1 01	 add	 ecx, 1
  00077	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0007a	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  0007d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00080	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  00087	c1 f9 08	 sar	 ecx, 8
  0008a	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0008d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00090	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00093	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00096	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00099	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0009c	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0009f	83 c1 01	 add	 ecx, 1
  000a2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000a5	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  000a8	0f b7 45 f8	 movzx	 eax, WORD PTR _val$78055[ebp]
  000ac	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000af	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000b4	2b 91 bc 16 00
	00		 sub	 edx, DWORD PTR [ecx+5820]
  000ba	8b ca		 mov	 ecx, edx
  000bc	d3 f8		 sar	 eax, cl
  000be	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000c1	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  000c8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000cb	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  000d1	8b 4d fc	 mov	 ecx, DWORD PTR _len$78051[ebp]
  000d4	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  000d8	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000db	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  000e1	eb 3a		 jmp	 SHORT $LN1@tr_stored_
$LN2@tr_stored_:
  000e3	0f b7 55 14	 movzx	 edx, WORD PTR _last$[ebp]
  000e7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000ea	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  000f0	d3 e2		 shl	 edx, cl
  000f2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000f5	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  000fc	0b c2		 or	 eax, edx
  000fe	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00101	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00108	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0010b	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00111	03 45 fc	 add	 eax, DWORD PTR _len$78051[ebp]
  00114	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00117	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN1@tr_stored_:

; 878  : #ifdef DEBUG
; 879  :     s->compressed_len = (s->compressed_len + 3 + 7) & (ulg)~7L;
; 880  :     s->compressed_len += (stored_len + 4) << 3;
; 881  : #endif
; 882  :     copy_block(s, buf, (unsigned)stored_len, 1); /* with header */

  0011d	6a 01		 push	 1
  0011f	8b 55 10	 mov	 edx, DWORD PTR _stored_len$[ebp]
  00122	52		 push	 edx
  00123	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  00126	50		 push	 eax
  00127	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0012a	51		 push	 ecx
  0012b	e8 00 00 00 00	 call	 _copy_block
  00130	83 c4 10	 add	 esp, 16			; 00000010H

; 883  : }

  00133	8b e5		 mov	 esp, ebp
  00135	5d		 pop	 ebp
  00136	c3		 ret	 0
__tr_stored_block ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _send_all_trees
_TEXT	SEGMENT
_val$78033 = -36					; size = 4
_len$78029 = -32					; size = 4
_val$78016 = -28					; size = 4
_len$78012 = -24					; size = 4
_val$78002 = -20					; size = 4
_len$77998 = -16					; size = 4
_val$77988 = -12					; size = 4
_len$77984 = -8						; size = 4
_rank$ = -4						; size = 4
_s$ = 8							; size = 4
_lcodes$ = 12						; size = 4
_dcodes$ = 16						; size = 4
_blcodes$ = 20						; size = 4
_send_all_trees PROC					; COMDAT

; 845  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 846  :     int rank;                    /* index in bl_order */
; 847  : 
; 848  :     Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
; 849  :     Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
; 850  :             "too many codes");
; 851  :     Tracev((stderr, "\nbl counts: "));
; 852  :     send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */

  00006	c7 45 f8 05 00
	00 00		 mov	 DWORD PTR _len$77984[ebp], 5
  0000d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00012	2b 45 f8	 sub	 eax, DWORD PTR _len$77984[ebp]
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00018	39 81 bc 16 00
	00		 cmp	 DWORD PTR [ecx+5820], eax
  0001e	0f 8e c5 00 00
	00		 jle	 $LN11@send_all_t
  00024	8b 55 0c	 mov	 edx, DWORD PTR _lcodes$[ebp]
  00027	81 ea 01 01 00
	00		 sub	 edx, 257		; 00000101H
  0002d	89 55 f4	 mov	 DWORD PTR _val$77988[ebp], edx
  00030	0f b7 45 f4	 movzx	 eax, WORD PTR _val$77988[ebp]
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00037	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  0003d	d3 e0		 shl	 eax, cl
  0003f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00042	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  00049	0b c8		 or	 ecx, eax
  0004b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0004e	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  00055	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00058	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  0005f	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00065	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00068	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0006b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0006e	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  00071	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  00074	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00077	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0007a	83 c1 01	 add	 ecx, 1
  0007d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00080	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  00083	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00086	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  0008d	c1 f9 08	 sar	 ecx, 8
  00090	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00093	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00096	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00099	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  0009c	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  0009f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000a2	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  000a5	83 c1 01	 add	 ecx, 1
  000a8	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000ab	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  000ae	0f b7 45 f4	 movzx	 eax, WORD PTR _val$77988[ebp]
  000b2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000b5	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  000ba	2b 91 bc 16 00
	00		 sub	 edx, DWORD PTR [ecx+5820]
  000c0	8b ca		 mov	 ecx, edx
  000c2	d3 f8		 sar	 eax, cl
  000c4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000c7	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  000ce	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000d1	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  000d7	8b 4d f8	 mov	 ecx, DWORD PTR _len$77984[ebp]
  000da	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  000de	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000e1	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  000e7	eb 42		 jmp	 SHORT $LN10@send_all_t
$LN11@send_all_t:
  000e9	8b 4d 0c	 mov	 ecx, DWORD PTR _lcodes$[ebp]
  000ec	81 e9 01 01 00
	00		 sub	 ecx, 257		; 00000101H
  000f2	0f b7 d1	 movzx	 edx, cx
  000f5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000f8	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  000fe	d3 e2		 shl	 edx, cl
  00100	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00103	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  0010a	0b c2		 or	 eax, edx
  0010c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0010f	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00116	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00119	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0011f	03 45 f8	 add	 eax, DWORD PTR _len$77984[ebp]
  00122	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00125	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN10@send_all_t:

; 853  :     send_bits(s, dcodes-1,   5);

  0012b	c7 45 f0 05 00
	00 00		 mov	 DWORD PTR _len$77998[ebp], 5
  00132	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00137	2b 55 f0	 sub	 edx, DWORD PTR _len$77998[ebp]
  0013a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0013d	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  00143	0f 8e bf 00 00
	00		 jle	 $LN9@send_all_t
  00149	8b 4d 10	 mov	 ecx, DWORD PTR _dcodes$[ebp]
  0014c	83 e9 01	 sub	 ecx, 1
  0014f	89 4d ec	 mov	 DWORD PTR _val$78002[ebp], ecx
  00152	0f b7 55 ec	 movzx	 edx, WORD PTR _val$78002[ebp]
  00156	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00159	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0015f	d3 e2		 shl	 edx, cl
  00161	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00164	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  0016b	0b c2		 or	 eax, edx
  0016d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00170	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00177	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0017a	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00181	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00186	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00189	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0018c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0018f	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00192	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00195	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00198	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0019b	83 c0 01	 add	 eax, 1
  0019e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001a1	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  001a4	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001a7	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  001ae	c1 f8 08	 sar	 eax, 8
  001b1	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001b4	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001b7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001ba	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  001bd	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  001c0	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001c3	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  001c6	83 c0 01	 add	 eax, 1
  001c9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001cc	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  001cf	0f b7 55 ec	 movzx	 edx, WORD PTR _val$78002[ebp]
  001d3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001d6	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  001db	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  001e1	d3 fa		 sar	 edx, cl
  001e3	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001e6	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  001ed	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001f0	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  001f6	8b 4d f0	 mov	 ecx, DWORD PTR _len$77998[ebp]
  001f9	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  001fd	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00200	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  00206	eb 3f		 jmp	 SHORT $LN8@send_all_t
$LN9@send_all_t:
  00208	8b 4d 10	 mov	 ecx, DWORD PTR _dcodes$[ebp]
  0020b	83 e9 01	 sub	 ecx, 1
  0020e	0f b7 d1	 movzx	 edx, cx
  00211	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00214	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0021a	d3 e2		 shl	 edx, cl
  0021c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0021f	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00226	0b c2		 or	 eax, edx
  00228	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0022b	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00232	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00235	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0023b	03 45 f0	 add	 eax, DWORD PTR _len$77998[ebp]
  0023e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00241	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN8@send_all_t:

; 854  :     send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */

  00247	c7 45 e8 04 00
	00 00		 mov	 DWORD PTR _len$78012[ebp], 4
  0024e	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00253	2b 55 e8	 sub	 edx, DWORD PTR _len$78012[ebp]
  00256	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00259	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  0025f	0f 8e bf 00 00
	00		 jle	 $LN7@send_all_t
  00265	8b 4d 14	 mov	 ecx, DWORD PTR _blcodes$[ebp]
  00268	83 e9 04	 sub	 ecx, 4
  0026b	89 4d e4	 mov	 DWORD PTR _val$78016[ebp], ecx
  0026e	0f b7 55 e4	 movzx	 edx, WORD PTR _val$78016[ebp]
  00272	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00275	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0027b	d3 e2		 shl	 edx, cl
  0027d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00280	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00287	0b c2		 or	 eax, edx
  00289	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0028c	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00293	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00296	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  0029d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002a2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002a5	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002a8	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002ab	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  002ae	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  002b1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002b4	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  002b7	83 c0 01	 add	 eax, 1
  002ba	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002bd	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  002c0	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002c3	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  002ca	c1 f8 08	 sar	 eax, 8
  002cd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002d0	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  002d3	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002d6	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  002d9	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  002dc	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002df	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  002e2	83 c0 01	 add	 eax, 1
  002e5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002e8	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  002eb	0f b7 55 e4	 movzx	 edx, WORD PTR _val$78016[ebp]
  002ef	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002f2	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  002f7	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  002fd	d3 fa		 sar	 edx, cl
  002ff	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00302	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00309	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0030c	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00312	8b 4d e8	 mov	 ecx, DWORD PTR _len$78012[ebp]
  00315	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00319	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0031c	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  00322	eb 3f		 jmp	 SHORT $LN6@send_all_t
$LN7@send_all_t:
  00324	8b 4d 14	 mov	 ecx, DWORD PTR _blcodes$[ebp]
  00327	83 e9 04	 sub	 ecx, 4
  0032a	0f b7 d1	 movzx	 edx, cx
  0032d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00330	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00336	d3 e2		 shl	 edx, cl
  00338	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0033b	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00342	0b c2		 or	 eax, edx
  00344	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00347	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  0034e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00351	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00357	03 45 e8	 add	 eax, DWORD PTR _len$78012[ebp]
  0035a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0035d	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN6@send_all_t:

; 855  :     for (rank = 0; rank < blcodes; rank++) {

  00363	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _rank$[ebp], 0
  0036a	eb 09		 jmp	 SHORT $LN5@send_all_t
$LN4@send_all_t:
  0036c	8b 55 fc	 mov	 edx, DWORD PTR _rank$[ebp]
  0036f	83 c2 01	 add	 edx, 1
  00372	89 55 fc	 mov	 DWORD PTR _rank$[ebp], edx
$LN5@send_all_t:
  00375	8b 45 fc	 mov	 eax, DWORD PTR _rank$[ebp]
  00378	3b 45 14	 cmp	 eax, DWORD PTR _blcodes$[ebp]
  0037b	0f 8d 3c 01 00
	00		 jge	 $LN3@send_all_t

; 856  :         Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
; 857  :         send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);

  00381	c7 45 e0 03 00
	00 00		 mov	 DWORD PTR _len$78029[ebp], 3
  00388	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0038d	2b 4d e0	 sub	 ecx, DWORD PTR _len$78029[ebp]
  00390	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00393	39 8a bc 16 00
	00		 cmp	 DWORD PTR [edx+5820], ecx
  00399	0f 8e ce 00 00
	00		 jle	 $LN2@send_all_t
  0039f	8b 45 fc	 mov	 eax, DWORD PTR _rank$[ebp]
  003a2	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR _bl_order[eax]
  003a9	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003ac	0f b7 84 8a 7e
	0a 00 00	 movzx	 eax, WORD PTR [edx+ecx*4+2686]
  003b4	89 45 dc	 mov	 DWORD PTR _val$78033[ebp], eax
  003b7	0f b7 55 dc	 movzx	 edx, WORD PTR _val$78033[ebp]
  003bb	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003be	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  003c4	d3 e2		 shl	 edx, cl
  003c6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003c9	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  003d0	0b c2		 or	 eax, edx
  003d2	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003d5	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  003dc	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003df	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  003e6	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003eb	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003ee	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  003f1	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  003f4	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  003f7	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  003fa	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003fd	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00400	83 c0 01	 add	 eax, 1
  00403	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00406	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00409	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0040c	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00413	c1 f8 08	 sar	 eax, 8
  00416	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00419	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0041c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0041f	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00422	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00425	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00428	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0042b	83 c0 01	 add	 eax, 1
  0042e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00431	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00434	0f b7 55 dc	 movzx	 edx, WORD PTR _val$78033[ebp]
  00438	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0043b	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00440	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  00446	d3 fa		 sar	 edx, cl
  00448	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0044b	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  00452	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00455	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0045b	8b 4d e0	 mov	 ecx, DWORD PTR _len$78029[ebp]
  0045e	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  00462	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00465	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  0046b	eb 4b		 jmp	 SHORT $LN1@send_all_t
$LN2@send_all_t:
  0046d	8b 4d fc	 mov	 ecx, DWORD PTR _rank$[ebp]
  00470	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR _bl_order[ecx]
  00477	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0047a	0f b7 94 90 7e
	0a 00 00	 movzx	 edx, WORD PTR [eax+edx*4+2686]
  00482	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00485	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  0048b	d3 e2		 shl	 edx, cl
  0048d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00490	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00497	0b c2		 or	 eax, edx
  00499	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0049c	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  004a3	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  004a6	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  004ac	03 45 e0	 add	 eax, DWORD PTR _len$78029[ebp]
  004af	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004b2	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN1@send_all_t:

; 858  :     }

  004b8	e9 af fe ff ff	 jmp	 $LN4@send_all_t
$LN3@send_all_t:

; 859  :     Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
; 860  : 
; 861  :     send_tree(s, (ct_data *)s->dyn_ltree, lcodes-1); /* literal tree */

  004bd	8b 55 0c	 mov	 edx, DWORD PTR _lcodes$[ebp]
  004c0	83 ea 01	 sub	 edx, 1
  004c3	52		 push	 edx
  004c4	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004c7	05 94 00 00 00	 add	 eax, 148		; 00000094H
  004cc	50		 push	 eax
  004cd	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004d0	51		 push	 ecx
  004d1	e8 00 00 00 00	 call	 _send_tree
  004d6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 862  :     Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
; 863  : 
; 864  :     send_tree(s, (ct_data *)s->dyn_dtree, dcodes-1); /* distance tree */

  004d9	8b 55 10	 mov	 edx, DWORD PTR _dcodes$[ebp]
  004dc	83 ea 01	 sub	 edx, 1
  004df	52		 push	 edx
  004e0	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  004e3	05 88 09 00 00	 add	 eax, 2440		; 00000988H
  004e8	50		 push	 eax
  004e9	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  004ec	51		 push	 ecx
  004ed	e8 00 00 00 00	 call	 _send_tree
  004f2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 865  :     Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
; 866  : }

  004f5	8b e5		 mov	 esp, ebp
  004f7	5d		 pop	 ebp
  004f8	c3		 ret	 0
_send_all_trees ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _build_tree
_TEXT	SEGMENT
tv211 = -36						; size = 4
tv131 = -32						; size = 4
_stree$ = -28						; size = 4
_m$ = -24						; size = 4
_node$ = -20						; size = 4
_max_code$ = -16					; size = 4
_tree$ = -12						; size = 4
_n$ = -8						; size = 4
_elems$ = -4						; size = 4
_s$ = 8							; size = 4
_desc$ = 12						; size = 4
_build_tree PROC					; COMDAT

; 626  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 627  :     ct_data *tree         = desc->dyn_tree;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _desc$[ebp]
  00009	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000b	89 4d f4	 mov	 DWORD PTR _tree$[ebp], ecx

; 628  :     const ct_data *stree  = desc->stat_desc->static_tree;

  0000e	8b 55 0c	 mov	 edx, DWORD PTR _desc$[ebp]
  00011	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	89 4d e4	 mov	 DWORD PTR _stree$[ebp], ecx

; 629  :     int elems             = desc->stat_desc->elems;

  00019	8b 55 0c	 mov	 edx, DWORD PTR _desc$[ebp]
  0001c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001f	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00022	89 4d fc	 mov	 DWORD PTR _elems$[ebp], ecx

; 630  :     int n, m;          /* iterate over heap elements */
; 631  :     int max_code = -1; /* largest code with non zero frequency */

  00025	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _max_code$[ebp], -1

; 632  :     int node;          /* new node being created */
; 633  : 
; 634  :     /* Construct the initial heap, with least frequent element in
; 635  :      * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
; 636  :      * heap[0] is not used.
; 637  :      */
; 638  :     s->heap_len = 0, s->heap_max = HEAP_SIZE;

  0002c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0002f	c7 82 50 14 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+5200], 0
  00039	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0003c	c7 80 54 14 00
	00 3d 02 00 00	 mov	 DWORD PTR [eax+5204], 573 ; 0000023dH

; 639  : 
; 640  :     for (n = 0; n < elems; n++) {

  00046	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _n$[ebp], 0
  0004d	eb 09		 jmp	 SHORT $LN14@build_tree
$LN13@build_tree:
  0004f	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  00052	83 c1 01	 add	 ecx, 1
  00055	89 4d f8	 mov	 DWORD PTR _n$[ebp], ecx
$LN14@build_tree:
  00058	8b 55 f8	 mov	 edx, DWORD PTR _n$[ebp]
  0005b	3b 55 fc	 cmp	 edx, DWORD PTR _elems$[ebp]
  0005e	7d 5d		 jge	 SHORT $LN9@build_tree

; 641  :         if (tree[n].Freq != 0) {

  00060	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00063	8b 4d f4	 mov	 ecx, DWORD PTR _tree$[ebp]
  00066	0f b7 14 81	 movzx	 edx, WORD PTR [ecx+eax*4]
  0006a	85 d2		 test	 edx, edx
  0006c	74 40		 je	 SHORT $LN11@build_tree

; 642  :             s->heap[++(s->heap_len)] = max_code = n;

  0006e	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00071	89 45 f0	 mov	 DWORD PTR _max_code$[ebp], eax
  00074	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00077	8b 91 50 14 00
	00		 mov	 edx, DWORD PTR [ecx+5200]
  0007d	83 c2 01	 add	 edx, 1
  00080	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00083	89 90 50 14 00
	00		 mov	 DWORD PTR [eax+5200], edx
  00089	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0008c	8b 91 50 14 00
	00		 mov	 edx, DWORD PTR [ecx+5200]
  00092	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00095	8b 4d f0	 mov	 ecx, DWORD PTR _max_code$[ebp]
  00098	89 8c 90 5c 0b
	00 00		 mov	 DWORD PTR [eax+edx*4+2908], ecx

; 643  :             s->depth[n] = 0;

  0009f	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000a2	03 55 f8	 add	 edx, DWORD PTR _n$[ebp]
  000a5	c6 82 58 14 00
	00 00		 mov	 BYTE PTR [edx+5208], 0

; 644  :         } else {

  000ac	eb 0d		 jmp	 SHORT $LN10@build_tree
$LN11@build_tree:

; 645  :             tree[n].Len = 0;

  000ae	33 c0		 xor	 eax, eax
  000b0	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  000b3	8b 55 f4	 mov	 edx, DWORD PTR _tree$[ebp]
  000b6	66 89 44 8a 02	 mov	 WORD PTR [edx+ecx*4+2], ax
$LN10@build_tree:

; 646  :         }
; 647  :     }

  000bb	eb 92		 jmp	 SHORT $LN13@build_tree
$LN9@build_tree:

; 648  : 
; 649  :     /* The pkzip format requires that at least one distance code exists,
; 650  :      * and that at least one bit should be sent even if there is only one
; 651  :      * possible code. So to avoid special checks later on we force at least
; 652  :      * two codes of non zero frequency.
; 653  :      */
; 654  :     while (s->heap_len < 2) {

  000bd	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000c0	83 b8 50 14 00
	00 02		 cmp	 DWORD PTR [eax+5200], 2
  000c7	0f 8d aa 00 00
	00		 jge	 $LN8@build_tree

; 655  :         node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);

  000cd	83 7d f0 02	 cmp	 DWORD PTR _max_code$[ebp], 2
  000d1	7d 11		 jge	 SHORT $LN17@build_tree
  000d3	8b 4d f0	 mov	 ecx, DWORD PTR _max_code$[ebp]
  000d6	83 c1 01	 add	 ecx, 1
  000d9	89 4d f0	 mov	 DWORD PTR _max_code$[ebp], ecx
  000dc	8b 55 f0	 mov	 edx, DWORD PTR _max_code$[ebp]
  000df	89 55 e0	 mov	 DWORD PTR tv131[ebp], edx
  000e2	eb 07		 jmp	 SHORT $LN18@build_tree
$LN17@build_tree:
  000e4	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv131[ebp], 0
$LN18@build_tree:
  000eb	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000ee	8b 88 50 14 00
	00		 mov	 ecx, DWORD PTR [eax+5200]
  000f4	83 c1 01	 add	 ecx, 1
  000f7	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000fa	89 8a 50 14 00
	00		 mov	 DWORD PTR [edx+5200], ecx
  00100	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00103	8b 88 50 14 00
	00		 mov	 ecx, DWORD PTR [eax+5200]
  00109	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0010c	8b 45 e0	 mov	 eax, DWORD PTR tv131[ebp]
  0010f	89 84 8a 5c 0b
	00 00		 mov	 DWORD PTR [edx+ecx*4+2908], eax
  00116	8b 4d e0	 mov	 ecx, DWORD PTR tv131[ebp]
  00119	89 4d ec	 mov	 DWORD PTR _node$[ebp], ecx

; 656  :         tree[node].Freq = 1;

  0011c	ba 01 00 00 00	 mov	 edx, 1
  00121	8b 45 ec	 mov	 eax, DWORD PTR _node$[ebp]
  00124	8b 4d f4	 mov	 ecx, DWORD PTR _tree$[ebp]
  00127	66 89 14 81	 mov	 WORD PTR [ecx+eax*4], dx

; 657  :         s->depth[node] = 0;

  0012b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0012e	03 55 ec	 add	 edx, DWORD PTR _node$[ebp]
  00131	c6 82 58 14 00
	00 00		 mov	 BYTE PTR [edx+5208], 0

; 658  :         s->opt_len--; if (stree) s->static_len -= stree[node].Len;

  00138	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0013b	8b 88 a8 16 00
	00		 mov	 ecx, DWORD PTR [eax+5800]
  00141	83 e9 01	 sub	 ecx, 1
  00144	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00147	89 8a a8 16 00
	00		 mov	 DWORD PTR [edx+5800], ecx
  0014d	83 7d e4 00	 cmp	 DWORD PTR _stree$[ebp], 0
  00151	74 1f		 je	 SHORT $LN7@build_tree
  00153	8b 45 ec	 mov	 eax, DWORD PTR _node$[ebp]
  00156	8b 4d e4	 mov	 ecx, DWORD PTR _stree$[ebp]
  00159	0f b7 54 81 02	 movzx	 edx, WORD PTR [ecx+eax*4+2]
  0015e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00161	8b 88 ac 16 00
	00		 mov	 ecx, DWORD PTR [eax+5804]
  00167	2b ca		 sub	 ecx, edx
  00169	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0016c	89 8a ac 16 00
	00		 mov	 DWORD PTR [edx+5804], ecx
$LN7@build_tree:

; 659  :         /* node is 0 or 1 so it does not have extra bits */
; 660  :     }

  00172	e9 46 ff ff ff	 jmp	 $LN9@build_tree
$LN8@build_tree:

; 661  :     desc->max_code = max_code;

  00177	8b 45 0c	 mov	 eax, DWORD PTR _desc$[ebp]
  0017a	8b 4d f0	 mov	 ecx, DWORD PTR _max_code$[ebp]
  0017d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 662  : 
; 663  :     /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
; 664  :      * establish sub-heaps of increasing lengths:
; 665  :      */
; 666  :     for (n = s->heap_len/2; n >= 1; n--) pqdownheap(s, tree, n);

  00180	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00183	8b 82 50 14 00
	00		 mov	 eax, DWORD PTR [edx+5200]
  00189	99		 cdq
  0018a	2b c2		 sub	 eax, edx
  0018c	d1 f8		 sar	 eax, 1
  0018e	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
  00191	eb 09		 jmp	 SHORT $LN6@build_tree
$LN5@build_tree:
  00193	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00196	83 e8 01	 sub	 eax, 1
  00199	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
$LN6@build_tree:
  0019c	83 7d f8 01	 cmp	 DWORD PTR _n$[ebp], 1
  001a0	7c 16		 jl	 SHORT $LN4@build_tree
  001a2	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  001a5	51		 push	 ecx
  001a6	8b 55 f4	 mov	 edx, DWORD PTR _tree$[ebp]
  001a9	52		 push	 edx
  001aa	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001ad	50		 push	 eax
  001ae	e8 00 00 00 00	 call	 _pqdownheap
  001b3	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b6	eb db		 jmp	 SHORT $LN5@build_tree
$LN4@build_tree:

; 667  : 
; 668  :     /* Construct the Huffman tree by repeatedly combining the least two
; 669  :      * frequent nodes.
; 670  :      */
; 671  :     node = elems;              /* next internal node of the tree */

  001b8	8b 4d fc	 mov	 ecx, DWORD PTR _elems$[ebp]
  001bb	89 4d ec	 mov	 DWORD PTR _node$[ebp], ecx
$LN3@build_tree:

; 672  :     do {
; 673  :         pqremove(s, tree, n);  /* n = node of least frequency */

  001be	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001c1	8b 82 60 0b 00
	00		 mov	 eax, DWORD PTR [edx+2912]
  001c7	89 45 f8	 mov	 DWORD PTR _n$[ebp], eax
  001ca	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001cd	8b 91 50 14 00
	00		 mov	 edx, DWORD PTR [ecx+5200]
  001d3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001d6	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001d9	8b 94 91 5c 0b
	00 00		 mov	 edx, DWORD PTR [ecx+edx*4+2908]
  001e0	89 90 60 0b 00
	00		 mov	 DWORD PTR [eax+2912], edx
  001e6	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001e9	8b 88 50 14 00
	00		 mov	 ecx, DWORD PTR [eax+5200]
  001ef	83 e9 01	 sub	 ecx, 1
  001f2	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001f5	89 8a 50 14 00
	00		 mov	 DWORD PTR [edx+5200], ecx
  001fb	6a 01		 push	 1
  001fd	8b 45 f4	 mov	 eax, DWORD PTR _tree$[ebp]
  00200	50		 push	 eax
  00201	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00204	51		 push	 ecx
  00205	e8 00 00 00 00	 call	 _pqdownheap
  0020a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 674  :         m = s->heap[SMALLEST]; /* m = node of next least frequency */

  0020d	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00210	8b 82 60 0b 00
	00		 mov	 eax, DWORD PTR [edx+2912]
  00216	89 45 e8	 mov	 DWORD PTR _m$[ebp], eax

; 675  : 
; 676  :         s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */

  00219	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0021c	8b 91 54 14 00
	00		 mov	 edx, DWORD PTR [ecx+5204]
  00222	83 ea 01	 sub	 edx, 1
  00225	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00228	89 90 54 14 00
	00		 mov	 DWORD PTR [eax+5204], edx
  0022e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00231	8b 91 54 14 00
	00		 mov	 edx, DWORD PTR [ecx+5204]
  00237	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0023a	8b 4d f8	 mov	 ecx, DWORD PTR _n$[ebp]
  0023d	89 8c 90 5c 0b
	00 00		 mov	 DWORD PTR [eax+edx*4+2908], ecx

; 677  :         s->heap[--(s->heap_max)] = m;

  00244	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00247	8b 82 54 14 00
	00		 mov	 eax, DWORD PTR [edx+5204]
  0024d	83 e8 01	 sub	 eax, 1
  00250	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00253	89 81 54 14 00
	00		 mov	 DWORD PTR [ecx+5204], eax
  00259	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0025c	8b 82 54 14 00
	00		 mov	 eax, DWORD PTR [edx+5204]
  00262	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00265	8b 55 e8	 mov	 edx, DWORD PTR _m$[ebp]
  00268	89 94 81 5c 0b
	00 00		 mov	 DWORD PTR [ecx+eax*4+2908], edx

; 678  : 
; 679  :         /* Create a new node father of n and m */
; 680  :         tree[node].Freq = tree[n].Freq + tree[m].Freq;

  0026f	8b 45 f8	 mov	 eax, DWORD PTR _n$[ebp]
  00272	8b 4d f4	 mov	 ecx, DWORD PTR _tree$[ebp]
  00275	0f b7 14 81	 movzx	 edx, WORD PTR [ecx+eax*4]
  00279	8b 45 e8	 mov	 eax, DWORD PTR _m$[ebp]
  0027c	8b 4d f4	 mov	 ecx, DWORD PTR _tree$[ebp]
  0027f	0f b7 04 81	 movzx	 eax, WORD PTR [ecx+eax*4]
  00283	03 d0		 add	 edx, eax
  00285	8b 4d ec	 mov	 ecx, DWORD PTR _node$[ebp]
  00288	8b 45 f4	 mov	 eax, DWORD PTR _tree$[ebp]
  0028b	66 89 14 88	 mov	 WORD PTR [eax+ecx*4], dx

; 681  :         s->depth[node] = (uch)((s->depth[n] >= s->depth[m] ?
; 682  :                                 s->depth[n] : s->depth[m]) + 1);

  0028f	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00292	03 4d f8	 add	 ecx, DWORD PTR _n$[ebp]
  00295	0f b6 91 58 14
	00 00		 movzx	 edx, BYTE PTR [ecx+5208]
  0029c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0029f	03 45 e8	 add	 eax, DWORD PTR _m$[ebp]
  002a2	0f b6 88 58 14
	00 00		 movzx	 ecx, BYTE PTR [eax+5208]
  002a9	3b d1		 cmp	 edx, ecx
  002ab	7c 12		 jl	 SHORT $LN19@build_tree
  002ad	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002b0	03 55 f8	 add	 edx, DWORD PTR _n$[ebp]
  002b3	0f b6 82 58 14
	00 00		 movzx	 eax, BYTE PTR [edx+5208]
  002ba	89 45 dc	 mov	 DWORD PTR tv211[ebp], eax
  002bd	eb 10		 jmp	 SHORT $LN20@build_tree
$LN19@build_tree:
  002bf	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002c2	03 4d e8	 add	 ecx, DWORD PTR _m$[ebp]
  002c5	0f b6 91 58 14
	00 00		 movzx	 edx, BYTE PTR [ecx+5208]
  002cc	89 55 dc	 mov	 DWORD PTR tv211[ebp], edx
$LN20@build_tree:
  002cf	8b 45 dc	 mov	 eax, DWORD PTR tv211[ebp]
  002d2	83 c0 01	 add	 eax, 1
  002d5	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002d8	03 4d ec	 add	 ecx, DWORD PTR _node$[ebp]
  002db	88 81 58 14 00
	00		 mov	 BYTE PTR [ecx+5208], al

; 683  :         tree[n].Dad = tree[m].Dad = (ush)node;

  002e1	8b 55 e8	 mov	 edx, DWORD PTR _m$[ebp]
  002e4	8b 45 f4	 mov	 eax, DWORD PTR _tree$[ebp]
  002e7	66 8b 4d ec	 mov	 cx, WORD PTR _node$[ebp]
  002eb	66 89 4c 90 02	 mov	 WORD PTR [eax+edx*4+2], cx
  002f0	8b 55 f8	 mov	 edx, DWORD PTR _n$[ebp]
  002f3	8b 45 f4	 mov	 eax, DWORD PTR _tree$[ebp]
  002f6	66 8b 4d ec	 mov	 cx, WORD PTR _node$[ebp]
  002fa	66 89 4c 90 02	 mov	 WORD PTR [eax+edx*4+2], cx

; 684  : #ifdef DUMP_BL_TREE
; 685  :         if (tree == s->bl_tree) {
; 686  :             fprintf(stderr,"\nnode %d(%d), sons %d(%d) %d(%d)",
; 687  :                     node, tree[node].Freq, n, tree[n].Freq, m, tree[m].Freq);
; 688  :         }
; 689  : #endif
; 690  :         /* and insert the new node in the heap */
; 691  :         s->heap[SMALLEST] = node++;

  002ff	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00302	8b 45 ec	 mov	 eax, DWORD PTR _node$[ebp]
  00305	89 82 60 0b 00
	00		 mov	 DWORD PTR [edx+2912], eax
  0030b	8b 4d ec	 mov	 ecx, DWORD PTR _node$[ebp]
  0030e	83 c1 01	 add	 ecx, 1
  00311	89 4d ec	 mov	 DWORD PTR _node$[ebp], ecx

; 692  :         pqdownheap(s, tree, SMALLEST);

  00314	6a 01		 push	 1
  00316	8b 55 f4	 mov	 edx, DWORD PTR _tree$[ebp]
  00319	52		 push	 edx
  0031a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0031d	50		 push	 eax
  0031e	e8 00 00 00 00	 call	 _pqdownheap
  00323	83 c4 0c	 add	 esp, 12			; 0000000cH

; 693  : 
; 694  :     } while (s->heap_len >= 2);

  00326	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00329	83 b9 50 14 00
	00 02		 cmp	 DWORD PTR [ecx+5200], 2
  00330	0f 8d 88 fe ff
	ff		 jge	 $LN3@build_tree

; 695  : 
; 696  :     s->heap[--(s->heap_max)] = s->heap[SMALLEST];

  00336	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00339	8b 82 54 14 00
	00		 mov	 eax, DWORD PTR [edx+5204]
  0033f	83 e8 01	 sub	 eax, 1
  00342	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00345	89 81 54 14 00
	00		 mov	 DWORD PTR [ecx+5204], eax
  0034b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0034e	8b 82 54 14 00
	00		 mov	 eax, DWORD PTR [edx+5204]
  00354	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00357	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0035a	8b 92 60 0b 00
	00		 mov	 edx, DWORD PTR [edx+2912]
  00360	89 94 81 5c 0b
	00 00		 mov	 DWORD PTR [ecx+eax*4+2908], edx

; 697  : 
; 698  :     /* At this point, the fields freq and dad are set. We can now
; 699  :      * generate the bit lengths.
; 700  :      */
; 701  :     gen_bitlen(s, (tree_desc *)desc);

  00367	8b 45 0c	 mov	 eax, DWORD PTR _desc$[ebp]
  0036a	50		 push	 eax
  0036b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0036e	51		 push	 ecx
  0036f	e8 00 00 00 00	 call	 _gen_bitlen
  00374	83 c4 08	 add	 esp, 8

; 702  : 
; 703  :     /* The field len is now set, we can generate the bit codes */
; 704  :     gen_codes ((ct_data *)tree, max_code, s->bl_count);

  00377	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0037a	81 c2 3c 0b 00
	00		 add	 edx, 2876		; 00000b3cH
  00380	52		 push	 edx
  00381	8b 45 f0	 mov	 eax, DWORD PTR _max_code$[ebp]
  00384	50		 push	 eax
  00385	8b 4d f4	 mov	 ecx, DWORD PTR _tree$[ebp]
  00388	51		 push	 ecx
  00389	e8 00 00 00 00	 call	 _gen_codes
  0038e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 705  : }

  00391	8b e5		 mov	 esp, ebp
  00393	5d		 pop	 ebp
  00394	c3		 ret	 0
_build_tree ENDP
_TEXT	ENDS
PUBLIC	__tr_init
; Function compile flags: /Odtp
;	COMDAT __tr_init
_TEXT	SEGMENT
_s$ = 8							; size = 4
__tr_init PROC						; COMDAT

; 388  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 389  :     tr_static_init();

  00003	e8 00 00 00 00	 call	 _tr_static_init

; 390  : 
; 391  :     s->l_desc.dyn_tree = s->dyn_ltree;

  00008	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0000b	05 94 00 00 00	 add	 eax, 148		; 00000094H
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00013	89 81 18 0b 00
	00		 mov	 DWORD PTR [ecx+2840], eax

; 392  :     s->l_desc.stat_desc = &static_l_desc;

  00019	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0001c	c7 82 20 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+2848], OFFSET _static_l_desc

; 393  : 
; 394  :     s->d_desc.dyn_tree = s->dyn_dtree;

  00026	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00029	05 88 09 00 00	 add	 eax, 2440		; 00000988H
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00031	89 81 24 0b 00
	00		 mov	 DWORD PTR [ecx+2852], eax

; 395  :     s->d_desc.stat_desc = &static_d_desc;

  00037	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0003a	c7 82 2c 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+2860], OFFSET _static_d_desc

; 396  : 
; 397  :     s->bl_desc.dyn_tree = s->bl_tree;

  00044	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00047	05 7c 0a 00 00	 add	 eax, 2684		; 00000a7cH
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0004f	89 81 30 0b 00
	00		 mov	 DWORD PTR [ecx+2864], eax

; 398  :     s->bl_desc.stat_desc = &static_bl_desc;

  00055	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00058	c7 82 38 0b 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+2872], OFFSET _static_bl_desc

; 399  : 
; 400  :     s->bi_buf = 0;

  00062	33 c0		 xor	 eax, eax
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00067	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax

; 401  :     s->bi_valid = 0;

  0006e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00071	c7 82 bc 16 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+5820], 0

; 402  :     s->last_eob_len = 8; /* enough lookahead for inflate */

  0007b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0007e	c7 80 b4 16 00
	00 08 00 00 00	 mov	 DWORD PTR [eax+5812], 8

; 403  : #ifdef DEBUG
; 404  :     s->compressed_len = 0L;
; 405  :     s->bits_sent = 0L;
; 406  : #endif
; 407  : 
; 408  :     /* Initialize the first block of the first file: */
; 409  :     init_block(s);

  00088	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0008b	51		 push	 ecx
  0008c	e8 00 00 00 00	 call	 _init_block
  00091	83 c4 04	 add	 esp, 4

; 410  : }

  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
__tr_init ENDP
; Function compile flags: /Odtp
;	COMDAT _build_bl_tree
_TEXT	SEGMENT
_max_blindex$ = -4					; size = 4
_s$ = 8							; size = 4
_build_bl_tree PROC					; COMDAT

; 809  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 810  :     int max_blindex;  /* index of last bit length code of non zero freq */
; 811  : 
; 812  :     /* Determine the bit length frequencies for literal and distance trees */
; 813  :     scan_tree(s, (ct_data *)s->dyn_ltree, s->l_desc.max_code);

  00004	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00007	8b 88 1c 0b 00
	00		 mov	 ecx, DWORD PTR [eax+2844]
  0000d	51		 push	 ecx
  0000e	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00011	81 c2 94 00 00
	00		 add	 edx, 148		; 00000094H
  00017	52		 push	 edx
  00018	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _scan_tree
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH

; 814  :     scan_tree(s, (ct_data *)s->dyn_dtree, s->d_desc.max_code);

  00024	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00027	8b 91 28 0b 00
	00		 mov	 edx, DWORD PTR [ecx+2856]
  0002d	52		 push	 edx
  0002e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00031	05 88 09 00 00	 add	 eax, 2440		; 00000988H
  00036	50		 push	 eax
  00037	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0003a	51		 push	 ecx
  0003b	e8 00 00 00 00	 call	 _scan_tree
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 815  : 
; 816  :     /* Build the bit length tree: */
; 817  :     build_tree(s, (tree_desc *)(&(s->bl_desc)));

  00043	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00046	81 c2 30 0b 00
	00		 add	 edx, 2864		; 00000b30H
  0004c	52		 push	 edx
  0004d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _build_tree
  00056	83 c4 08	 add	 esp, 8

; 818  :     /* opt_len now includes the length of the tree representations, except
; 819  :      * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
; 820  :      */
; 821  : 
; 822  :     /* Determine the number of bit length codes to send. The pkzip format
; 823  :      * requires that at least 4 bit length codes be sent. (appnote.txt says
; 824  :      * 3 but the actual value used is 4.)
; 825  :      */
; 826  :     for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {

  00059	c7 45 fc 12 00
	00 00		 mov	 DWORD PTR _max_blindex$[ebp], 18 ; 00000012H
  00060	eb 09		 jmp	 SHORT $LN4@build_bl_t
$LN3@build_bl_t:
  00062	8b 4d fc	 mov	 ecx, DWORD PTR _max_blindex$[ebp]
  00065	83 e9 01	 sub	 ecx, 1
  00068	89 4d fc	 mov	 DWORD PTR _max_blindex$[ebp], ecx
$LN4@build_bl_t:
  0006b	83 7d fc 03	 cmp	 DWORD PTR _max_blindex$[ebp], 3
  0006f	7c 1d		 jl	 SHORT $LN2@build_bl_t

; 827  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  00071	8b 55 fc	 mov	 edx, DWORD PTR _max_blindex$[ebp]
  00074	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR _bl_order[edx]
  0007b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0007e	0f b7 94 81 7e
	0a 00 00	 movzx	 edx, WORD PTR [ecx+eax*4+2686]
  00086	85 d2		 test	 edx, edx
  00088	74 02		 je	 SHORT $LN1@build_bl_t
  0008a	eb 02		 jmp	 SHORT $LN2@build_bl_t
$LN1@build_bl_t:

; 828  :     }

  0008c	eb d4		 jmp	 SHORT $LN3@build_bl_t
$LN2@build_bl_t:

; 829  :     /* Update opt_len to include the bit length tree and counts */
; 830  :     s->opt_len += 3*(max_blindex+1) + 5+5+4;

  0008e	8b 45 fc	 mov	 eax, DWORD PTR _max_blindex$[ebp]
  00091	83 c0 01	 add	 eax, 1
  00094	6b c0 03	 imul	 eax, 3
  00097	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0009a	8b 91 a8 16 00
	00		 mov	 edx, DWORD PTR [ecx+5800]
  000a0	8d 44 10 0e	 lea	 eax, DWORD PTR [eax+edx+14]
  000a4	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  000a7	89 81 a8 16 00
	00		 mov	 DWORD PTR [ecx+5800], eax

; 831  :     Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
; 832  :             s->opt_len, s->static_len));
; 833  : 
; 834  :     return max_blindex;

  000ad	8b 45 fc	 mov	 eax, DWORD PTR _max_blindex$[ebp]

; 835  : }

  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c3		 ret	 0
_build_bl_tree ENDP
PUBLIC	__tr_flush_block
; Function compile flags: /Odtp
;	COMDAT __tr_flush_block
_TEXT	SEGMENT
_val$78167 = -28					; size = 4
_len$78163 = -24					; size = 4
_val$78150 = -20					; size = 4
_len$78146 = -16					; size = 4
_opt_lenb$ = -12					; size = 4
_max_blindex$ = -8					; size = 4
_static_lenb$ = -4					; size = 4
_s$ = 8							; size = 4
_buf$ = 12						; size = 4
_stored_len$ = 16					; size = 4
_last$ = 20						; size = 4
__tr_flush_block PROC					; COMDAT

; 930  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 931  :     ulg opt_lenb, static_lenb; /* opt_len and static_len in bytes */
; 932  :     int max_blindex = 0;  /* index of last bit length code of non zero freq */

  00006	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _max_blindex$[ebp], 0

; 933  : 
; 934  :     /* Build the Huffman trees unless a stored block is forced */
; 935  :     if (s->level > 0) {

  0000d	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00010	83 b8 84 00 00
	00 00		 cmp	 DWORD PTR [eax+132], 0
  00017	0f 8e 8d 00 00
	00		 jle	 $LN14@tr_flush_b

; 936  : 
; 937  :         /* Check if the file is binary or text */
; 938  :         if (s->strm->data_type == Z_UNKNOWN)

  0001d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00020	8b 11		 mov	 edx, DWORD PTR [ecx]
  00022	83 7a 2c 02	 cmp	 DWORD PTR [edx+44], 2
  00026	75 14		 jne	 SHORT $LN13@tr_flush_b

; 939  :             s->strm->data_type = detect_data_type(s);

  00028	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _detect_data_type
  00031	83 c4 04	 add	 esp, 4
  00034	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00037	8b 11		 mov	 edx, DWORD PTR [ecx]
  00039	89 42 2c	 mov	 DWORD PTR [edx+44], eax
$LN13@tr_flush_b:

; 940  : 
; 941  :         /* Construct the literal and distance trees */
; 942  :         build_tree(s, (tree_desc *)(&(s->l_desc)));

  0003c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0003f	05 18 0b 00 00	 add	 eax, 2840		; 00000b18H
  00044	50		 push	 eax
  00045	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00048	51		 push	 ecx
  00049	e8 00 00 00 00	 call	 _build_tree
  0004e	83 c4 08	 add	 esp, 8

; 943  :         Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
; 944  :                 s->static_len));
; 945  : 
; 946  :         build_tree(s, (tree_desc *)(&(s->d_desc)));

  00051	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00054	81 c2 24 0b 00
	00		 add	 edx, 2852		; 00000b24H
  0005a	52		 push	 edx
  0005b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _build_tree
  00064	83 c4 08	 add	 esp, 8

; 947  :         Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
; 948  :                 s->static_len));
; 949  :         /* At this point, opt_len and static_len are the total bit lengths of
; 950  :          * the compressed block data, excluding the tree representations.
; 951  :          */
; 952  : 
; 953  :         /* Build the bit length tree for the above two trees, and get the index
; 954  :          * in bl_order of the last bit length code to send.
; 955  :          */
; 956  :         max_blindex = build_bl_tree(s);

  00067	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0006a	51		 push	 ecx
  0006b	e8 00 00 00 00	 call	 _build_bl_tree
  00070	83 c4 04	 add	 esp, 4
  00073	89 45 f8	 mov	 DWORD PTR _max_blindex$[ebp], eax

; 957  : 
; 958  :         /* Determine the best encoding. Compute the block lengths in bytes. */
; 959  :         opt_lenb = (s->opt_len+3+7)>>3;

  00076	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00079	8b 82 a8 16 00
	00		 mov	 eax, DWORD PTR [edx+5800]
  0007f	83 c0 0a	 add	 eax, 10			; 0000000aH
  00082	c1 e8 03	 shr	 eax, 3
  00085	89 45 f4	 mov	 DWORD PTR _opt_lenb$[ebp], eax

; 960  :         static_lenb = (s->static_len+3+7)>>3;

  00088	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0008b	8b 91 ac 16 00
	00		 mov	 edx, DWORD PTR [ecx+5804]
  00091	83 c2 0a	 add	 edx, 10			; 0000000aH
  00094	c1 ea 03	 shr	 edx, 3
  00097	89 55 fc	 mov	 DWORD PTR _static_lenb$[ebp], edx

; 961  : 
; 962  :         Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
; 963  :                 opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
; 964  :                 s->last_lit));
; 965  : 
; 966  :         if (static_lenb <= opt_lenb) opt_lenb = static_lenb;

  0009a	8b 45 fc	 mov	 eax, DWORD PTR _static_lenb$[ebp]
  0009d	3b 45 f4	 cmp	 eax, DWORD PTR _opt_lenb$[ebp]
  000a0	77 06		 ja	 SHORT $LN12@tr_flush_b
  000a2	8b 4d fc	 mov	 ecx, DWORD PTR _static_lenb$[ebp]
  000a5	89 4d f4	 mov	 DWORD PTR _opt_lenb$[ebp], ecx
$LN12@tr_flush_b:

; 967  : 
; 968  :     } else {

  000a8	eb 0f		 jmp	 SHORT $LN11@tr_flush_b
$LN14@tr_flush_b:

; 969  :         Assert(buf != (char*)0, "lost buf");
; 970  :         opt_lenb = static_lenb = stored_len + 5; /* force a stored block */

  000aa	8b 55 10	 mov	 edx, DWORD PTR _stored_len$[ebp]
  000ad	83 c2 05	 add	 edx, 5
  000b0	89 55 fc	 mov	 DWORD PTR _static_lenb$[ebp], edx
  000b3	8b 45 fc	 mov	 eax, DWORD PTR _static_lenb$[ebp]
  000b6	89 45 f4	 mov	 DWORD PTR _opt_lenb$[ebp], eax
$LN11@tr_flush_b:

; 971  :     }
; 972  : 
; 973  : #ifdef FORCE_STORED
; 974  :     if (buf != (char*)0) { /* force stored block */
; 975  : #else
; 976  :     if (stored_len+4 <= opt_lenb && buf != (char*)0) {

  000b9	8b 4d 10	 mov	 ecx, DWORD PTR _stored_len$[ebp]
  000bc	83 c1 04	 add	 ecx, 4
  000bf	3b 4d f4	 cmp	 ecx, DWORD PTR _opt_lenb$[ebp]
  000c2	77 23		 ja	 SHORT $LN10@tr_flush_b
  000c4	83 7d 0c 00	 cmp	 DWORD PTR _buf$[ebp], 0
  000c8	74 1d		 je	 SHORT $LN10@tr_flush_b

; 977  :                        /* 4: two words for the lengths */
; 978  : #endif
; 979  :         /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
; 980  :          * Otherwise we can't have processed more than WSIZE input bytes since
; 981  :          * the last block flush, because compression would have been
; 982  :          * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
; 983  :          * transform a block into a stored block.
; 984  :          */
; 985  :         _tr_stored_block(s, buf, stored_len, last);

  000ca	8b 55 14	 mov	 edx, DWORD PTR _last$[ebp]
  000cd	52		 push	 edx
  000ce	8b 45 10	 mov	 eax, DWORD PTR _stored_len$[ebp]
  000d1	50		 push	 eax
  000d2	8b 4d 0c	 mov	 ecx, DWORD PTR _buf$[ebp]
  000d5	51		 push	 ecx
  000d6	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  000d9	52		 push	 edx
  000da	e8 00 00 00 00	 call	 __tr_stored_block
  000df	83 c4 10	 add	 esp, 16			; 00000010H
  000e2	e9 ba 02 00 00	 jmp	 $LN9@tr_flush_b
$LN10@tr_flush_b:

; 986  : 
; 987  : #ifdef FORCE_STATIC
; 988  :     } else if (static_lenb >= 0) { /* force static trees */
; 989  : #else
; 990  :     } else if (s->strategy == Z_FIXED || static_lenb == opt_lenb) {

  000e7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  000ea	83 b8 88 00 00
	00 04		 cmp	 DWORD PTR [eax+136], 4
  000f1	74 0c		 je	 SHORT $LN7@tr_flush_b
  000f3	8b 4d fc	 mov	 ecx, DWORD PTR _static_lenb$[ebp]
  000f6	3b 4d f4	 cmp	 ecx, DWORD PTR _opt_lenb$[ebp]
  000f9	0f 85 37 01 00
	00		 jne	 $LN8@tr_flush_b
$LN7@tr_flush_b:

; 991  : #endif
; 992  :         send_bits(s, (STATIC_TREES<<1)+last, 3);

  000ff	c7 45 f0 03 00
	00 00		 mov	 DWORD PTR _len$78146[ebp], 3
  00106	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  0010b	2b 55 f0	 sub	 edx, DWORD PTR _len$78146[ebp]
  0010e	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00111	39 90 bc 16 00
	00		 cmp	 DWORD PTR [eax+5820], edx
  00117	0f 8e bf 00 00
	00		 jle	 $LN6@tr_flush_b
  0011d	8b 4d 14	 mov	 ecx, DWORD PTR _last$[ebp]
  00120	83 c1 02	 add	 ecx, 2
  00123	89 4d ec	 mov	 DWORD PTR _val$78150[ebp], ecx
  00126	0f b7 55 ec	 movzx	 edx, WORD PTR _val$78150[ebp]
  0012a	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0012d	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00133	d3 e2		 shl	 edx, cl
  00135	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00138	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  0013f	0b c2		 or	 eax, edx
  00141	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00144	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  0014b	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0014e	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00155	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0015a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0015d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00160	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00163	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00166	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00169	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0016c	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0016f	83 c0 01	 add	 eax, 1
  00172	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00175	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00178	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0017b	0f b7 82 b8 16
	00 00		 movzx	 eax, WORD PTR [edx+5816]
  00182	c1 f8 08	 sar	 eax, 8
  00185	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00188	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0018b	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0018e	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00191	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00194	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00197	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0019a	83 c0 01	 add	 eax, 1
  0019d	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001a0	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  001a3	0f b7 55 ec	 movzx	 edx, WORD PTR _val$78150[ebp]
  001a7	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001aa	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  001af	2b 88 bc 16 00
	00		 sub	 ecx, DWORD PTR [eax+5820]
  001b5	d3 fa		 sar	 edx, cl
  001b7	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001ba	66 89 91 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], dx
  001c1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  001c4	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  001ca	8b 4d f0	 mov	 ecx, DWORD PTR _len$78146[ebp]
  001cd	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  001d1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001d4	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  001da	eb 3f		 jmp	 SHORT $LN5@tr_flush_b
$LN6@tr_flush_b:
  001dc	8b 4d 14	 mov	 ecx, DWORD PTR _last$[ebp]
  001df	83 c1 02	 add	 ecx, 2
  001e2	0f b7 d1	 movzx	 edx, cx
  001e5	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  001e8	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  001ee	d3 e2		 shl	 edx, cl
  001f0	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001f3	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  001fa	0b c2		 or	 eax, edx
  001fc	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  001ff	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00206	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00209	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  0020f	03 45 f0	 add	 eax, DWORD PTR _len$78146[ebp]
  00212	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00215	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN5@tr_flush_b:

; 993  :         compress_block(s, (ct_data *)static_ltree, (ct_data *)static_dtree);

  0021b	68 00 00 00 00	 push	 OFFSET _static_dtree
  00220	68 00 00 00 00	 push	 OFFSET _static_ltree
  00225	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00228	52		 push	 edx
  00229	e8 00 00 00 00	 call	 _compress_block
  0022e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 994  : #ifdef DEBUG
; 995  :         s->compressed_len += 3 + s->static_len;
; 996  : #endif
; 997  :     } else {

  00231	e9 6b 01 00 00	 jmp	 $LN9@tr_flush_b
$LN8@tr_flush_b:

; 998  :         send_bits(s, (DYN_TREES<<1)+last, 3);

  00236	c7 45 e8 03 00
	00 00		 mov	 DWORD PTR _len$78163[ebp], 3
  0023d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00242	2b 45 e8	 sub	 eax, DWORD PTR _len$78163[ebp]
  00245	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00248	39 81 bc 16 00
	00		 cmp	 DWORD PTR [ecx+5820], eax
  0024e	0f 8e c2 00 00
	00		 jle	 $LN3@tr_flush_b
  00254	8b 55 14	 mov	 edx, DWORD PTR _last$[ebp]
  00257	83 c2 04	 add	 edx, 4
  0025a	89 55 e4	 mov	 DWORD PTR _val$78167[ebp], edx
  0025d	0f b7 45 e4	 movzx	 eax, WORD PTR _val$78167[ebp]
  00261	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00264	8b 89 bc 16 00
	00		 mov	 ecx, DWORD PTR [ecx+5820]
  0026a	d3 e0		 shl	 eax, cl
  0026c	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0026f	0f b7 8a b8 16
	00 00		 movzx	 ecx, WORD PTR [edx+5816]
  00276	0b c8		 or	 ecx, eax
  00278	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0027b	66 89 8a b8 16
	00 00		 mov	 WORD PTR [edx+5816], cx
  00282	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00285	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  0028c	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00292	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00295	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00298	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0029b	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  0029e	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  002a1	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002a4	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002a7	83 c1 01	 add	 ecx, 1
  002aa	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002ad	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  002b0	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002b3	0f b7 88 b8 16
	00 00		 movzx	 ecx, WORD PTR [eax+5816]
  002ba	c1 f9 08	 sar	 ecx, 8
  002bd	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002c0	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  002c3	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002c6	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  002c9	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
  002cc	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  002cf	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  002d2	83 c1 01	 add	 ecx, 1
  002d5	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002d8	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  002db	0f b7 45 e4	 movzx	 eax, WORD PTR _val$78167[ebp]
  002df	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002e2	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  002e7	2b 91 bc 16 00
	00		 sub	 edx, DWORD PTR [ecx+5820]
  002ed	8b ca		 mov	 ecx, edx
  002ef	d3 f8		 sar	 eax, cl
  002f1	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  002f4	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  002fb	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  002fe	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00304	8b 4d e8	 mov	 ecx, DWORD PTR _len$78163[ebp]
  00307	8d 54 01 f0	 lea	 edx, DWORD PTR [ecx+eax-16]
  0030b	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0030e	89 90 bc 16 00
	00		 mov	 DWORD PTR [eax+5820], edx
  00314	eb 3f		 jmp	 SHORT $LN2@tr_flush_b
$LN3@tr_flush_b:
  00316	8b 4d 14	 mov	 ecx, DWORD PTR _last$[ebp]
  00319	83 c1 04	 add	 ecx, 4
  0031c	0f b7 d1	 movzx	 edx, cx
  0031f	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00322	8b 88 bc 16 00
	00		 mov	 ecx, DWORD PTR [eax+5820]
  00328	d3 e2		 shl	 edx, cl
  0032a	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0032d	0f b7 81 b8 16
	00 00		 movzx	 eax, WORD PTR [ecx+5816]
  00334	0b c2		 or	 eax, edx
  00336	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00339	66 89 81 b8 16
	00 00		 mov	 WORD PTR [ecx+5816], ax
  00340	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00343	8b 82 bc 16 00
	00		 mov	 eax, DWORD PTR [edx+5820]
  00349	03 45 e8	 add	 eax, DWORD PTR _len$78163[ebp]
  0034c	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  0034f	89 81 bc 16 00
	00		 mov	 DWORD PTR [ecx+5820], eax
$LN2@tr_flush_b:

; 999  :         send_all_trees(s, s->l_desc.max_code+1, s->d_desc.max_code+1,
; 1000 :                        max_blindex+1);

  00355	8b 55 f8	 mov	 edx, DWORD PTR _max_blindex$[ebp]
  00358	83 c2 01	 add	 edx, 1
  0035b	52		 push	 edx
  0035c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0035f	8b 88 28 0b 00
	00		 mov	 ecx, DWORD PTR [eax+2856]
  00365	83 c1 01	 add	 ecx, 1
  00368	51		 push	 ecx
  00369	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  0036c	8b 82 1c 0b 00
	00		 mov	 eax, DWORD PTR [edx+2844]
  00372	83 c0 01	 add	 eax, 1
  00375	50		 push	 eax
  00376	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00379	51		 push	 ecx
  0037a	e8 00 00 00 00	 call	 _send_all_trees
  0037f	83 c4 10	 add	 esp, 16			; 00000010H

; 1001 :         compress_block(s, (ct_data *)s->dyn_ltree, (ct_data *)s->dyn_dtree);

  00382	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00385	81 c2 88 09 00
	00		 add	 edx, 2440		; 00000988H
  0038b	52		 push	 edx
  0038c	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  0038f	05 94 00 00 00	 add	 eax, 148		; 00000094H
  00394	50		 push	 eax
  00395	8b 4d 08	 mov	 ecx, DWORD PTR _s$[ebp]
  00398	51		 push	 ecx
  00399	e8 00 00 00 00	 call	 _compress_block
  0039e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN9@tr_flush_b:

; 1002 : #ifdef DEBUG
; 1003 :         s->compressed_len += 3 + s->opt_len;
; 1004 : #endif
; 1005 :     }
; 1006 :     Assert (s->compressed_len == s->bits_sent, "bad compressed size");
; 1007 :     /* The above check is made mod 2^32, for files larger than 512 MB
; 1008 :      * and uLong implemented on 32 bits.
; 1009 :      */
; 1010 :     init_block(s);

  003a1	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  003a4	52		 push	 edx
  003a5	e8 00 00 00 00	 call	 _init_block
  003aa	83 c4 04	 add	 esp, 4

; 1011 : 
; 1012 :     if (last) {

  003ad	83 7d 14 00	 cmp	 DWORD PTR _last$[ebp], 0
  003b1	74 0c		 je	 SHORT $LN15@tr_flush_b

; 1013 :         bi_windup(s);

  003b3	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  003b6	50		 push	 eax
  003b7	e8 00 00 00 00	 call	 _bi_windup
  003bc	83 c4 04	 add	 esp, 4
$LN15@tr_flush_b:

; 1014 : #ifdef DEBUG
; 1015 :         s->compressed_len += 7;  /* align on byte boundary */
; 1016 : #endif
; 1017 :     }
; 1018 :     Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
; 1019 :            s->compressed_len-7*last));
; 1020 : }

  003bf	8b e5		 mov	 esp, ebp
  003c1	5d		 pop	 ebp
  003c2	c3		 ret	 0
__tr_flush_block ENDP
END
